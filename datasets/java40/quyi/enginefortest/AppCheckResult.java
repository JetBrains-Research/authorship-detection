/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *  定义批次返回结果
 * 1:UserApp userApp 定义用户应用详细信息
 * 2:StaticCheckResultData staticCheckResult 静态检测结果
 * 3:DynamicCheckResultData dynamicCheckResult 动态检测结果
 */
public class AppCheckResult implements org.apache.thrift.TBase<AppCheckResult, AppCheckResult._Fields>, java.io.Serializable, Cloneable, Comparable<AppCheckResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppCheckResult");

  private static final org.apache.thrift.protocol.TField USER_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("userApp", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField STATIC_CHECK_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("staticCheckResult", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DYNAMIC_CHECK_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicCheckResult", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppCheckResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppCheckResultTupleSchemeFactory());
  }

  public UserApp userApp; // required
  public StaticCheckResultData staticCheckResult; // required
  public DynamicCheckResultData dynamicCheckResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_APP((short)1, "userApp"),
    STATIC_CHECK_RESULT((short)2, "staticCheckResult"),
    DYNAMIC_CHECK_RESULT((short)3, "dynamicCheckResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_APP
          return USER_APP;
        case 2: // STATIC_CHECK_RESULT
          return STATIC_CHECK_RESULT;
        case 3: // DYNAMIC_CHECK_RESULT
          return DYNAMIC_CHECK_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_APP, new org.apache.thrift.meta_data.FieldMetaData("userApp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserApp.class)));
    tmpMap.put(_Fields.STATIC_CHECK_RESULT, new org.apache.thrift.meta_data.FieldMetaData("staticCheckResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StaticCheckResultData.class)));
    tmpMap.put(_Fields.DYNAMIC_CHECK_RESULT, new org.apache.thrift.meta_data.FieldMetaData("dynamicCheckResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DynamicCheckResultData.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppCheckResult.class, metaDataMap);
  }

  public AppCheckResult() {
  }

  public AppCheckResult(
    UserApp userApp,
    StaticCheckResultData staticCheckResult,
    DynamicCheckResultData dynamicCheckResult)
  {
    this();
    this.userApp = userApp;
    this.staticCheckResult = staticCheckResult;
    this.dynamicCheckResult = dynamicCheckResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppCheckResult(AppCheckResult other) {
    if (other.isSetUserApp()) {
      this.userApp = new UserApp(other.userApp);
    }
    if (other.isSetStaticCheckResult()) {
      this.staticCheckResult = new StaticCheckResultData(other.staticCheckResult);
    }
    if (other.isSetDynamicCheckResult()) {
      this.dynamicCheckResult = new DynamicCheckResultData(other.dynamicCheckResult);
    }
  }

  public AppCheckResult deepCopy() {
    return new AppCheckResult(this);
  }

  @Override
  public void clear() {
    this.userApp = null;
    this.staticCheckResult = null;
    this.dynamicCheckResult = null;
  }

  public UserApp getUserApp() {
    return this.userApp;
  }

  public AppCheckResult setUserApp(UserApp userApp) {
    this.userApp = userApp;
    return this;
  }

  public void unsetUserApp() {
    this.userApp = null;
  }

  /** Returns true if field userApp is set (has been assigned a value) and false otherwise */
  public boolean isSetUserApp() {
    return this.userApp != null;
  }

  public void setUserAppIsSet(boolean value) {
    if (!value) {
      this.userApp = null;
    }
  }

  public StaticCheckResultData getStaticCheckResult() {
    return this.staticCheckResult;
  }

  public AppCheckResult setStaticCheckResult(StaticCheckResultData staticCheckResult) {
    this.staticCheckResult = staticCheckResult;
    return this;
  }

  public void unsetStaticCheckResult() {
    this.staticCheckResult = null;
  }

  /** Returns true if field staticCheckResult is set (has been assigned a value) and false otherwise */
  public boolean isSetStaticCheckResult() {
    return this.staticCheckResult != null;
  }

  public void setStaticCheckResultIsSet(boolean value) {
    if (!value) {
      this.staticCheckResult = null;
    }
  }

  public DynamicCheckResultData getDynamicCheckResult() {
    return this.dynamicCheckResult;
  }

  public AppCheckResult setDynamicCheckResult(DynamicCheckResultData dynamicCheckResult) {
    this.dynamicCheckResult = dynamicCheckResult;
    return this;
  }

  public void unsetDynamicCheckResult() {
    this.dynamicCheckResult = null;
  }

  /** Returns true if field dynamicCheckResult is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicCheckResult() {
    return this.dynamicCheckResult != null;
  }

  public void setDynamicCheckResultIsSet(boolean value) {
    if (!value) {
      this.dynamicCheckResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_APP:
      if (value == null) {
        unsetUserApp();
      } else {
        setUserApp((UserApp)value);
      }
      break;

    case STATIC_CHECK_RESULT:
      if (value == null) {
        unsetStaticCheckResult();
      } else {
        setStaticCheckResult((StaticCheckResultData)value);
      }
      break;

    case DYNAMIC_CHECK_RESULT:
      if (value == null) {
        unsetDynamicCheckResult();
      } else {
        setDynamicCheckResult((DynamicCheckResultData)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_APP:
      return getUserApp();

    case STATIC_CHECK_RESULT:
      return getStaticCheckResult();

    case DYNAMIC_CHECK_RESULT:
      return getDynamicCheckResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_APP:
      return isSetUserApp();
    case STATIC_CHECK_RESULT:
      return isSetStaticCheckResult();
    case DYNAMIC_CHECK_RESULT:
      return isSetDynamicCheckResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppCheckResult)
      return this.equals((AppCheckResult)that);
    return false;
  }

  public boolean equals(AppCheckResult that) {
    if (that == null)
      return false;

    boolean this_present_userApp = true && this.isSetUserApp();
    boolean that_present_userApp = true && that.isSetUserApp();
    if (this_present_userApp || that_present_userApp) {
      if (!(this_present_userApp && that_present_userApp))
        return false;
      if (!this.userApp.equals(that.userApp))
        return false;
    }

    boolean this_present_staticCheckResult = true && this.isSetStaticCheckResult();
    boolean that_present_staticCheckResult = true && that.isSetStaticCheckResult();
    if (this_present_staticCheckResult || that_present_staticCheckResult) {
      if (!(this_present_staticCheckResult && that_present_staticCheckResult))
        return false;
      if (!this.staticCheckResult.equals(that.staticCheckResult))
        return false;
    }

    boolean this_present_dynamicCheckResult = true && this.isSetDynamicCheckResult();
    boolean that_present_dynamicCheckResult = true && that.isSetDynamicCheckResult();
    if (this_present_dynamicCheckResult || that_present_dynamicCheckResult) {
      if (!(this_present_dynamicCheckResult && that_present_dynamicCheckResult))
        return false;
      if (!this.dynamicCheckResult.equals(that.dynamicCheckResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppCheckResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserApp()).compareTo(other.isSetUserApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userApp, other.userApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStaticCheckResult()).compareTo(other.isSetStaticCheckResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaticCheckResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staticCheckResult, other.staticCheckResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicCheckResult()).compareTo(other.isSetDynamicCheckResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicCheckResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicCheckResult, other.dynamicCheckResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppCheckResult(");
    boolean first = true;

    sb.append("userApp:");
    if (this.userApp == null) {
      sb.append("null");
    } else {
      sb.append(this.userApp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("staticCheckResult:");
    if (this.staticCheckResult == null) {
      sb.append("null");
    } else {
      sb.append(this.staticCheckResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicCheckResult:");
    if (this.dynamicCheckResult == null) {
      sb.append("null");
    } else {
      sb.append(this.dynamicCheckResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userApp != null) {
      userApp.validate();
    }
    if (staticCheckResult != null) {
      staticCheckResult.validate();
    }
    if (dynamicCheckResult != null) {
      dynamicCheckResult.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppCheckResultStandardSchemeFactory implements SchemeFactory {
    public AppCheckResultStandardScheme getScheme() {
      return new AppCheckResultStandardScheme();
    }
  }

  private static class AppCheckResultStandardScheme extends StandardScheme<AppCheckResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppCheckResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userApp = new UserApp();
              struct.userApp.read(iprot);
              struct.setUserAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATIC_CHECK_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.staticCheckResult = new StaticCheckResultData();
              struct.staticCheckResult.read(iprot);
              struct.setStaticCheckResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DYNAMIC_CHECK_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dynamicCheckResult = new DynamicCheckResultData();
              struct.dynamicCheckResult.read(iprot);
              struct.setDynamicCheckResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppCheckResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userApp != null) {
        oprot.writeFieldBegin(USER_APP_FIELD_DESC);
        struct.userApp.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.staticCheckResult != null) {
        oprot.writeFieldBegin(STATIC_CHECK_RESULT_FIELD_DESC);
        struct.staticCheckResult.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dynamicCheckResult != null) {
        oprot.writeFieldBegin(DYNAMIC_CHECK_RESULT_FIELD_DESC);
        struct.dynamicCheckResult.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppCheckResultTupleSchemeFactory implements SchemeFactory {
    public AppCheckResultTupleScheme getScheme() {
      return new AppCheckResultTupleScheme();
    }
  }

  private static class AppCheckResultTupleScheme extends TupleScheme<AppCheckResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppCheckResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserApp()) {
        optionals.set(0);
      }
      if (struct.isSetStaticCheckResult()) {
        optionals.set(1);
      }
      if (struct.isSetDynamicCheckResult()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUserApp()) {
        struct.userApp.write(oprot);
      }
      if (struct.isSetStaticCheckResult()) {
        struct.staticCheckResult.write(oprot);
      }
      if (struct.isSetDynamicCheckResult()) {
        struct.dynamicCheckResult.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppCheckResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.userApp = new UserApp();
        struct.userApp.read(iprot);
        struct.setUserAppIsSet(true);
      }
      if (incoming.get(1)) {
        struct.staticCheckResult = new StaticCheckResultData();
        struct.staticCheckResult.read(iprot);
        struct.setStaticCheckResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dynamicCheckResult = new DynamicCheckResultData();
        struct.dynamicCheckResult.read(iprot);
        struct.setDynamicCheckResultIsSet(true);
      }
    }
  }

}

