/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义动态检测网络流量记录
 * 1:string pidName 进程编号
 * 2:string sourceAddress 源地址
 * 3:string sourcePort 源端口
 * 4:string targetAddress 目标地址
 * 5:string targetPort 目标端口
 * 6:string protocal 所采用协议
 * 7:string dataHex
 * 8:string dataChar
 * 9:string dataLength
 * 10:string operateTime 操作时间
 */
public class NetworkPacket implements org.apache.thrift.TBase<NetworkPacket, NetworkPacket._Fields>, java.io.Serializable, Cloneable, Comparable<NetworkPacket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NetworkPacket");

  private static final org.apache.thrift.protocol.TField PID_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pidName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOURCE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sourcePort", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TARGET_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("targetPort", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROTOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocal", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_HEX_FIELD_DESC = new org.apache.thrift.protocol.TField("dataHex", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_CHAR_FIELD_DESC = new org.apache.thrift.protocol.TField("dataChar", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DATA_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLength", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTime", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NetworkPacketStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NetworkPacketTupleSchemeFactory());
  }

  public String pidName; // required
  public String sourceAddress; // required
  public String sourcePort; // required
  public String targetAddress; // required
  public String targetPort; // required
  public String protocal; // required
  public String dataHex; // required
  public String dataChar; // required
  public String dataLength; // required
  public String operateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID_NAME((short)1, "pidName"),
    SOURCE_ADDRESS((short)2, "sourceAddress"),
    SOURCE_PORT((short)3, "sourcePort"),
    TARGET_ADDRESS((short)4, "targetAddress"),
    TARGET_PORT((short)5, "targetPort"),
    PROTOCAL((short)6, "protocal"),
    DATA_HEX((short)7, "dataHex"),
    DATA_CHAR((short)8, "dataChar"),
    DATA_LENGTH((short)9, "dataLength"),
    OPERATE_TIME((short)10, "operateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID_NAME
          return PID_NAME;
        case 2: // SOURCE_ADDRESS
          return SOURCE_ADDRESS;
        case 3: // SOURCE_PORT
          return SOURCE_PORT;
        case 4: // TARGET_ADDRESS
          return TARGET_ADDRESS;
        case 5: // TARGET_PORT
          return TARGET_PORT;
        case 6: // PROTOCAL
          return PROTOCAL;
        case 7: // DATA_HEX
          return DATA_HEX;
        case 8: // DATA_CHAR
          return DATA_CHAR;
        case 9: // DATA_LENGTH
          return DATA_LENGTH;
        case 10: // OPERATE_TIME
          return OPERATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID_NAME, new org.apache.thrift.meta_data.FieldMetaData("pidName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("sourceAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_PORT, new org.apache.thrift.meta_data.FieldMetaData("sourcePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("targetAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_PORT, new org.apache.thrift.meta_data.FieldMetaData("targetPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCAL, new org.apache.thrift.meta_data.FieldMetaData("protocal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_HEX, new org.apache.thrift.meta_data.FieldMetaData("dataHex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_CHAR, new org.apache.thrift.meta_data.FieldMetaData("dataChar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("dataLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NetworkPacket.class, metaDataMap);
  }

  public NetworkPacket() {
  }

  public NetworkPacket(
    String pidName,
    String sourceAddress,
    String sourcePort,
    String targetAddress,
    String targetPort,
    String protocal,
    String dataHex,
    String dataChar,
    String dataLength,
    String operateTime)
  {
    this();
    this.pidName = pidName;
    this.sourceAddress = sourceAddress;
    this.sourcePort = sourcePort;
    this.targetAddress = targetAddress;
    this.targetPort = targetPort;
    this.protocal = protocal;
    this.dataHex = dataHex;
    this.dataChar = dataChar;
    this.dataLength = dataLength;
    this.operateTime = operateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NetworkPacket(NetworkPacket other) {
    if (other.isSetPidName()) {
      this.pidName = other.pidName;
    }
    if (other.isSetSourceAddress()) {
      this.sourceAddress = other.sourceAddress;
    }
    if (other.isSetSourcePort()) {
      this.sourcePort = other.sourcePort;
    }
    if (other.isSetTargetAddress()) {
      this.targetAddress = other.targetAddress;
    }
    if (other.isSetTargetPort()) {
      this.targetPort = other.targetPort;
    }
    if (other.isSetProtocal()) {
      this.protocal = other.protocal;
    }
    if (other.isSetDataHex()) {
      this.dataHex = other.dataHex;
    }
    if (other.isSetDataChar()) {
      this.dataChar = other.dataChar;
    }
    if (other.isSetDataLength()) {
      this.dataLength = other.dataLength;
    }
    if (other.isSetOperateTime()) {
      this.operateTime = other.operateTime;
    }
  }

  public NetworkPacket deepCopy() {
    return new NetworkPacket(this);
  }

  @Override
  public void clear() {
    this.pidName = null;
    this.sourceAddress = null;
    this.sourcePort = null;
    this.targetAddress = null;
    this.targetPort = null;
    this.protocal = null;
    this.dataHex = null;
    this.dataChar = null;
    this.dataLength = null;
    this.operateTime = null;
  }

  public String getPidName() {
    return this.pidName;
  }

  public NetworkPacket setPidName(String pidName) {
    this.pidName = pidName;
    return this;
  }

  public void unsetPidName() {
    this.pidName = null;
  }

  /** Returns true if field pidName is set (has been assigned a value) and false otherwise */
  public boolean isSetPidName() {
    return this.pidName != null;
  }

  public void setPidNameIsSet(boolean value) {
    if (!value) {
      this.pidName = null;
    }
  }

  public String getSourceAddress() {
    return this.sourceAddress;
  }

  public NetworkPacket setSourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
    return this;
  }

  public void unsetSourceAddress() {
    this.sourceAddress = null;
  }

  /** Returns true if field sourceAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceAddress() {
    return this.sourceAddress != null;
  }

  public void setSourceAddressIsSet(boolean value) {
    if (!value) {
      this.sourceAddress = null;
    }
  }

  public String getSourcePort() {
    return this.sourcePort;
  }

  public NetworkPacket setSourcePort(String sourcePort) {
    this.sourcePort = sourcePort;
    return this;
  }

  public void unsetSourcePort() {
    this.sourcePort = null;
  }

  /** Returns true if field sourcePort is set (has been assigned a value) and false otherwise */
  public boolean isSetSourcePort() {
    return this.sourcePort != null;
  }

  public void setSourcePortIsSet(boolean value) {
    if (!value) {
      this.sourcePort = null;
    }
  }

  public String getTargetAddress() {
    return this.targetAddress;
  }

  public NetworkPacket setTargetAddress(String targetAddress) {
    this.targetAddress = targetAddress;
    return this;
  }

  public void unsetTargetAddress() {
    this.targetAddress = null;
  }

  /** Returns true if field targetAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetAddress() {
    return this.targetAddress != null;
  }

  public void setTargetAddressIsSet(boolean value) {
    if (!value) {
      this.targetAddress = null;
    }
  }

  public String getTargetPort() {
    return this.targetPort;
  }

  public NetworkPacket setTargetPort(String targetPort) {
    this.targetPort = targetPort;
    return this;
  }

  public void unsetTargetPort() {
    this.targetPort = null;
  }

  /** Returns true if field targetPort is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetPort() {
    return this.targetPort != null;
  }

  public void setTargetPortIsSet(boolean value) {
    if (!value) {
      this.targetPort = null;
    }
  }

  public String getProtocal() {
    return this.protocal;
  }

  public NetworkPacket setProtocal(String protocal) {
    this.protocal = protocal;
    return this;
  }

  public void unsetProtocal() {
    this.protocal = null;
  }

  /** Returns true if field protocal is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocal() {
    return this.protocal != null;
  }

  public void setProtocalIsSet(boolean value) {
    if (!value) {
      this.protocal = null;
    }
  }

  public String getDataHex() {
    return this.dataHex;
  }

  public NetworkPacket setDataHex(String dataHex) {
    this.dataHex = dataHex;
    return this;
  }

  public void unsetDataHex() {
    this.dataHex = null;
  }

  /** Returns true if field dataHex is set (has been assigned a value) and false otherwise */
  public boolean isSetDataHex() {
    return this.dataHex != null;
  }

  public void setDataHexIsSet(boolean value) {
    if (!value) {
      this.dataHex = null;
    }
  }

  public String getDataChar() {
    return this.dataChar;
  }

  public NetworkPacket setDataChar(String dataChar) {
    this.dataChar = dataChar;
    return this;
  }

  public void unsetDataChar() {
    this.dataChar = null;
  }

  /** Returns true if field dataChar is set (has been assigned a value) and false otherwise */
  public boolean isSetDataChar() {
    return this.dataChar != null;
  }

  public void setDataCharIsSet(boolean value) {
    if (!value) {
      this.dataChar = null;
    }
  }

  public String getDataLength() {
    return this.dataLength;
  }

  public NetworkPacket setDataLength(String dataLength) {
    this.dataLength = dataLength;
    return this;
  }

  public void unsetDataLength() {
    this.dataLength = null;
  }

  /** Returns true if field dataLength is set (has been assigned a value) and false otherwise */
  public boolean isSetDataLength() {
    return this.dataLength != null;
  }

  public void setDataLengthIsSet(boolean value) {
    if (!value) {
      this.dataLength = null;
    }
  }

  public String getOperateTime() {
    return this.operateTime;
  }

  public NetworkPacket setOperateTime(String operateTime) {
    this.operateTime = operateTime;
    return this;
  }

  public void unsetOperateTime() {
    this.operateTime = null;
  }

  /** Returns true if field operateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateTime() {
    return this.operateTime != null;
  }

  public void setOperateTimeIsSet(boolean value) {
    if (!value) {
      this.operateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID_NAME:
      if (value == null) {
        unsetPidName();
      } else {
        setPidName((String)value);
      }
      break;

    case SOURCE_ADDRESS:
      if (value == null) {
        unsetSourceAddress();
      } else {
        setSourceAddress((String)value);
      }
      break;

    case SOURCE_PORT:
      if (value == null) {
        unsetSourcePort();
      } else {
        setSourcePort((String)value);
      }
      break;

    case TARGET_ADDRESS:
      if (value == null) {
        unsetTargetAddress();
      } else {
        setTargetAddress((String)value);
      }
      break;

    case TARGET_PORT:
      if (value == null) {
        unsetTargetPort();
      } else {
        setTargetPort((String)value);
      }
      break;

    case PROTOCAL:
      if (value == null) {
        unsetProtocal();
      } else {
        setProtocal((String)value);
      }
      break;

    case DATA_HEX:
      if (value == null) {
        unsetDataHex();
      } else {
        setDataHex((String)value);
      }
      break;

    case DATA_CHAR:
      if (value == null) {
        unsetDataChar();
      } else {
        setDataChar((String)value);
      }
      break;

    case DATA_LENGTH:
      if (value == null) {
        unsetDataLength();
      } else {
        setDataLength((String)value);
      }
      break;

    case OPERATE_TIME:
      if (value == null) {
        unsetOperateTime();
      } else {
        setOperateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID_NAME:
      return getPidName();

    case SOURCE_ADDRESS:
      return getSourceAddress();

    case SOURCE_PORT:
      return getSourcePort();

    case TARGET_ADDRESS:
      return getTargetAddress();

    case TARGET_PORT:
      return getTargetPort();

    case PROTOCAL:
      return getProtocal();

    case DATA_HEX:
      return getDataHex();

    case DATA_CHAR:
      return getDataChar();

    case DATA_LENGTH:
      return getDataLength();

    case OPERATE_TIME:
      return getOperateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID_NAME:
      return isSetPidName();
    case SOURCE_ADDRESS:
      return isSetSourceAddress();
    case SOURCE_PORT:
      return isSetSourcePort();
    case TARGET_ADDRESS:
      return isSetTargetAddress();
    case TARGET_PORT:
      return isSetTargetPort();
    case PROTOCAL:
      return isSetProtocal();
    case DATA_HEX:
      return isSetDataHex();
    case DATA_CHAR:
      return isSetDataChar();
    case DATA_LENGTH:
      return isSetDataLength();
    case OPERATE_TIME:
      return isSetOperateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NetworkPacket)
      return this.equals((NetworkPacket)that);
    return false;
  }

  public boolean equals(NetworkPacket that) {
    if (that == null)
      return false;

    boolean this_present_pidName = true && this.isSetPidName();
    boolean that_present_pidName = true && that.isSetPidName();
    if (this_present_pidName || that_present_pidName) {
      if (!(this_present_pidName && that_present_pidName))
        return false;
      if (!this.pidName.equals(that.pidName))
        return false;
    }

    boolean this_present_sourceAddress = true && this.isSetSourceAddress();
    boolean that_present_sourceAddress = true && that.isSetSourceAddress();
    if (this_present_sourceAddress || that_present_sourceAddress) {
      if (!(this_present_sourceAddress && that_present_sourceAddress))
        return false;
      if (!this.sourceAddress.equals(that.sourceAddress))
        return false;
    }

    boolean this_present_sourcePort = true && this.isSetSourcePort();
    boolean that_present_sourcePort = true && that.isSetSourcePort();
    if (this_present_sourcePort || that_present_sourcePort) {
      if (!(this_present_sourcePort && that_present_sourcePort))
        return false;
      if (!this.sourcePort.equals(that.sourcePort))
        return false;
    }

    boolean this_present_targetAddress = true && this.isSetTargetAddress();
    boolean that_present_targetAddress = true && that.isSetTargetAddress();
    if (this_present_targetAddress || that_present_targetAddress) {
      if (!(this_present_targetAddress && that_present_targetAddress))
        return false;
      if (!this.targetAddress.equals(that.targetAddress))
        return false;
    }

    boolean this_present_targetPort = true && this.isSetTargetPort();
    boolean that_present_targetPort = true && that.isSetTargetPort();
    if (this_present_targetPort || that_present_targetPort) {
      if (!(this_present_targetPort && that_present_targetPort))
        return false;
      if (!this.targetPort.equals(that.targetPort))
        return false;
    }

    boolean this_present_protocal = true && this.isSetProtocal();
    boolean that_present_protocal = true && that.isSetProtocal();
    if (this_present_protocal || that_present_protocal) {
      if (!(this_present_protocal && that_present_protocal))
        return false;
      if (!this.protocal.equals(that.protocal))
        return false;
    }

    boolean this_present_dataHex = true && this.isSetDataHex();
    boolean that_present_dataHex = true && that.isSetDataHex();
    if (this_present_dataHex || that_present_dataHex) {
      if (!(this_present_dataHex && that_present_dataHex))
        return false;
      if (!this.dataHex.equals(that.dataHex))
        return false;
    }

    boolean this_present_dataChar = true && this.isSetDataChar();
    boolean that_present_dataChar = true && that.isSetDataChar();
    if (this_present_dataChar || that_present_dataChar) {
      if (!(this_present_dataChar && that_present_dataChar))
        return false;
      if (!this.dataChar.equals(that.dataChar))
        return false;
    }

    boolean this_present_dataLength = true && this.isSetDataLength();
    boolean that_present_dataLength = true && that.isSetDataLength();
    if (this_present_dataLength || that_present_dataLength) {
      if (!(this_present_dataLength && that_present_dataLength))
        return false;
      if (!this.dataLength.equals(that.dataLength))
        return false;
    }

    boolean this_present_operateTime = true && this.isSetOperateTime();
    boolean that_present_operateTime = true && that.isSetOperateTime();
    if (this_present_operateTime || that_present_operateTime) {
      if (!(this_present_operateTime && that_present_operateTime))
        return false;
      if (!this.operateTime.equals(that.operateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(NetworkPacket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPidName()).compareTo(other.isSetPidName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidName, other.pidName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceAddress()).compareTo(other.isSetSourceAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceAddress, other.sourceAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourcePort()).compareTo(other.isSetSourcePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourcePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourcePort, other.sourcePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetAddress()).compareTo(other.isSetTargetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetAddress, other.targetAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetPort()).compareTo(other.isSetTargetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetPort, other.targetPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocal()).compareTo(other.isSetProtocal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocal, other.protocal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataHex()).compareTo(other.isSetDataHex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataHex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataHex, other.dataHex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataChar()).compareTo(other.isSetDataChar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataChar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataChar, other.dataChar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataLength()).compareTo(other.isSetDataLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLength, other.dataLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateTime()).compareTo(other.isSetOperateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTime, other.operateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NetworkPacket(");
    boolean first = true;

    sb.append("pidName:");
    if (this.pidName == null) {
      sb.append("null");
    } else {
      sb.append(this.pidName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceAddress:");
    if (this.sourceAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourcePort:");
    if (this.sourcePort == null) {
      sb.append("null");
    } else {
      sb.append(this.sourcePort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetAddress:");
    if (this.targetAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.targetAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetPort:");
    if (this.targetPort == null) {
      sb.append("null");
    } else {
      sb.append(this.targetPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocal:");
    if (this.protocal == null) {
      sb.append("null");
    } else {
      sb.append(this.protocal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataHex:");
    if (this.dataHex == null) {
      sb.append("null");
    } else {
      sb.append(this.dataHex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataChar:");
    if (this.dataChar == null) {
      sb.append("null");
    } else {
      sb.append(this.dataChar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataLength:");
    if (this.dataLength == null) {
      sb.append("null");
    } else {
      sb.append(this.dataLength);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateTime:");
    if (this.operateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.operateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NetworkPacketStandardSchemeFactory implements SchemeFactory {
    public NetworkPacketStandardScheme getScheme() {
      return new NetworkPacketStandardScheme();
    }
  }

  private static class NetworkPacketStandardScheme extends StandardScheme<NetworkPacket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NetworkPacket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pidName = iprot.readString();
              struct.setPidNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceAddress = iprot.readString();
              struct.setSourceAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOURCE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourcePort = iprot.readString();
              struct.setSourcePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetAddress = iprot.readString();
              struct.setTargetAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TARGET_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetPort = iprot.readString();
              struct.setTargetPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROTOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocal = iprot.readString();
              struct.setProtocalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_HEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataHex = iprot.readString();
              struct.setDataHexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA_CHAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataChar = iprot.readString();
              struct.setDataCharIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATA_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataLength = iprot.readString();
              struct.setDataLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateTime = iprot.readString();
              struct.setOperateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NetworkPacket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pidName != null) {
        oprot.writeFieldBegin(PID_NAME_FIELD_DESC);
        oprot.writeString(struct.pidName);
        oprot.writeFieldEnd();
      }
      if (struct.sourceAddress != null) {
        oprot.writeFieldBegin(SOURCE_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.sourceAddress);
        oprot.writeFieldEnd();
      }
      if (struct.sourcePort != null) {
        oprot.writeFieldBegin(SOURCE_PORT_FIELD_DESC);
        oprot.writeString(struct.sourcePort);
        oprot.writeFieldEnd();
      }
      if (struct.targetAddress != null) {
        oprot.writeFieldBegin(TARGET_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.targetAddress);
        oprot.writeFieldEnd();
      }
      if (struct.targetPort != null) {
        oprot.writeFieldBegin(TARGET_PORT_FIELD_DESC);
        oprot.writeString(struct.targetPort);
        oprot.writeFieldEnd();
      }
      if (struct.protocal != null) {
        oprot.writeFieldBegin(PROTOCAL_FIELD_DESC);
        oprot.writeString(struct.protocal);
        oprot.writeFieldEnd();
      }
      if (struct.dataHex != null) {
        oprot.writeFieldBegin(DATA_HEX_FIELD_DESC);
        oprot.writeString(struct.dataHex);
        oprot.writeFieldEnd();
      }
      if (struct.dataChar != null) {
        oprot.writeFieldBegin(DATA_CHAR_FIELD_DESC);
        oprot.writeString(struct.dataChar);
        oprot.writeFieldEnd();
      }
      if (struct.dataLength != null) {
        oprot.writeFieldBegin(DATA_LENGTH_FIELD_DESC);
        oprot.writeString(struct.dataLength);
        oprot.writeFieldEnd();
      }
      if (struct.operateTime != null) {
        oprot.writeFieldBegin(OPERATE_TIME_FIELD_DESC);
        oprot.writeString(struct.operateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NetworkPacketTupleSchemeFactory implements SchemeFactory {
    public NetworkPacketTupleScheme getScheme() {
      return new NetworkPacketTupleScheme();
    }
  }

  private static class NetworkPacketTupleScheme extends TupleScheme<NetworkPacket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NetworkPacket struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPidName()) {
        optionals.set(0);
      }
      if (struct.isSetSourceAddress()) {
        optionals.set(1);
      }
      if (struct.isSetSourcePort()) {
        optionals.set(2);
      }
      if (struct.isSetTargetAddress()) {
        optionals.set(3);
      }
      if (struct.isSetTargetPort()) {
        optionals.set(4);
      }
      if (struct.isSetProtocal()) {
        optionals.set(5);
      }
      if (struct.isSetDataHex()) {
        optionals.set(6);
      }
      if (struct.isSetDataChar()) {
        optionals.set(7);
      }
      if (struct.isSetDataLength()) {
        optionals.set(8);
      }
      if (struct.isSetOperateTime()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPidName()) {
        oprot.writeString(struct.pidName);
      }
      if (struct.isSetSourceAddress()) {
        oprot.writeString(struct.sourceAddress);
      }
      if (struct.isSetSourcePort()) {
        oprot.writeString(struct.sourcePort);
      }
      if (struct.isSetTargetAddress()) {
        oprot.writeString(struct.targetAddress);
      }
      if (struct.isSetTargetPort()) {
        oprot.writeString(struct.targetPort);
      }
      if (struct.isSetProtocal()) {
        oprot.writeString(struct.protocal);
      }
      if (struct.isSetDataHex()) {
        oprot.writeString(struct.dataHex);
      }
      if (struct.isSetDataChar()) {
        oprot.writeString(struct.dataChar);
      }
      if (struct.isSetDataLength()) {
        oprot.writeString(struct.dataLength);
      }
      if (struct.isSetOperateTime()) {
        oprot.writeString(struct.operateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NetworkPacket struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pidName = iprot.readString();
        struct.setPidNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceAddress = iprot.readString();
        struct.setSourceAddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sourcePort = iprot.readString();
        struct.setSourcePortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.targetAddress = iprot.readString();
        struct.setTargetAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.targetPort = iprot.readString();
        struct.setTargetPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.protocal = iprot.readString();
        struct.setProtocalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataHex = iprot.readString();
        struct.setDataHexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dataChar = iprot.readString();
        struct.setDataCharIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dataLength = iprot.readString();
        struct.setDataLengthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operateTime = iprot.readString();
        struct.setOperateTimeIsSet(true);
      }
    }
  }

}

