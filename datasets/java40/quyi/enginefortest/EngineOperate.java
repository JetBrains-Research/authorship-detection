/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.engine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EngineOperate {

  /**
   * 定义引擎操作的服务，并指定服务名称
   */
  public interface Iface {

    /**
     * 发送通知给引擎接收待检批次接口
     * 1:missionId 任务批号
     * 2:userApps 应用列表
     * 4:rules  规则数组
     * 5:plots 检测策略
     * 
     * @param missionId
     * @param userApps
     * @param rules
     * @param plots
     */
    public com.nercis.isscp.idl.Result issuedMessage(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<String> rules, List<com.nercis.isscp.idl.PlotsType> plots) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 启动/停用 检测分析引擎接口
     * 1:engine 引擎
     * 2:EngineOperation 操作方式
     * 
     * @param engine
     * @param operate
     */
    public com.nercis.isscp.idl.Result operateEngine(Engine engine, EngineOperation operate) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 检查单个应用在引擎中的进度状态接口
     * 1:missionId 任务批号
     * 2:userAppId 用户应用ID
     * 
     * @param missionId
     * @param userAppId
     */
    public com.nercis.isscp.idl.Sample searchApp(String missionId, String userAppId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 查询指定批次下的所有应用在引擎中的结果
     * 1:missionId 批次号
     * 
     * @param missionId
     */
    public MissionResults searchMission(String missionId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 查询所有引擎的接口
     */
    public List<Engine> searchAllEng() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 查询指定引擎接口
     * 1:engineId 引擎ID
     * 
     * @param engineId
     */
    public Engine searchEng(String engineId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 规则同步接口
     * 
     * @param rules
     */
    public com.nercis.isscp.idl.Result ruleSync(List<com.nercis.isscp.idl.rules.Rules> rules) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void issuedMessage(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<String> rules, List<com.nercis.isscp.idl.PlotsType> plots, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void operateEngine(Engine engine, EngineOperation operate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchApp(String missionId, String userAppId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchMission(String missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchAllEng(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchEng(String engineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ruleSync(List<com.nercis.isscp.idl.rules.Rules> rules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.nercis.isscp.idl.Result issuedMessage(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<String> rules, List<com.nercis.isscp.idl.PlotsType> plots) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_issuedMessage(missionId, userApps, rules, plots);
      return recv_issuedMessage();
    }

    public void send_issuedMessage(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<String> rules, List<com.nercis.isscp.idl.PlotsType> plots) throws org.apache.thrift.TException
    {
      issuedMessage_args args = new issuedMessage_args();
      args.setMissionId(missionId);
      args.setUserApps(userApps);
      args.setRules(rules);
      args.setPlots(plots);
      sendBase("issuedMessage", args);
    }

    public com.nercis.isscp.idl.Result recv_issuedMessage() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      issuedMessage_result result = new issuedMessage_result();
      receiveBase(result, "issuedMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issuedMessage failed: unknown result");
    }

    public com.nercis.isscp.idl.Result operateEngine(Engine engine, EngineOperation operate) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_operateEngine(engine, operate);
      return recv_operateEngine();
    }

    public void send_operateEngine(Engine engine, EngineOperation operate) throws org.apache.thrift.TException
    {
      operateEngine_args args = new operateEngine_args();
      args.setEngine(engine);
      args.setOperate(operate);
      sendBase("operateEngine", args);
    }

    public com.nercis.isscp.idl.Result recv_operateEngine() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      operateEngine_result result = new operateEngine_result();
      receiveBase(result, "operateEngine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "operateEngine failed: unknown result");
    }

    public com.nercis.isscp.idl.Sample searchApp(String missionId, String userAppId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_searchApp(missionId, userAppId);
      return recv_searchApp();
    }

    public void send_searchApp(String missionId, String userAppId) throws org.apache.thrift.TException
    {
      searchApp_args args = new searchApp_args();
      args.setMissionId(missionId);
      args.setUserAppId(userAppId);
      sendBase("searchApp", args);
    }

    public com.nercis.isscp.idl.Sample recv_searchApp() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      searchApp_result result = new searchApp_result();
      receiveBase(result, "searchApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchApp failed: unknown result");
    }

    public MissionResults searchMission(String missionId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_searchMission(missionId);
      return recv_searchMission();
    }

    public void send_searchMission(String missionId) throws org.apache.thrift.TException
    {
      searchMission_args args = new searchMission_args();
      args.setMissionId(missionId);
      sendBase("searchMission", args);
    }

    public MissionResults recv_searchMission() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      searchMission_result result = new searchMission_result();
      receiveBase(result, "searchMission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchMission failed: unknown result");
    }

    public List<Engine> searchAllEng() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_searchAllEng();
      return recv_searchAllEng();
    }

    public void send_searchAllEng() throws org.apache.thrift.TException
    {
      searchAllEng_args args = new searchAllEng_args();
      sendBase("searchAllEng", args);
    }

    public List<Engine> recv_searchAllEng() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      searchAllEng_result result = new searchAllEng_result();
      receiveBase(result, "searchAllEng");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchAllEng failed: unknown result");
    }

    public Engine searchEng(String engineId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_searchEng(engineId);
      return recv_searchEng();
    }

    public void send_searchEng(String engineId) throws org.apache.thrift.TException
    {
      searchEng_args args = new searchEng_args();
      args.setEngineId(engineId);
      sendBase("searchEng", args);
    }

    public Engine recv_searchEng() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      searchEng_result result = new searchEng_result();
      receiveBase(result, "searchEng");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchEng failed: unknown result");
    }

    public com.nercis.isscp.idl.Result ruleSync(List<com.nercis.isscp.idl.rules.Rules> rules) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_ruleSync(rules);
      return recv_ruleSync();
    }

    public void send_ruleSync(List<com.nercis.isscp.idl.rules.Rules> rules) throws org.apache.thrift.TException
    {
      ruleSync_args args = new ruleSync_args();
      args.setRules(rules);
      sendBase("ruleSync", args);
    }

    public com.nercis.isscp.idl.Result recv_ruleSync() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      ruleSync_result result = new ruleSync_result();
      receiveBase(result, "ruleSync");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ruleSync failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void issuedMessage(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<String> rules, List<com.nercis.isscp.idl.PlotsType> plots, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issuedMessage_call method_call = new issuedMessage_call(missionId, userApps, rules, plots, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issuedMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private List<com.nercis.isscp.idl.UserApp> userApps;
      private List<String> rules;
      private List<com.nercis.isscp.idl.PlotsType> plots;
      public issuedMessage_call(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<String> rules, List<com.nercis.isscp.idl.PlotsType> plots, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userApps = userApps;
        this.rules = rules;
        this.plots = plots;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issuedMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issuedMessage_args args = new issuedMessage_args();
        args.setMissionId(missionId);
        args.setUserApps(userApps);
        args.setRules(rules);
        args.setPlots(plots);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issuedMessage();
      }
    }

    public void operateEngine(Engine engine, EngineOperation operate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      operateEngine_call method_call = new operateEngine_call(engine, operate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class operateEngine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Engine engine;
      private EngineOperation operate;
      public operateEngine_call(Engine engine, EngineOperation operate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.engine = engine;
        this.operate = operate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("operateEngine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        operateEngine_args args = new operateEngine_args();
        args.setEngine(engine);
        args.setOperate(operate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_operateEngine();
      }
    }

    public void searchApp(String missionId, String userAppId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchApp_call method_call = new searchApp_call(missionId, userAppId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private String userAppId;
      public searchApp_call(String missionId, String userAppId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userAppId = userAppId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchApp_args args = new searchApp_args();
        args.setMissionId(missionId);
        args.setUserAppId(userAppId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Sample getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchApp();
      }
    }

    public void searchMission(String missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchMission_call method_call = new searchMission_call(missionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchMission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      public searchMission_call(String missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchMission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchMission_args args = new searchMission_args();
        args.setMissionId(missionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MissionResults getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchMission();
      }
    }

    public void searchAllEng(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchAllEng_call method_call = new searchAllEng_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchAllEng_call extends org.apache.thrift.async.TAsyncMethodCall {
      public searchAllEng_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchAllEng", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchAllEng_args args = new searchAllEng_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Engine> getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchAllEng();
      }
    }

    public void searchEng(String engineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchEng_call method_call = new searchEng_call(engineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchEng_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String engineId;
      public searchEng_call(String engineId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.engineId = engineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchEng", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchEng_args args = new searchEng_args();
        args.setEngineId(engineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Engine getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchEng();
      }
    }

    public void ruleSync(List<com.nercis.isscp.idl.rules.Rules> rules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ruleSync_call method_call = new ruleSync_call(rules, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ruleSync_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.nercis.isscp.idl.rules.Rules> rules;
      public ruleSync_call(List<com.nercis.isscp.idl.rules.Rules> rules, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rules = rules;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ruleSync", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ruleSync_args args = new ruleSync_args();
        args.setRules(rules);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ruleSync();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("issuedMessage", new issuedMessage());
      processMap.put("operateEngine", new operateEngine());
      processMap.put("searchApp", new searchApp());
      processMap.put("searchMission", new searchMission());
      processMap.put("searchAllEng", new searchAllEng());
      processMap.put("searchEng", new searchEng());
      processMap.put("ruleSync", new ruleSync());
      return processMap;
    }

    public static class issuedMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issuedMessage_args> {
      public issuedMessage() {
        super("issuedMessage");
      }

      public issuedMessage_args getEmptyArgsInstance() {
        return new issuedMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public issuedMessage_result getResult(I iface, issuedMessage_args args) throws org.apache.thrift.TException {
        issuedMessage_result result = new issuedMessage_result();
        try {
          result.success = iface.issuedMessage(args.missionId, args.userApps, args.rules, args.plots);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class operateEngine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, operateEngine_args> {
      public operateEngine() {
        super("operateEngine");
      }

      public operateEngine_args getEmptyArgsInstance() {
        return new operateEngine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public operateEngine_result getResult(I iface, operateEngine_args args) throws org.apache.thrift.TException {
        operateEngine_result result = new operateEngine_result();
        try {
          result.success = iface.operateEngine(args.engine, args.operate);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class searchApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchApp_args> {
      public searchApp() {
        super("searchApp");
      }

      public searchApp_args getEmptyArgsInstance() {
        return new searchApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchApp_result getResult(I iface, searchApp_args args) throws org.apache.thrift.TException {
        searchApp_result result = new searchApp_result();
        try {
          result.success = iface.searchApp(args.missionId, args.userAppId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class searchMission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchMission_args> {
      public searchMission() {
        super("searchMission");
      }

      public searchMission_args getEmptyArgsInstance() {
        return new searchMission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchMission_result getResult(I iface, searchMission_args args) throws org.apache.thrift.TException {
        searchMission_result result = new searchMission_result();
        try {
          result.success = iface.searchMission(args.missionId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class searchAllEng<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchAllEng_args> {
      public searchAllEng() {
        super("searchAllEng");
      }

      public searchAllEng_args getEmptyArgsInstance() {
        return new searchAllEng_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchAllEng_result getResult(I iface, searchAllEng_args args) throws org.apache.thrift.TException {
        searchAllEng_result result = new searchAllEng_result();
        try {
          result.success = iface.searchAllEng();
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class searchEng<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchEng_args> {
      public searchEng() {
        super("searchEng");
      }

      public searchEng_args getEmptyArgsInstance() {
        return new searchEng_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchEng_result getResult(I iface, searchEng_args args) throws org.apache.thrift.TException {
        searchEng_result result = new searchEng_result();
        try {
          result.success = iface.searchEng(args.engineId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class ruleSync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ruleSync_args> {
      public ruleSync() {
        super("ruleSync");
      }

      public ruleSync_args getEmptyArgsInstance() {
        return new ruleSync_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ruleSync_result getResult(I iface, ruleSync_args args) throws org.apache.thrift.TException {
        ruleSync_result result = new ruleSync_result();
        try {
          result.success = iface.ruleSync(args.rules);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("issuedMessage", new issuedMessage());
      processMap.put("operateEngine", new operateEngine());
      processMap.put("searchApp", new searchApp());
      processMap.put("searchMission", new searchMission());
      processMap.put("searchAllEng", new searchAllEng());
      processMap.put("searchEng", new searchEng());
      processMap.put("ruleSync", new ruleSync());
      return processMap;
    }

    public static class issuedMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issuedMessage_args, com.nercis.isscp.idl.Result> {
      public issuedMessage() {
        super("issuedMessage");
      }

      public issuedMessage_args getEmptyArgsInstance() {
        return new issuedMessage_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            issuedMessage_result result = new issuedMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            issuedMessage_result result = new issuedMessage_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issuedMessage_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.issuedMessage(args.missionId, args.userApps, args.rules, args.plots,resultHandler);
      }
    }

    public static class operateEngine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, operateEngine_args, com.nercis.isscp.idl.Result> {
      public operateEngine() {
        super("operateEngine");
      }

      public operateEngine_args getEmptyArgsInstance() {
        return new operateEngine_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            operateEngine_result result = new operateEngine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            operateEngine_result result = new operateEngine_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, operateEngine_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.operateEngine(args.engine, args.operate,resultHandler);
      }
    }

    public static class searchApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchApp_args, com.nercis.isscp.idl.Sample> {
      public searchApp() {
        super("searchApp");
      }

      public searchApp_args getEmptyArgsInstance() {
        return new searchApp_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Sample> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Sample>() { 
          public void onComplete(com.nercis.isscp.idl.Sample o) {
            searchApp_result result = new searchApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchApp_result result = new searchApp_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchApp_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Sample> resultHandler) throws TException {
        iface.searchApp(args.missionId, args.userAppId,resultHandler);
      }
    }

    public static class searchMission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchMission_args, MissionResults> {
      public searchMission() {
        super("searchMission");
      }

      public searchMission_args getEmptyArgsInstance() {
        return new searchMission_args();
      }

      public AsyncMethodCallback<MissionResults> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MissionResults>() { 
          public void onComplete(MissionResults o) {
            searchMission_result result = new searchMission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchMission_result result = new searchMission_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchMission_args args, org.apache.thrift.async.AsyncMethodCallback<MissionResults> resultHandler) throws TException {
        iface.searchMission(args.missionId,resultHandler);
      }
    }

    public static class searchAllEng<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchAllEng_args, List<Engine>> {
      public searchAllEng() {
        super("searchAllEng");
      }

      public searchAllEng_args getEmptyArgsInstance() {
        return new searchAllEng_args();
      }

      public AsyncMethodCallback<List<Engine>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Engine>>() { 
          public void onComplete(List<Engine> o) {
            searchAllEng_result result = new searchAllEng_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchAllEng_result result = new searchAllEng_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchAllEng_args args, org.apache.thrift.async.AsyncMethodCallback<List<Engine>> resultHandler) throws TException {
        iface.searchAllEng(resultHandler);
      }
    }

    public static class searchEng<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchEng_args, Engine> {
      public searchEng() {
        super("searchEng");
      }

      public searchEng_args getEmptyArgsInstance() {
        return new searchEng_args();
      }

      public AsyncMethodCallback<Engine> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Engine>() { 
          public void onComplete(Engine o) {
            searchEng_result result = new searchEng_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchEng_result result = new searchEng_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchEng_args args, org.apache.thrift.async.AsyncMethodCallback<Engine> resultHandler) throws TException {
        iface.searchEng(args.engineId,resultHandler);
      }
    }

    public static class ruleSync<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ruleSync_args, com.nercis.isscp.idl.Result> {
      public ruleSync() {
        super("ruleSync");
      }

      public ruleSync_args getEmptyArgsInstance() {
        return new ruleSync_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            ruleSync_result result = new ruleSync_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ruleSync_result result = new ruleSync_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ruleSync_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.ruleSync(args.rules,resultHandler);
      }
    }

  }

  public static class issuedMessage_args implements org.apache.thrift.TBase<issuedMessage_args, issuedMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<issuedMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issuedMessage_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APPS_FIELD_DESC = new org.apache.thrift.protocol.TField("userApps", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("rules", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("plots", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issuedMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issuedMessage_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public List<com.nercis.isscp.idl.UserApp> userApps; // required
    public List<String> rules; // required
    public List<com.nercis.isscp.idl.PlotsType> plots; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APPS((short)2, "userApps"),
      RULES((short)3, "rules"),
      PLOTS((short)4, "plots");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APPS
            return USER_APPS;
          case 3: // RULES
            return RULES;
          case 4: // PLOTS
            return PLOTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APPS, new org.apache.thrift.meta_data.FieldMetaData("userApps", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.UserApp.class))));
      tmpMap.put(_Fields.RULES, new org.apache.thrift.meta_data.FieldMetaData("rules", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PLOTS, new org.apache.thrift.meta_data.FieldMetaData("plots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.PlotsType.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issuedMessage_args.class, metaDataMap);
    }

    public issuedMessage_args() {
    }

    public issuedMessage_args(
      String missionId,
      List<com.nercis.isscp.idl.UserApp> userApps,
      List<String> rules,
      List<com.nercis.isscp.idl.PlotsType> plots)
    {
      this();
      this.missionId = missionId;
      this.userApps = userApps;
      this.rules = rules;
      this.plots = plots;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issuedMessage_args(issuedMessage_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserApps()) {
        List<com.nercis.isscp.idl.UserApp> __this__userApps = new ArrayList<com.nercis.isscp.idl.UserApp>(other.userApps.size());
        for (com.nercis.isscp.idl.UserApp other_element : other.userApps) {
          __this__userApps.add(new com.nercis.isscp.idl.UserApp(other_element));
        }
        this.userApps = __this__userApps;
      }
      if (other.isSetRules()) {
        List<String> __this__rules = new ArrayList<String>(other.rules);
        this.rules = __this__rules;
      }
      if (other.isSetPlots()) {
        List<com.nercis.isscp.idl.PlotsType> __this__plots = new ArrayList<com.nercis.isscp.idl.PlotsType>(other.plots.size());
        for (com.nercis.isscp.idl.PlotsType other_element : other.plots) {
          __this__plots.add(other_element);
        }
        this.plots = __this__plots;
      }
    }

    public issuedMessage_args deepCopy() {
      return new issuedMessage_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userApps = null;
      this.rules = null;
      this.plots = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public issuedMessage_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public int getUserAppsSize() {
      return (this.userApps == null) ? 0 : this.userApps.size();
    }

    public java.util.Iterator<com.nercis.isscp.idl.UserApp> getUserAppsIterator() {
      return (this.userApps == null) ? null : this.userApps.iterator();
    }

    public void addToUserApps(com.nercis.isscp.idl.UserApp elem) {
      if (this.userApps == null) {
        this.userApps = new ArrayList<com.nercis.isscp.idl.UserApp>();
      }
      this.userApps.add(elem);
    }

    public List<com.nercis.isscp.idl.UserApp> getUserApps() {
      return this.userApps;
    }

    public issuedMessage_args setUserApps(List<com.nercis.isscp.idl.UserApp> userApps) {
      this.userApps = userApps;
      return this;
    }

    public void unsetUserApps() {
      this.userApps = null;
    }

    /** Returns true if field userApps is set (has been assigned a value) and false otherwise */
    public boolean isSetUserApps() {
      return this.userApps != null;
    }

    public void setUserAppsIsSet(boolean value) {
      if (!value) {
        this.userApps = null;
      }
    }

    public int getRulesSize() {
      return (this.rules == null) ? 0 : this.rules.size();
    }

    public java.util.Iterator<String> getRulesIterator() {
      return (this.rules == null) ? null : this.rules.iterator();
    }

    public void addToRules(String elem) {
      if (this.rules == null) {
        this.rules = new ArrayList<String>();
      }
      this.rules.add(elem);
    }

    public List<String> getRules() {
      return this.rules;
    }

    public issuedMessage_args setRules(List<String> rules) {
      this.rules = rules;
      return this;
    }

    public void unsetRules() {
      this.rules = null;
    }

    /** Returns true if field rules is set (has been assigned a value) and false otherwise */
    public boolean isSetRules() {
      return this.rules != null;
    }

    public void setRulesIsSet(boolean value) {
      if (!value) {
        this.rules = null;
      }
    }

    public int getPlotsSize() {
      return (this.plots == null) ? 0 : this.plots.size();
    }

    public java.util.Iterator<com.nercis.isscp.idl.PlotsType> getPlotsIterator() {
      return (this.plots == null) ? null : this.plots.iterator();
    }

    public void addToPlots(com.nercis.isscp.idl.PlotsType elem) {
      if (this.plots == null) {
        this.plots = new ArrayList<com.nercis.isscp.idl.PlotsType>();
      }
      this.plots.add(elem);
    }

    public List<com.nercis.isscp.idl.PlotsType> getPlots() {
      return this.plots;
    }

    public issuedMessage_args setPlots(List<com.nercis.isscp.idl.PlotsType> plots) {
      this.plots = plots;
      return this;
    }

    public void unsetPlots() {
      this.plots = null;
    }

    /** Returns true if field plots is set (has been assigned a value) and false otherwise */
    public boolean isSetPlots() {
      return this.plots != null;
    }

    public void setPlotsIsSet(boolean value) {
      if (!value) {
        this.plots = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APPS:
        if (value == null) {
          unsetUserApps();
        } else {
          setUserApps((List<com.nercis.isscp.idl.UserApp>)value);
        }
        break;

      case RULES:
        if (value == null) {
          unsetRules();
        } else {
          setRules((List<String>)value);
        }
        break;

      case PLOTS:
        if (value == null) {
          unsetPlots();
        } else {
          setPlots((List<com.nercis.isscp.idl.PlotsType>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APPS:
        return getUserApps();

      case RULES:
        return getRules();

      case PLOTS:
        return getPlots();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APPS:
        return isSetUserApps();
      case RULES:
        return isSetRules();
      case PLOTS:
        return isSetPlots();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issuedMessage_args)
        return this.equals((issuedMessage_args)that);
      return false;
    }

    public boolean equals(issuedMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userApps = true && this.isSetUserApps();
      boolean that_present_userApps = true && that.isSetUserApps();
      if (this_present_userApps || that_present_userApps) {
        if (!(this_present_userApps && that_present_userApps))
          return false;
        if (!this.userApps.equals(that.userApps))
          return false;
      }

      boolean this_present_rules = true && this.isSetRules();
      boolean that_present_rules = true && that.isSetRules();
      if (this_present_rules || that_present_rules) {
        if (!(this_present_rules && that_present_rules))
          return false;
        if (!this.rules.equals(that.rules))
          return false;
      }

      boolean this_present_plots = true && this.isSetPlots();
      boolean that_present_plots = true && that.isSetPlots();
      if (this_present_plots || that_present_plots) {
        if (!(this_present_plots && that_present_plots))
          return false;
        if (!this.plots.equals(that.plots))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issuedMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserApps()).compareTo(other.isSetUserApps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserApps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userApps, other.userApps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRules()).compareTo(other.isSetRules());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRules()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rules, other.rules);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlots()).compareTo(other.isSetPlots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plots, other.plots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issuedMessage_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userApps:");
      if (this.userApps == null) {
        sb.append("null");
      } else {
        sb.append(this.userApps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rules:");
      if (this.rules == null) {
        sb.append("null");
      } else {
        sb.append(this.rules);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("plots:");
      if (this.plots == null) {
        sb.append("null");
      } else {
        sb.append(this.plots);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      if (userApps == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userApps' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issuedMessage_argsStandardSchemeFactory implements SchemeFactory {
      public issuedMessage_argsStandardScheme getScheme() {
        return new issuedMessage_argsStandardScheme();
      }
    }

    private static class issuedMessage_argsStandardScheme extends StandardScheme<issuedMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issuedMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.userApps = new ArrayList<com.nercis.isscp.idl.UserApp>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    com.nercis.isscp.idl.UserApp _elem34;
                    _elem34 = new com.nercis.isscp.idl.UserApp();
                    _elem34.read(iprot);
                    struct.userApps.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setUserAppsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RULES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                  struct.rules = new ArrayList<String>(_list35.size);
                  for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                  {
                    String _elem37;
                    _elem37 = iprot.readString();
                    struct.rules.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setRulesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PLOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                  struct.plots = new ArrayList<com.nercis.isscp.idl.PlotsType>(_list38.size);
                  for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                  {
                    com.nercis.isscp.idl.PlotsType _elem40;
                    _elem40 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
                    struct.plots.add(_elem40);
                  }
                  iprot.readListEnd();
                }
                struct.setPlotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issuedMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userApps != null) {
          oprot.writeFieldBegin(USER_APPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userApps.size()));
            for (com.nercis.isscp.idl.UserApp _iter41 : struct.userApps)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rules != null) {
          oprot.writeFieldBegin(RULES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rules.size()));
            for (String _iter42 : struct.rules)
            {
              oprot.writeString(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.plots != null) {
          oprot.writeFieldBegin(PLOTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.plots.size()));
            for (com.nercis.isscp.idl.PlotsType _iter43 : struct.plots)
            {
              oprot.writeI32(_iter43.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issuedMessage_argsTupleSchemeFactory implements SchemeFactory {
      public issuedMessage_argsTupleScheme getScheme() {
        return new issuedMessage_argsTupleScheme();
      }
    }

    private static class issuedMessage_argsTupleScheme extends TupleScheme<issuedMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issuedMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        {
          oprot.writeI32(struct.userApps.size());
          for (com.nercis.isscp.idl.UserApp _iter44 : struct.userApps)
          {
            _iter44.write(oprot);
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetRules()) {
          optionals.set(0);
        }
        if (struct.isSetPlots()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRules()) {
          {
            oprot.writeI32(struct.rules.size());
            for (String _iter45 : struct.rules)
            {
              oprot.writeString(_iter45);
            }
          }
        }
        if (struct.isSetPlots()) {
          {
            oprot.writeI32(struct.plots.size());
            for (com.nercis.isscp.idl.PlotsType _iter46 : struct.plots)
            {
              oprot.writeI32(_iter46.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issuedMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userApps = new ArrayList<com.nercis.isscp.idl.UserApp>(_list47.size);
          for (int _i48 = 0; _i48 < _list47.size; ++_i48)
          {
            com.nercis.isscp.idl.UserApp _elem49;
            _elem49 = new com.nercis.isscp.idl.UserApp();
            _elem49.read(iprot);
            struct.userApps.add(_elem49);
          }
        }
        struct.setUserAppsIsSet(true);
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.rules = new ArrayList<String>(_list50.size);
            for (int _i51 = 0; _i51 < _list50.size; ++_i51)
            {
              String _elem52;
              _elem52 = iprot.readString();
              struct.rules.add(_elem52);
            }
          }
          struct.setRulesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.plots = new ArrayList<com.nercis.isscp.idl.PlotsType>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              com.nercis.isscp.idl.PlotsType _elem55;
              _elem55 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
              struct.plots.add(_elem55);
            }
          }
          struct.setPlotsIsSet(true);
        }
      }
    }

  }

  public static class issuedMessage_result implements org.apache.thrift.TBase<issuedMessage_result, issuedMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<issuedMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issuedMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new issuedMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new issuedMessage_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issuedMessage_result.class, metaDataMap);
    }

    public issuedMessage_result() {
    }

    public issuedMessage_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issuedMessage_result(issuedMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public issuedMessage_result deepCopy() {
      return new issuedMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public issuedMessage_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public issuedMessage_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public issuedMessage_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issuedMessage_result)
        return this.equals((issuedMessage_result)that);
      return false;
    }

    public boolean equals(issuedMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(issuedMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("issuedMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issuedMessage_resultStandardSchemeFactory implements SchemeFactory {
      public issuedMessage_resultStandardScheme getScheme() {
        return new issuedMessage_resultStandardScheme();
      }
    }

    private static class issuedMessage_resultStandardScheme extends StandardScheme<issuedMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issuedMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issuedMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issuedMessage_resultTupleSchemeFactory implements SchemeFactory {
      public issuedMessage_resultTupleScheme getScheme() {
        return new issuedMessage_resultTupleScheme();
      }
    }

    private static class issuedMessage_resultTupleScheme extends TupleScheme<issuedMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issuedMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issuedMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class operateEngine_args implements org.apache.thrift.TBase<operateEngine_args, operateEngine_args._Fields>, java.io.Serializable, Cloneable, Comparable<operateEngine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateEngine_args");

    private static final org.apache.thrift.protocol.TField ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("engine", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("operate", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new operateEngine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new operateEngine_argsTupleSchemeFactory());
    }

    public Engine engine; // required
    /**
     * 
     * @see EngineOperation
     */
    public EngineOperation operate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENGINE((short)1, "engine"),
      /**
       * 
       * @see EngineOperation
       */
      OPERATE((short)2, "operate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENGINE
            return ENGINE;
          case 2: // OPERATE
            return OPERATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENGINE, new org.apache.thrift.meta_data.FieldMetaData("engine", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Engine.class)));
      tmpMap.put(_Fields.OPERATE, new org.apache.thrift.meta_data.FieldMetaData("operate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EngineOperation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateEngine_args.class, metaDataMap);
    }

    public operateEngine_args() {
    }

    public operateEngine_args(
      Engine engine,
      EngineOperation operate)
    {
      this();
      this.engine = engine;
      this.operate = operate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operateEngine_args(operateEngine_args other) {
      if (other.isSetEngine()) {
        this.engine = new Engine(other.engine);
      }
      if (other.isSetOperate()) {
        this.operate = other.operate;
      }
    }

    public operateEngine_args deepCopy() {
      return new operateEngine_args(this);
    }

    @Override
    public void clear() {
      this.engine = null;
      this.operate = null;
    }

    public Engine getEngine() {
      return this.engine;
    }

    public operateEngine_args setEngine(Engine engine) {
      this.engine = engine;
      return this;
    }

    public void unsetEngine() {
      this.engine = null;
    }

    /** Returns true if field engine is set (has been assigned a value) and false otherwise */
    public boolean isSetEngine() {
      return this.engine != null;
    }

    public void setEngineIsSet(boolean value) {
      if (!value) {
        this.engine = null;
      }
    }

    /**
     * 
     * @see EngineOperation
     */
    public EngineOperation getOperate() {
      return this.operate;
    }

    /**
     * 
     * @see EngineOperation
     */
    public operateEngine_args setOperate(EngineOperation operate) {
      this.operate = operate;
      return this;
    }

    public void unsetOperate() {
      this.operate = null;
    }

    /** Returns true if field operate is set (has been assigned a value) and false otherwise */
    public boolean isSetOperate() {
      return this.operate != null;
    }

    public void setOperateIsSet(boolean value) {
      if (!value) {
        this.operate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENGINE:
        if (value == null) {
          unsetEngine();
        } else {
          setEngine((Engine)value);
        }
        break;

      case OPERATE:
        if (value == null) {
          unsetOperate();
        } else {
          setOperate((EngineOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENGINE:
        return getEngine();

      case OPERATE:
        return getOperate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENGINE:
        return isSetEngine();
      case OPERATE:
        return isSetOperate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof operateEngine_args)
        return this.equals((operateEngine_args)that);
      return false;
    }

    public boolean equals(operateEngine_args that) {
      if (that == null)
        return false;

      boolean this_present_engine = true && this.isSetEngine();
      boolean that_present_engine = true && that.isSetEngine();
      if (this_present_engine || that_present_engine) {
        if (!(this_present_engine && that_present_engine))
          return false;
        if (!this.engine.equals(that.engine))
          return false;
      }

      boolean this_present_operate = true && this.isSetOperate();
      boolean that_present_operate = true && that.isSetOperate();
      if (this_present_operate || that_present_operate) {
        if (!(this_present_operate && that_present_operate))
          return false;
        if (!this.operate.equals(that.operate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(operateEngine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEngine()).compareTo(other.isSetEngine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEngine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engine, other.engine);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperate()).compareTo(other.isSetOperate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operate, other.operate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operateEngine_args(");
      boolean first = true;

      sb.append("engine:");
      if (this.engine == null) {
        sb.append("null");
      } else {
        sb.append(this.engine);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operate:");
      if (this.operate == null) {
        sb.append("null");
      } else {
        sb.append(this.operate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (engine == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'engine' was not present! Struct: " + toString());
      }
      if (operate == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operate' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (engine != null) {
        engine.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operateEngine_argsStandardSchemeFactory implements SchemeFactory {
      public operateEngine_argsStandardScheme getScheme() {
        return new operateEngine_argsStandardScheme();
      }
    }

    private static class operateEngine_argsStandardScheme extends StandardScheme<operateEngine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operateEngine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENGINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.engine = new Engine();
                struct.engine.read(iprot);
                struct.setEngineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.operate = EngineOperation.findByValue(iprot.readI32());
                struct.setOperateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operateEngine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.engine != null) {
          oprot.writeFieldBegin(ENGINE_FIELD_DESC);
          struct.engine.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.operate != null) {
          oprot.writeFieldBegin(OPERATE_FIELD_DESC);
          oprot.writeI32(struct.operate.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operateEngine_argsTupleSchemeFactory implements SchemeFactory {
      public operateEngine_argsTupleScheme getScheme() {
        return new operateEngine_argsTupleScheme();
      }
    }

    private static class operateEngine_argsTupleScheme extends TupleScheme<operateEngine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operateEngine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.engine.write(oprot);
        oprot.writeI32(struct.operate.getValue());
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operateEngine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.engine = new Engine();
        struct.engine.read(iprot);
        struct.setEngineIsSet(true);
        struct.operate = EngineOperation.findByValue(iprot.readI32());
        struct.setOperateIsSet(true);
      }
    }

  }

  public static class operateEngine_result implements org.apache.thrift.TBase<operateEngine_result, operateEngine_result._Fields>, java.io.Serializable, Cloneable, Comparable<operateEngine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateEngine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new operateEngine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new operateEngine_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateEngine_result.class, metaDataMap);
    }

    public operateEngine_result() {
    }

    public operateEngine_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operateEngine_result(operateEngine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public operateEngine_result deepCopy() {
      return new operateEngine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public operateEngine_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public operateEngine_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public operateEngine_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof operateEngine_result)
        return this.equals((operateEngine_result)that);
      return false;
    }

    public boolean equals(operateEngine_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(operateEngine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operateEngine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operateEngine_resultStandardSchemeFactory implements SchemeFactory {
      public operateEngine_resultStandardScheme getScheme() {
        return new operateEngine_resultStandardScheme();
      }
    }

    private static class operateEngine_resultStandardScheme extends StandardScheme<operateEngine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operateEngine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operateEngine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operateEngine_resultTupleSchemeFactory implements SchemeFactory {
      public operateEngine_resultTupleScheme getScheme() {
        return new operateEngine_resultTupleScheme();
      }
    }

    private static class operateEngine_resultTupleScheme extends TupleScheme<operateEngine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operateEngine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operateEngine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class searchApp_args implements org.apache.thrift.TBase<searchApp_args, searchApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchApp_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userAppId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchApp_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public String userAppId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APP_ID((short)2, "userAppId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APP_ID
            return USER_APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("userAppId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchApp_args.class, metaDataMap);
    }

    public searchApp_args() {
    }

    public searchApp_args(
      String missionId,
      String userAppId)
    {
      this();
      this.missionId = missionId;
      this.userAppId = userAppId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchApp_args(searchApp_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserAppId()) {
        this.userAppId = other.userAppId;
      }
    }

    public searchApp_args deepCopy() {
      return new searchApp_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userAppId = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public searchApp_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public String getUserAppId() {
      return this.userAppId;
    }

    public searchApp_args setUserAppId(String userAppId) {
      this.userAppId = userAppId;
      return this;
    }

    public void unsetUserAppId() {
      this.userAppId = null;
    }

    /** Returns true if field userAppId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAppId() {
      return this.userAppId != null;
    }

    public void setUserAppIdIsSet(boolean value) {
      if (!value) {
        this.userAppId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APP_ID:
        if (value == null) {
          unsetUserAppId();
        } else {
          setUserAppId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APP_ID:
        return getUserAppId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APP_ID:
        return isSetUserAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchApp_args)
        return this.equals((searchApp_args)that);
      return false;
    }

    public boolean equals(searchApp_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userAppId = true && this.isSetUserAppId();
      boolean that_present_userAppId = true && that.isSetUserAppId();
      if (this_present_userAppId || that_present_userAppId) {
        if (!(this_present_userAppId && that_present_userAppId))
          return false;
        if (!this.userAppId.equals(that.userAppId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAppId()).compareTo(other.isSetUserAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAppId, other.userAppId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchApp_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAppId:");
      if (this.userAppId == null) {
        sb.append("null");
      } else {
        sb.append(this.userAppId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      if (userAppId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userAppId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchApp_argsStandardSchemeFactory implements SchemeFactory {
      public searchApp_argsStandardScheme getScheme() {
        return new searchApp_argsStandardScheme();
      }
    }

    private static class searchApp_argsStandardScheme extends StandardScheme<searchApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAppId = iprot.readString();
                struct.setUserAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userAppId != null) {
          oprot.writeFieldBegin(USER_APP_ID_FIELD_DESC);
          oprot.writeString(struct.userAppId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchApp_argsTupleSchemeFactory implements SchemeFactory {
      public searchApp_argsTupleScheme getScheme() {
        return new searchApp_argsTupleScheme();
      }
    }

    private static class searchApp_argsTupleScheme extends TupleScheme<searchApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        oprot.writeString(struct.userAppId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        struct.userAppId = iprot.readString();
        struct.setUserAppIdIsSet(true);
      }
    }

  }

  public static class searchApp_result implements org.apache.thrift.TBase<searchApp_result, searchApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchApp_resultTupleSchemeFactory());
    }

    public com.nercis.isscp.idl.Sample success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.Sample.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchApp_result.class, metaDataMap);
    }

    public searchApp_result() {
    }

    public searchApp_result(
      com.nercis.isscp.idl.Sample success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchApp_result(searchApp_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.nercis.isscp.idl.Sample(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public searchApp_result deepCopy() {
      return new searchApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public com.nercis.isscp.idl.Sample getSuccess() {
      return this.success;
    }

    public searchApp_result setSuccess(com.nercis.isscp.idl.Sample success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchApp_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public searchApp_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Sample)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchApp_result)
        return this.equals((searchApp_result)that);
      return false;
    }

    public boolean equals(searchApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchApp_resultStandardSchemeFactory implements SchemeFactory {
      public searchApp_resultStandardScheme getScheme() {
        return new searchApp_resultStandardScheme();
      }
    }

    private static class searchApp_resultStandardScheme extends StandardScheme<searchApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.nercis.isscp.idl.Sample();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchApp_resultTupleSchemeFactory implements SchemeFactory {
      public searchApp_resultTupleScheme getScheme() {
        return new searchApp_resultTupleScheme();
      }
    }

    private static class searchApp_resultTupleScheme extends TupleScheme<searchApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new com.nercis.isscp.idl.Sample();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class searchMission_args implements org.apache.thrift.TBase<searchMission_args, searchMission_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchMission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchMission_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchMission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchMission_argsTupleSchemeFactory());
    }

    public String missionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchMission_args.class, metaDataMap);
    }

    public searchMission_args() {
    }

    public searchMission_args(
      String missionId)
    {
      this();
      this.missionId = missionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchMission_args(searchMission_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
    }

    public searchMission_args deepCopy() {
      return new searchMission_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public searchMission_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchMission_args)
        return this.equals((searchMission_args)that);
      return false;
    }

    public boolean equals(searchMission_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchMission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchMission_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchMission_argsStandardSchemeFactory implements SchemeFactory {
      public searchMission_argsStandardScheme getScheme() {
        return new searchMission_argsStandardScheme();
      }
    }

    private static class searchMission_argsStandardScheme extends StandardScheme<searchMission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchMission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchMission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchMission_argsTupleSchemeFactory implements SchemeFactory {
      public searchMission_argsTupleScheme getScheme() {
        return new searchMission_argsTupleScheme();
      }
    }

    private static class searchMission_argsTupleScheme extends TupleScheme<searchMission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchMission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchMission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
      }
    }

  }

  public static class searchMission_result implements org.apache.thrift.TBase<searchMission_result, searchMission_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchMission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchMission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchMission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchMission_resultTupleSchemeFactory());
    }

    public MissionResults success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissionResults.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchMission_result.class, metaDataMap);
    }

    public searchMission_result() {
    }

    public searchMission_result(
      MissionResults success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchMission_result(searchMission_result other) {
      if (other.isSetSuccess()) {
        this.success = new MissionResults(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public searchMission_result deepCopy() {
      return new searchMission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public MissionResults getSuccess() {
      return this.success;
    }

    public searchMission_result setSuccess(MissionResults success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchMission_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public searchMission_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MissionResults)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchMission_result)
        return this.equals((searchMission_result)that);
      return false;
    }

    public boolean equals(searchMission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchMission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchMission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchMission_resultStandardSchemeFactory implements SchemeFactory {
      public searchMission_resultStandardScheme getScheme() {
        return new searchMission_resultStandardScheme();
      }
    }

    private static class searchMission_resultStandardScheme extends StandardScheme<searchMission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchMission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MissionResults();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchMission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchMission_resultTupleSchemeFactory implements SchemeFactory {
      public searchMission_resultTupleScheme getScheme() {
        return new searchMission_resultTupleScheme();
      }
    }

    private static class searchMission_resultTupleScheme extends TupleScheme<searchMission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchMission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchMission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new MissionResults();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class searchAllEng_args implements org.apache.thrift.TBase<searchAllEng_args, searchAllEng_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchAllEng_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAllEng_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchAllEng_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchAllEng_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAllEng_args.class, metaDataMap);
    }

    public searchAllEng_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAllEng_args(searchAllEng_args other) {
    }

    public searchAllEng_args deepCopy() {
      return new searchAllEng_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAllEng_args)
        return this.equals((searchAllEng_args)that);
      return false;
    }

    public boolean equals(searchAllEng_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchAllEng_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAllEng_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchAllEng_argsStandardSchemeFactory implements SchemeFactory {
      public searchAllEng_argsStandardScheme getScheme() {
        return new searchAllEng_argsStandardScheme();
      }
    }

    private static class searchAllEng_argsStandardScheme extends StandardScheme<searchAllEng_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchAllEng_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchAllEng_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchAllEng_argsTupleSchemeFactory implements SchemeFactory {
      public searchAllEng_argsTupleScheme getScheme() {
        return new searchAllEng_argsTupleScheme();
      }
    }

    private static class searchAllEng_argsTupleScheme extends TupleScheme<searchAllEng_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchAllEng_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchAllEng_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class searchAllEng_result implements org.apache.thrift.TBase<searchAllEng_result, searchAllEng_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchAllEng_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchAllEng_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchAllEng_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchAllEng_resultTupleSchemeFactory());
    }

    public List<Engine> success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Engine.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchAllEng_result.class, metaDataMap);
    }

    public searchAllEng_result() {
    }

    public searchAllEng_result(
      List<Engine> success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchAllEng_result(searchAllEng_result other) {
      if (other.isSetSuccess()) {
        List<Engine> __this__success = new ArrayList<Engine>(other.success.size());
        for (Engine other_element : other.success) {
          __this__success.add(new Engine(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public searchAllEng_result deepCopy() {
      return new searchAllEng_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Engine> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Engine elem) {
      if (this.success == null) {
        this.success = new ArrayList<Engine>();
      }
      this.success.add(elem);
    }

    public List<Engine> getSuccess() {
      return this.success;
    }

    public searchAllEng_result setSuccess(List<Engine> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchAllEng_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public searchAllEng_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Engine>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchAllEng_result)
        return this.equals((searchAllEng_result)that);
      return false;
    }

    public boolean equals(searchAllEng_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchAllEng_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchAllEng_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchAllEng_resultStandardSchemeFactory implements SchemeFactory {
      public searchAllEng_resultStandardScheme getScheme() {
        return new searchAllEng_resultStandardScheme();
      }
    }

    private static class searchAllEng_resultStandardScheme extends StandardScheme<searchAllEng_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchAllEng_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Engine>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    Engine _elem58;
                    _elem58 = new Engine();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchAllEng_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Engine _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchAllEng_resultTupleSchemeFactory implements SchemeFactory {
      public searchAllEng_resultTupleScheme getScheme() {
        return new searchAllEng_resultTupleScheme();
      }
    }

    private static class searchAllEng_resultTupleScheme extends TupleScheme<searchAllEng_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchAllEng_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Engine _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchAllEng_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Engine>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              Engine _elem63;
              _elem63 = new Engine();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class searchEng_args implements org.apache.thrift.TBase<searchEng_args, searchEng_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchEng_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchEng_args");

    private static final org.apache.thrift.protocol.TField ENGINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("engineId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchEng_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchEng_argsTupleSchemeFactory());
    }

    public String engineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENGINE_ID((short)1, "engineId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENGINE_ID
            return ENGINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENGINE_ID, new org.apache.thrift.meta_data.FieldMetaData("engineId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchEng_args.class, metaDataMap);
    }

    public searchEng_args() {
    }

    public searchEng_args(
      String engineId)
    {
      this();
      this.engineId = engineId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchEng_args(searchEng_args other) {
      if (other.isSetEngineId()) {
        this.engineId = other.engineId;
      }
    }

    public searchEng_args deepCopy() {
      return new searchEng_args(this);
    }

    @Override
    public void clear() {
      this.engineId = null;
    }

    public String getEngineId() {
      return this.engineId;
    }

    public searchEng_args setEngineId(String engineId) {
      this.engineId = engineId;
      return this;
    }

    public void unsetEngineId() {
      this.engineId = null;
    }

    /** Returns true if field engineId is set (has been assigned a value) and false otherwise */
    public boolean isSetEngineId() {
      return this.engineId != null;
    }

    public void setEngineIdIsSet(boolean value) {
      if (!value) {
        this.engineId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENGINE_ID:
        if (value == null) {
          unsetEngineId();
        } else {
          setEngineId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENGINE_ID:
        return getEngineId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENGINE_ID:
        return isSetEngineId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchEng_args)
        return this.equals((searchEng_args)that);
      return false;
    }

    public boolean equals(searchEng_args that) {
      if (that == null)
        return false;

      boolean this_present_engineId = true && this.isSetEngineId();
      boolean that_present_engineId = true && that.isSetEngineId();
      if (this_present_engineId || that_present_engineId) {
        if (!(this_present_engineId && that_present_engineId))
          return false;
        if (!this.engineId.equals(that.engineId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchEng_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEngineId()).compareTo(other.isSetEngineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEngineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineId, other.engineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchEng_args(");
      boolean first = true;

      sb.append("engineId:");
      if (this.engineId == null) {
        sb.append("null");
      } else {
        sb.append(this.engineId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (engineId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'engineId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchEng_argsStandardSchemeFactory implements SchemeFactory {
      public searchEng_argsStandardScheme getScheme() {
        return new searchEng_argsStandardScheme();
      }
    }

    private static class searchEng_argsStandardScheme extends StandardScheme<searchEng_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchEng_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENGINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.engineId = iprot.readString();
                struct.setEngineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchEng_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.engineId != null) {
          oprot.writeFieldBegin(ENGINE_ID_FIELD_DESC);
          oprot.writeString(struct.engineId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchEng_argsTupleSchemeFactory implements SchemeFactory {
      public searchEng_argsTupleScheme getScheme() {
        return new searchEng_argsTupleScheme();
      }
    }

    private static class searchEng_argsTupleScheme extends TupleScheme<searchEng_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchEng_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.engineId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchEng_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.engineId = iprot.readString();
        struct.setEngineIdIsSet(true);
      }
    }

  }

  public static class searchEng_result implements org.apache.thrift.TBase<searchEng_result, searchEng_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchEng_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchEng_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchEng_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchEng_resultTupleSchemeFactory());
    }

    public Engine success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Engine.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchEng_result.class, metaDataMap);
    }

    public searchEng_result() {
    }

    public searchEng_result(
      Engine success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchEng_result(searchEng_result other) {
      if (other.isSetSuccess()) {
        this.success = new Engine(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public searchEng_result deepCopy() {
      return new searchEng_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public Engine getSuccess() {
      return this.success;
    }

    public searchEng_result setSuccess(Engine success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public searchEng_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public searchEng_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Engine)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchEng_result)
        return this.equals((searchEng_result)that);
      return false;
    }

    public boolean equals(searchEng_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(searchEng_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchEng_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchEng_resultStandardSchemeFactory implements SchemeFactory {
      public searchEng_resultStandardScheme getScheme() {
        return new searchEng_resultStandardScheme();
      }
    }

    private static class searchEng_resultStandardScheme extends StandardScheme<searchEng_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchEng_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Engine();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchEng_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchEng_resultTupleSchemeFactory implements SchemeFactory {
      public searchEng_resultTupleScheme getScheme() {
        return new searchEng_resultTupleScheme();
      }
    }

    private static class searchEng_resultTupleScheme extends TupleScheme<searchEng_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchEng_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchEng_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new Engine();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class ruleSync_args implements org.apache.thrift.TBase<ruleSync_args, ruleSync_args._Fields>, java.io.Serializable, Cloneable, Comparable<ruleSync_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ruleSync_args");

    private static final org.apache.thrift.protocol.TField RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("rules", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ruleSync_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ruleSync_argsTupleSchemeFactory());
    }

    public List<com.nercis.isscp.idl.rules.Rules> rules; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULES((short)1, "rules");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULES
            return RULES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULES, new org.apache.thrift.meta_data.FieldMetaData("rules", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.rules.Rules.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ruleSync_args.class, metaDataMap);
    }

    public ruleSync_args() {
    }

    public ruleSync_args(
      List<com.nercis.isscp.idl.rules.Rules> rules)
    {
      this();
      this.rules = rules;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ruleSync_args(ruleSync_args other) {
      if (other.isSetRules()) {
        List<com.nercis.isscp.idl.rules.Rules> __this__rules = new ArrayList<com.nercis.isscp.idl.rules.Rules>(other.rules.size());
        for (com.nercis.isscp.idl.rules.Rules other_element : other.rules) {
          __this__rules.add(new com.nercis.isscp.idl.rules.Rules(other_element));
        }
        this.rules = __this__rules;
      }
    }

    public ruleSync_args deepCopy() {
      return new ruleSync_args(this);
    }

    @Override
    public void clear() {
      this.rules = null;
    }

    public int getRulesSize() {
      return (this.rules == null) ? 0 : this.rules.size();
    }

    public java.util.Iterator<com.nercis.isscp.idl.rules.Rules> getRulesIterator() {
      return (this.rules == null) ? null : this.rules.iterator();
    }

    public void addToRules(com.nercis.isscp.idl.rules.Rules elem) {
      if (this.rules == null) {
        this.rules = new ArrayList<com.nercis.isscp.idl.rules.Rules>();
      }
      this.rules.add(elem);
    }

    public List<com.nercis.isscp.idl.rules.Rules> getRules() {
      return this.rules;
    }

    public ruleSync_args setRules(List<com.nercis.isscp.idl.rules.Rules> rules) {
      this.rules = rules;
      return this;
    }

    public void unsetRules() {
      this.rules = null;
    }

    /** Returns true if field rules is set (has been assigned a value) and false otherwise */
    public boolean isSetRules() {
      return this.rules != null;
    }

    public void setRulesIsSet(boolean value) {
      if (!value) {
        this.rules = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULES:
        if (value == null) {
          unsetRules();
        } else {
          setRules((List<com.nercis.isscp.idl.rules.Rules>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULES:
        return getRules();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULES:
        return isSetRules();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ruleSync_args)
        return this.equals((ruleSync_args)that);
      return false;
    }

    public boolean equals(ruleSync_args that) {
      if (that == null)
        return false;

      boolean this_present_rules = true && this.isSetRules();
      boolean that_present_rules = true && that.isSetRules();
      if (this_present_rules || that_present_rules) {
        if (!(this_present_rules && that_present_rules))
          return false;
        if (!this.rules.equals(that.rules))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ruleSync_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRules()).compareTo(other.isSetRules());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRules()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rules, other.rules);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ruleSync_args(");
      boolean first = true;

      sb.append("rules:");
      if (this.rules == null) {
        sb.append("null");
      } else {
        sb.append(this.rules);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (rules == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rules' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ruleSync_argsStandardSchemeFactory implements SchemeFactory {
      public ruleSync_argsStandardScheme getScheme() {
        return new ruleSync_argsStandardScheme();
      }
    }

    private static class ruleSync_argsStandardScheme extends StandardScheme<ruleSync_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ruleSync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RULES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.rules = new ArrayList<com.nercis.isscp.idl.rules.Rules>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    com.nercis.isscp.idl.rules.Rules _elem66;
                    _elem66 = new com.nercis.isscp.idl.rules.Rules();
                    _elem66.read(iprot);
                    struct.rules.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setRulesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ruleSync_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rules != null) {
          oprot.writeFieldBegin(RULES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rules.size()));
            for (com.nercis.isscp.idl.rules.Rules _iter67 : struct.rules)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ruleSync_argsTupleSchemeFactory implements SchemeFactory {
      public ruleSync_argsTupleScheme getScheme() {
        return new ruleSync_argsTupleScheme();
      }
    }

    private static class ruleSync_argsTupleScheme extends TupleScheme<ruleSync_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ruleSync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        {
          oprot.writeI32(struct.rules.size());
          for (com.nercis.isscp.idl.rules.Rules _iter68 : struct.rules)
          {
            _iter68.write(oprot);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ruleSync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rules = new ArrayList<com.nercis.isscp.idl.rules.Rules>(_list69.size);
          for (int _i70 = 0; _i70 < _list69.size; ++_i70)
          {
            com.nercis.isscp.idl.rules.Rules _elem71;
            _elem71 = new com.nercis.isscp.idl.rules.Rules();
            _elem71.read(iprot);
            struct.rules.add(_elem71);
          }
        }
        struct.setRulesIsSet(true);
      }
    }

  }

  public static class ruleSync_result implements org.apache.thrift.TBase<ruleSync_result, ruleSync_result._Fields>, java.io.Serializable, Cloneable, Comparable<ruleSync_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ruleSync_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ruleSync_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ruleSync_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ruleSync_result.class, metaDataMap);
    }

    public ruleSync_result() {
    }

    public ruleSync_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ruleSync_result(ruleSync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public ruleSync_result deepCopy() {
      return new ruleSync_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public ruleSync_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public ruleSync_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public ruleSync_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ruleSync_result)
        return this.equals((ruleSync_result)that);
      return false;
    }

    public boolean equals(ruleSync_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ruleSync_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ruleSync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ruleSync_resultStandardSchemeFactory implements SchemeFactory {
      public ruleSync_resultStandardScheme getScheme() {
        return new ruleSync_resultStandardScheme();
      }
    }

    private static class ruleSync_resultStandardScheme extends StandardScheme<ruleSync_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ruleSync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ruleSync_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ruleSync_resultTupleSchemeFactory implements SchemeFactory {
      public ruleSync_resultTupleScheme getScheme() {
        return new ruleSync_resultTupleScheme();
      }
    }

    private static class ruleSync_resultTupleScheme extends TupleScheme<ruleSync_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ruleSync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ruleSync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

}
