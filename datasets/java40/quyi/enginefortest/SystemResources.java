/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义动态检测 系统资源占用记录
 * 1:string processName 进程名称
 * 2:string threadName 线程名称
 * 3:string checkTime 检测记录的时间
 * 4:i32 cpu Cpu占百分比
 * 5:i32 rss 实际耗用内存(Kb)
 * 6:i32 vss 虚拟耗用内存(Kb)
 */
public class SystemResources implements org.apache.thrift.TBase<SystemResources, SystemResources._Fields>, java.io.Serializable, Cloneable, Comparable<SystemResources> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemResources");

  private static final org.apache.thrift.protocol.TField PROCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("processName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField THREAD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("threadName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RSS_FIELD_DESC = new org.apache.thrift.protocol.TField("rss", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VSS_FIELD_DESC = new org.apache.thrift.protocol.TField("vss", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SystemResourcesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SystemResourcesTupleSchemeFactory());
  }

  public String processName; // required
  public String threadName; // required
  public String checkTime; // required
  public int cpu; // required
  public int rss; // required
  public int vss; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROCESS_NAME((short)1, "processName"),
    THREAD_NAME((short)2, "threadName"),
    CHECK_TIME((short)3, "checkTime"),
    CPU((short)4, "cpu"),
    RSS((short)5, "rss"),
    VSS((short)6, "vss");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROCESS_NAME
          return PROCESS_NAME;
        case 2: // THREAD_NAME
          return THREAD_NAME;
        case 3: // CHECK_TIME
          return CHECK_TIME;
        case 4: // CPU
          return CPU;
        case 5: // RSS
          return RSS;
        case 6: // VSS
          return VSS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_ISSET_ID = 0;
  private static final int __RSS_ISSET_ID = 1;
  private static final int __VSS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("processName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREAD_NAME, new org.apache.thrift.meta_data.FieldMetaData("threadName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU, new org.apache.thrift.meta_data.FieldMetaData("cpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RSS, new org.apache.thrift.meta_data.FieldMetaData("rss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VSS, new org.apache.thrift.meta_data.FieldMetaData("vss", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemResources.class, metaDataMap);
  }

  public SystemResources() {
  }

  public SystemResources(
    String processName,
    String threadName,
    String checkTime,
    int cpu,
    int rss,
    int vss)
  {
    this();
    this.processName = processName;
    this.threadName = threadName;
    this.checkTime = checkTime;
    this.cpu = cpu;
    setCpuIsSet(true);
    this.rss = rss;
    setRssIsSet(true);
    this.vss = vss;
    setVssIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemResources(SystemResources other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProcessName()) {
      this.processName = other.processName;
    }
    if (other.isSetThreadName()) {
      this.threadName = other.threadName;
    }
    if (other.isSetCheckTime()) {
      this.checkTime = other.checkTime;
    }
    this.cpu = other.cpu;
    this.rss = other.rss;
    this.vss = other.vss;
  }

  public SystemResources deepCopy() {
    return new SystemResources(this);
  }

  @Override
  public void clear() {
    this.processName = null;
    this.threadName = null;
    this.checkTime = null;
    setCpuIsSet(false);
    this.cpu = 0;
    setRssIsSet(false);
    this.rss = 0;
    setVssIsSet(false);
    this.vss = 0;
  }

  public String getProcessName() {
    return this.processName;
  }

  public SystemResources setProcessName(String processName) {
    this.processName = processName;
    return this;
  }

  public void unsetProcessName() {
    this.processName = null;
  }

  /** Returns true if field processName is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessName() {
    return this.processName != null;
  }

  public void setProcessNameIsSet(boolean value) {
    if (!value) {
      this.processName = null;
    }
  }

  public String getThreadName() {
    return this.threadName;
  }

  public SystemResources setThreadName(String threadName) {
    this.threadName = threadName;
    return this;
  }

  public void unsetThreadName() {
    this.threadName = null;
  }

  /** Returns true if field threadName is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadName() {
    return this.threadName != null;
  }

  public void setThreadNameIsSet(boolean value) {
    if (!value) {
      this.threadName = null;
    }
  }

  public String getCheckTime() {
    return this.checkTime;
  }

  public SystemResources setCheckTime(String checkTime) {
    this.checkTime = checkTime;
    return this;
  }

  public void unsetCheckTime() {
    this.checkTime = null;
  }

  /** Returns true if field checkTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckTime() {
    return this.checkTime != null;
  }

  public void setCheckTimeIsSet(boolean value) {
    if (!value) {
      this.checkTime = null;
    }
  }

  public int getCpu() {
    return this.cpu;
  }

  public SystemResources setCpu(int cpu) {
    this.cpu = cpu;
    setCpuIsSet(true);
    return this;
  }

  public void unsetCpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  /** Returns true if field cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu() {
    return EncodingUtils.testBit(__isset_bitfield, __CPU_ISSET_ID);
  }

  public void setCpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPU_ISSET_ID, value);
  }

  public int getRss() {
    return this.rss;
  }

  public SystemResources setRss(int rss) {
    this.rss = rss;
    setRssIsSet(true);
    return this;
  }

  public void unsetRss() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RSS_ISSET_ID);
  }

  /** Returns true if field rss is set (has been assigned a value) and false otherwise */
  public boolean isSetRss() {
    return EncodingUtils.testBit(__isset_bitfield, __RSS_ISSET_ID);
  }

  public void setRssIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RSS_ISSET_ID, value);
  }

  public int getVss() {
    return this.vss;
  }

  public SystemResources setVss(int vss) {
    this.vss = vss;
    setVssIsSet(true);
    return this;
  }

  public void unsetVss() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VSS_ISSET_ID);
  }

  /** Returns true if field vss is set (has been assigned a value) and false otherwise */
  public boolean isSetVss() {
    return EncodingUtils.testBit(__isset_bitfield, __VSS_ISSET_ID);
  }

  public void setVssIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VSS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROCESS_NAME:
      if (value == null) {
        unsetProcessName();
      } else {
        setProcessName((String)value);
      }
      break;

    case THREAD_NAME:
      if (value == null) {
        unsetThreadName();
      } else {
        setThreadName((String)value);
      }
      break;

    case CHECK_TIME:
      if (value == null) {
        unsetCheckTime();
      } else {
        setCheckTime((String)value);
      }
      break;

    case CPU:
      if (value == null) {
        unsetCpu();
      } else {
        setCpu((Integer)value);
      }
      break;

    case RSS:
      if (value == null) {
        unsetRss();
      } else {
        setRss((Integer)value);
      }
      break;

    case VSS:
      if (value == null) {
        unsetVss();
      } else {
        setVss((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROCESS_NAME:
      return getProcessName();

    case THREAD_NAME:
      return getThreadName();

    case CHECK_TIME:
      return getCheckTime();

    case CPU:
      return Integer.valueOf(getCpu());

    case RSS:
      return Integer.valueOf(getRss());

    case VSS:
      return Integer.valueOf(getVss());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROCESS_NAME:
      return isSetProcessName();
    case THREAD_NAME:
      return isSetThreadName();
    case CHECK_TIME:
      return isSetCheckTime();
    case CPU:
      return isSetCpu();
    case RSS:
      return isSetRss();
    case VSS:
      return isSetVss();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemResources)
      return this.equals((SystemResources)that);
    return false;
  }

  public boolean equals(SystemResources that) {
    if (that == null)
      return false;

    boolean this_present_processName = true && this.isSetProcessName();
    boolean that_present_processName = true && that.isSetProcessName();
    if (this_present_processName || that_present_processName) {
      if (!(this_present_processName && that_present_processName))
        return false;
      if (!this.processName.equals(that.processName))
        return false;
    }

    boolean this_present_threadName = true && this.isSetThreadName();
    boolean that_present_threadName = true && that.isSetThreadName();
    if (this_present_threadName || that_present_threadName) {
      if (!(this_present_threadName && that_present_threadName))
        return false;
      if (!this.threadName.equals(that.threadName))
        return false;
    }

    boolean this_present_checkTime = true && this.isSetCheckTime();
    boolean that_present_checkTime = true && that.isSetCheckTime();
    if (this_present_checkTime || that_present_checkTime) {
      if (!(this_present_checkTime && that_present_checkTime))
        return false;
      if (!this.checkTime.equals(that.checkTime))
        return false;
    }

    boolean this_present_cpu = true;
    boolean that_present_cpu = true;
    if (this_present_cpu || that_present_cpu) {
      if (!(this_present_cpu && that_present_cpu))
        return false;
      if (this.cpu != that.cpu)
        return false;
    }

    boolean this_present_rss = true;
    boolean that_present_rss = true;
    if (this_present_rss || that_present_rss) {
      if (!(this_present_rss && that_present_rss))
        return false;
      if (this.rss != that.rss)
        return false;
    }

    boolean this_present_vss = true;
    boolean that_present_vss = true;
    if (this_present_vss || that_present_vss) {
      if (!(this_present_vss && that_present_vss))
        return false;
      if (this.vss != that.vss)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SystemResources other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProcessName()).compareTo(other.isSetProcessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processName, other.processName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreadName()).compareTo(other.isSetThreadName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadName, other.threadName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckTime()).compareTo(other.isSetCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkTime, other.checkTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpu()).compareTo(other.isSetCpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu, other.cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRss()).compareTo(other.isSetRss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rss, other.rss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVss()).compareTo(other.isSetVss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vss, other.vss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemResources(");
    boolean first = true;

    sb.append("processName:");
    if (this.processName == null) {
      sb.append("null");
    } else {
      sb.append(this.processName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadName:");
    if (this.threadName == null) {
      sb.append("null");
    } else {
      sb.append(this.threadName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkTime:");
    if (this.checkTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpu:");
    sb.append(this.cpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rss:");
    sb.append(this.rss);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vss:");
    sb.append(this.vss);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemResourcesStandardSchemeFactory implements SchemeFactory {
    public SystemResourcesStandardScheme getScheme() {
      return new SystemResourcesStandardScheme();
    }
  }

  private static class SystemResourcesStandardScheme extends StandardScheme<SystemResources> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemResources struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROCESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processName = iprot.readString();
              struct.setProcessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THREAD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.threadName = iprot.readString();
              struct.setThreadNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkTime = iprot.readString();
              struct.setCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpu = iprot.readI32();
              struct.setCpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RSS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rss = iprot.readI32();
              struct.setRssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VSS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vss = iprot.readI32();
              struct.setVssIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemResources struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.processName != null) {
        oprot.writeFieldBegin(PROCESS_NAME_FIELD_DESC);
        oprot.writeString(struct.processName);
        oprot.writeFieldEnd();
      }
      if (struct.threadName != null) {
        oprot.writeFieldBegin(THREAD_NAME_FIELD_DESC);
        oprot.writeString(struct.threadName);
        oprot.writeFieldEnd();
      }
      if (struct.checkTime != null) {
        oprot.writeFieldBegin(CHECK_TIME_FIELD_DESC);
        oprot.writeString(struct.checkTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_FIELD_DESC);
      oprot.writeI32(struct.cpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RSS_FIELD_DESC);
      oprot.writeI32(struct.rss);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VSS_FIELD_DESC);
      oprot.writeI32(struct.vss);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemResourcesTupleSchemeFactory implements SchemeFactory {
    public SystemResourcesTupleScheme getScheme() {
      return new SystemResourcesTupleScheme();
    }
  }

  private static class SystemResourcesTupleScheme extends TupleScheme<SystemResources> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemResources struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProcessName()) {
        optionals.set(0);
      }
      if (struct.isSetThreadName()) {
        optionals.set(1);
      }
      if (struct.isSetCheckTime()) {
        optionals.set(2);
      }
      if (struct.isSetCpu()) {
        optionals.set(3);
      }
      if (struct.isSetRss()) {
        optionals.set(4);
      }
      if (struct.isSetVss()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetProcessName()) {
        oprot.writeString(struct.processName);
      }
      if (struct.isSetThreadName()) {
        oprot.writeString(struct.threadName);
      }
      if (struct.isSetCheckTime()) {
        oprot.writeString(struct.checkTime);
      }
      if (struct.isSetCpu()) {
        oprot.writeI32(struct.cpu);
      }
      if (struct.isSetRss()) {
        oprot.writeI32(struct.rss);
      }
      if (struct.isSetVss()) {
        oprot.writeI32(struct.vss);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemResources struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.processName = iprot.readString();
        struct.setProcessNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.threadName = iprot.readString();
        struct.setThreadNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkTime = iprot.readString();
        struct.setCheckTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cpu = iprot.readI32();
        struct.setCpuIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rss = iprot.readI32();
        struct.setRssIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vss = iprot.readI32();
        struct.setVssIsSet(true);
      }
    }
  }

}

