/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.engine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义node引擎的数据结构
 * 1:string engineId 引擎标示符
 * 2:string engineName 引擎名称
 * 3:string engineIp 引擎IP地址
 * 4:string engineStatus 引擎状态
 * 5:string engineType 引擎类型
 * 6:list<string> engineRules 引擎规则
 * 7:list<string> enginePlots 引擎策略
 */
public class Engine implements org.apache.thrift.TBase<Engine, Engine._Fields>, java.io.Serializable, Cloneable, Comparable<Engine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Engine");

  private static final org.apache.thrift.protocol.TField ENGINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("engineId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENGINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engineName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENGINE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("engineIp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENGINE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("engineStatus", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENGINE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("engineType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ENGINE_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("engineRules", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ENGINE_PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("enginePlots", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EngineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EngineTupleSchemeFactory());
  }

  public String engineId; // required
  public String engineName; // required
  public String engineIp; // required
  public String engineStatus; // required
  public String engineType; // required
  public NodeInfo nodeInfo; // required
  public List<String> engineRules; // required
  public List<String> enginePlots; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENGINE_ID((short)1, "engineId"),
    ENGINE_NAME((short)2, "engineName"),
    ENGINE_IP((short)3, "engineIp"),
    ENGINE_STATUS((short)4, "engineStatus"),
    ENGINE_TYPE((short)5, "engineType"),
    NODE_INFO((short)6, "nodeInfo"),
    ENGINE_RULES((short)7, "engineRules"),
    ENGINE_PLOTS((short)8, "enginePlots");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENGINE_ID
          return ENGINE_ID;
        case 2: // ENGINE_NAME
          return ENGINE_NAME;
        case 3: // ENGINE_IP
          return ENGINE_IP;
        case 4: // ENGINE_STATUS
          return ENGINE_STATUS;
        case 5: // ENGINE_TYPE
          return ENGINE_TYPE;
        case 6: // NODE_INFO
          return NODE_INFO;
        case 7: // ENGINE_RULES
          return ENGINE_RULES;
        case 8: // ENGINE_PLOTS
          return ENGINE_PLOTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENGINE_ID, new org.apache.thrift.meta_data.FieldMetaData("engineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("engineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGINE_IP, new org.apache.thrift.meta_data.FieldMetaData("engineIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGINE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("engineStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGINE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("engineType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    tmpMap.put(_Fields.ENGINE_RULES, new org.apache.thrift.meta_data.FieldMetaData("engineRules", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ENGINE_PLOTS, new org.apache.thrift.meta_data.FieldMetaData("enginePlots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Engine.class, metaDataMap);
  }

  public Engine() {
  }

  public Engine(
    String engineId,
    String engineName,
    String engineIp,
    String engineStatus,
    String engineType,
    NodeInfo nodeInfo,
    List<String> engineRules,
    List<String> enginePlots)
  {
    this();
    this.engineId = engineId;
    this.engineName = engineName;
    this.engineIp = engineIp;
    this.engineStatus = engineStatus;
    this.engineType = engineType;
    this.nodeInfo = nodeInfo;
    this.engineRules = engineRules;
    this.enginePlots = enginePlots;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Engine(Engine other) {
    if (other.isSetEngineId()) {
      this.engineId = other.engineId;
    }
    if (other.isSetEngineName()) {
      this.engineName = other.engineName;
    }
    if (other.isSetEngineIp()) {
      this.engineIp = other.engineIp;
    }
    if (other.isSetEngineStatus()) {
      this.engineStatus = other.engineStatus;
    }
    if (other.isSetEngineType()) {
      this.engineType = other.engineType;
    }
    if (other.isSetNodeInfo()) {
      this.nodeInfo = new NodeInfo(other.nodeInfo);
    }
    if (other.isSetEngineRules()) {
      List<String> __this__engineRules = new ArrayList<String>(other.engineRules);
      this.engineRules = __this__engineRules;
    }
    if (other.isSetEnginePlots()) {
      List<String> __this__enginePlots = new ArrayList<String>(other.enginePlots);
      this.enginePlots = __this__enginePlots;
    }
  }

  public Engine deepCopy() {
    return new Engine(this);
  }

  @Override
  public void clear() {
    this.engineId = null;
    this.engineName = null;
    this.engineIp = null;
    this.engineStatus = null;
    this.engineType = null;
    this.nodeInfo = null;
    this.engineRules = null;
    this.enginePlots = null;
  }

  public String getEngineId() {
    return this.engineId;
  }

  public Engine setEngineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

  public void unsetEngineId() {
    this.engineId = null;
  }

  /** Returns true if field engineId is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineId() {
    return this.engineId != null;
  }

  public void setEngineIdIsSet(boolean value) {
    if (!value) {
      this.engineId = null;
    }
  }

  public String getEngineName() {
    return this.engineName;
  }

  public Engine setEngineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

  public void unsetEngineName() {
    this.engineName = null;
  }

  /** Returns true if field engineName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineName() {
    return this.engineName != null;
  }

  public void setEngineNameIsSet(boolean value) {
    if (!value) {
      this.engineName = null;
    }
  }

  public String getEngineIp() {
    return this.engineIp;
  }

  public Engine setEngineIp(String engineIp) {
    this.engineIp = engineIp;
    return this;
  }

  public void unsetEngineIp() {
    this.engineIp = null;
  }

  /** Returns true if field engineIp is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineIp() {
    return this.engineIp != null;
  }

  public void setEngineIpIsSet(boolean value) {
    if (!value) {
      this.engineIp = null;
    }
  }

  public String getEngineStatus() {
    return this.engineStatus;
  }

  public Engine setEngineStatus(String engineStatus) {
    this.engineStatus = engineStatus;
    return this;
  }

  public void unsetEngineStatus() {
    this.engineStatus = null;
  }

  /** Returns true if field engineStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineStatus() {
    return this.engineStatus != null;
  }

  public void setEngineStatusIsSet(boolean value) {
    if (!value) {
      this.engineStatus = null;
    }
  }

  public String getEngineType() {
    return this.engineType;
  }

  public Engine setEngineType(String engineType) {
    this.engineType = engineType;
    return this;
  }

  public void unsetEngineType() {
    this.engineType = null;
  }

  /** Returns true if field engineType is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineType() {
    return this.engineType != null;
  }

  public void setEngineTypeIsSet(boolean value) {
    if (!value) {
      this.engineType = null;
    }
  }

  public NodeInfo getNodeInfo() {
    return this.nodeInfo;
  }

  public Engine setNodeInfo(NodeInfo nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  public void unsetNodeInfo() {
    this.nodeInfo = null;
  }

  /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeInfo() {
    return this.nodeInfo != null;
  }

  public void setNodeInfoIsSet(boolean value) {
    if (!value) {
      this.nodeInfo = null;
    }
  }

  public int getEngineRulesSize() {
    return (this.engineRules == null) ? 0 : this.engineRules.size();
  }

  public java.util.Iterator<String> getEngineRulesIterator() {
    return (this.engineRules == null) ? null : this.engineRules.iterator();
  }

  public void addToEngineRules(String elem) {
    if (this.engineRules == null) {
      this.engineRules = new ArrayList<String>();
    }
    this.engineRules.add(elem);
  }

  public List<String> getEngineRules() {
    return this.engineRules;
  }

  public Engine setEngineRules(List<String> engineRules) {
    this.engineRules = engineRules;
    return this;
  }

  public void unsetEngineRules() {
    this.engineRules = null;
  }

  /** Returns true if field engineRules is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineRules() {
    return this.engineRules != null;
  }

  public void setEngineRulesIsSet(boolean value) {
    if (!value) {
      this.engineRules = null;
    }
  }

  public int getEnginePlotsSize() {
    return (this.enginePlots == null) ? 0 : this.enginePlots.size();
  }

  public java.util.Iterator<String> getEnginePlotsIterator() {
    return (this.enginePlots == null) ? null : this.enginePlots.iterator();
  }

  public void addToEnginePlots(String elem) {
    if (this.enginePlots == null) {
      this.enginePlots = new ArrayList<String>();
    }
    this.enginePlots.add(elem);
  }

  public List<String> getEnginePlots() {
    return this.enginePlots;
  }

  public Engine setEnginePlots(List<String> enginePlots) {
    this.enginePlots = enginePlots;
    return this;
  }

  public void unsetEnginePlots() {
    this.enginePlots = null;
  }

  /** Returns true if field enginePlots is set (has been assigned a value) and false otherwise */
  public boolean isSetEnginePlots() {
    return this.enginePlots != null;
  }

  public void setEnginePlotsIsSet(boolean value) {
    if (!value) {
      this.enginePlots = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENGINE_ID:
      if (value == null) {
        unsetEngineId();
      } else {
        setEngineId((String)value);
      }
      break;

    case ENGINE_NAME:
      if (value == null) {
        unsetEngineName();
      } else {
        setEngineName((String)value);
      }
      break;

    case ENGINE_IP:
      if (value == null) {
        unsetEngineIp();
      } else {
        setEngineIp((String)value);
      }
      break;

    case ENGINE_STATUS:
      if (value == null) {
        unsetEngineStatus();
      } else {
        setEngineStatus((String)value);
      }
      break;

    case ENGINE_TYPE:
      if (value == null) {
        unsetEngineType();
      } else {
        setEngineType((String)value);
      }
      break;

    case NODE_INFO:
      if (value == null) {
        unsetNodeInfo();
      } else {
        setNodeInfo((NodeInfo)value);
      }
      break;

    case ENGINE_RULES:
      if (value == null) {
        unsetEngineRules();
      } else {
        setEngineRules((List<String>)value);
      }
      break;

    case ENGINE_PLOTS:
      if (value == null) {
        unsetEnginePlots();
      } else {
        setEnginePlots((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENGINE_ID:
      return getEngineId();

    case ENGINE_NAME:
      return getEngineName();

    case ENGINE_IP:
      return getEngineIp();

    case ENGINE_STATUS:
      return getEngineStatus();

    case ENGINE_TYPE:
      return getEngineType();

    case NODE_INFO:
      return getNodeInfo();

    case ENGINE_RULES:
      return getEngineRules();

    case ENGINE_PLOTS:
      return getEnginePlots();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENGINE_ID:
      return isSetEngineId();
    case ENGINE_NAME:
      return isSetEngineName();
    case ENGINE_IP:
      return isSetEngineIp();
    case ENGINE_STATUS:
      return isSetEngineStatus();
    case ENGINE_TYPE:
      return isSetEngineType();
    case NODE_INFO:
      return isSetNodeInfo();
    case ENGINE_RULES:
      return isSetEngineRules();
    case ENGINE_PLOTS:
      return isSetEnginePlots();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Engine)
      return this.equals((Engine)that);
    return false;
  }

  public boolean equals(Engine that) {
    if (that == null)
      return false;

    boolean this_present_engineId = true && this.isSetEngineId();
    boolean that_present_engineId = true && that.isSetEngineId();
    if (this_present_engineId || that_present_engineId) {
      if (!(this_present_engineId && that_present_engineId))
        return false;
      if (!this.engineId.equals(that.engineId))
        return false;
    }

    boolean this_present_engineName = true && this.isSetEngineName();
    boolean that_present_engineName = true && that.isSetEngineName();
    if (this_present_engineName || that_present_engineName) {
      if (!(this_present_engineName && that_present_engineName))
        return false;
      if (!this.engineName.equals(that.engineName))
        return false;
    }

    boolean this_present_engineIp = true && this.isSetEngineIp();
    boolean that_present_engineIp = true && that.isSetEngineIp();
    if (this_present_engineIp || that_present_engineIp) {
      if (!(this_present_engineIp && that_present_engineIp))
        return false;
      if (!this.engineIp.equals(that.engineIp))
        return false;
    }

    boolean this_present_engineStatus = true && this.isSetEngineStatus();
    boolean that_present_engineStatus = true && that.isSetEngineStatus();
    if (this_present_engineStatus || that_present_engineStatus) {
      if (!(this_present_engineStatus && that_present_engineStatus))
        return false;
      if (!this.engineStatus.equals(that.engineStatus))
        return false;
    }

    boolean this_present_engineType = true && this.isSetEngineType();
    boolean that_present_engineType = true && that.isSetEngineType();
    if (this_present_engineType || that_present_engineType) {
      if (!(this_present_engineType && that_present_engineType))
        return false;
      if (!this.engineType.equals(that.engineType))
        return false;
    }

    boolean this_present_nodeInfo = true && this.isSetNodeInfo();
    boolean that_present_nodeInfo = true && that.isSetNodeInfo();
    if (this_present_nodeInfo || that_present_nodeInfo) {
      if (!(this_present_nodeInfo && that_present_nodeInfo))
        return false;
      if (!this.nodeInfo.equals(that.nodeInfo))
        return false;
    }

    boolean this_present_engineRules = true && this.isSetEngineRules();
    boolean that_present_engineRules = true && that.isSetEngineRules();
    if (this_present_engineRules || that_present_engineRules) {
      if (!(this_present_engineRules && that_present_engineRules))
        return false;
      if (!this.engineRules.equals(that.engineRules))
        return false;
    }

    boolean this_present_enginePlots = true && this.isSetEnginePlots();
    boolean that_present_enginePlots = true && that.isSetEnginePlots();
    if (this_present_enginePlots || that_present_enginePlots) {
      if (!(this_present_enginePlots && that_present_enginePlots))
        return false;
      if (!this.enginePlots.equals(that.enginePlots))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Engine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEngineId()).compareTo(other.isSetEngineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineId, other.engineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngineName()).compareTo(other.isSetEngineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineName, other.engineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngineIp()).compareTo(other.isSetEngineIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineIp, other.engineIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngineStatus()).compareTo(other.isSetEngineStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineStatus, other.engineStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngineType()).compareTo(other.isSetEngineType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineType, other.engineType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeInfo()).compareTo(other.isSetNodeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngineRules()).compareTo(other.isSetEngineRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engineRules, other.engineRules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnginePlots()).compareTo(other.isSetEnginePlots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnginePlots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enginePlots, other.enginePlots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Engine(");
    boolean first = true;

    sb.append("engineId:");
    if (this.engineId == null) {
      sb.append("null");
    } else {
      sb.append(this.engineId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engineName:");
    if (this.engineName == null) {
      sb.append("null");
    } else {
      sb.append(this.engineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engineIp:");
    if (this.engineIp == null) {
      sb.append("null");
    } else {
      sb.append(this.engineIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engineStatus:");
    if (this.engineStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.engineStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engineType:");
    if (this.engineType == null) {
      sb.append("null");
    } else {
      sb.append(this.engineType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeInfo:");
    if (this.nodeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engineRules:");
    if (this.engineRules == null) {
      sb.append("null");
    } else {
      sb.append(this.engineRules);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enginePlots:");
    if (this.enginePlots == null) {
      sb.append("null");
    } else {
      sb.append(this.enginePlots);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (nodeInfo != null) {
      nodeInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EngineStandardSchemeFactory implements SchemeFactory {
    public EngineStandardScheme getScheme() {
      return new EngineStandardScheme();
    }
  }

  private static class EngineStandardScheme extends StandardScheme<Engine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Engine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENGINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engineId = iprot.readString();
              struct.setEngineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENGINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engineName = iprot.readString();
              struct.setEngineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENGINE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engineIp = iprot.readString();
              struct.setEngineIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENGINE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engineStatus = iprot.readString();
              struct.setEngineStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENGINE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engineType = iprot.readString();
              struct.setEngineTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeInfo = new NodeInfo();
              struct.nodeInfo.read(iprot);
              struct.setNodeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENGINE_RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.engineRules = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.engineRules.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setEngineRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ENGINE_PLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.enginePlots = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.enginePlots.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setEnginePlotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Engine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.engineId != null) {
        oprot.writeFieldBegin(ENGINE_ID_FIELD_DESC);
        oprot.writeString(struct.engineId);
        oprot.writeFieldEnd();
      }
      if (struct.engineName != null) {
        oprot.writeFieldBegin(ENGINE_NAME_FIELD_DESC);
        oprot.writeString(struct.engineName);
        oprot.writeFieldEnd();
      }
      if (struct.engineIp != null) {
        oprot.writeFieldBegin(ENGINE_IP_FIELD_DESC);
        oprot.writeString(struct.engineIp);
        oprot.writeFieldEnd();
      }
      if (struct.engineStatus != null) {
        oprot.writeFieldBegin(ENGINE_STATUS_FIELD_DESC);
        oprot.writeString(struct.engineStatus);
        oprot.writeFieldEnd();
      }
      if (struct.engineType != null) {
        oprot.writeFieldBegin(ENGINE_TYPE_FIELD_DESC);
        oprot.writeString(struct.engineType);
        oprot.writeFieldEnd();
      }
      if (struct.nodeInfo != null) {
        oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
        struct.nodeInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.engineRules != null) {
        oprot.writeFieldBegin(ENGINE_RULES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.engineRules.size()));
          for (String _iter6 : struct.engineRules)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.enginePlots != null) {
        oprot.writeFieldBegin(ENGINE_PLOTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.enginePlots.size()));
          for (String _iter7 : struct.enginePlots)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EngineTupleSchemeFactory implements SchemeFactory {
    public EngineTupleScheme getScheme() {
      return new EngineTupleScheme();
    }
  }

  private static class EngineTupleScheme extends TupleScheme<Engine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Engine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEngineId()) {
        optionals.set(0);
      }
      if (struct.isSetEngineName()) {
        optionals.set(1);
      }
      if (struct.isSetEngineIp()) {
        optionals.set(2);
      }
      if (struct.isSetEngineStatus()) {
        optionals.set(3);
      }
      if (struct.isSetEngineType()) {
        optionals.set(4);
      }
      if (struct.isSetNodeInfo()) {
        optionals.set(5);
      }
      if (struct.isSetEngineRules()) {
        optionals.set(6);
      }
      if (struct.isSetEnginePlots()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetEngineId()) {
        oprot.writeString(struct.engineId);
      }
      if (struct.isSetEngineName()) {
        oprot.writeString(struct.engineName);
      }
      if (struct.isSetEngineIp()) {
        oprot.writeString(struct.engineIp);
      }
      if (struct.isSetEngineStatus()) {
        oprot.writeString(struct.engineStatus);
      }
      if (struct.isSetEngineType()) {
        oprot.writeString(struct.engineType);
      }
      if (struct.isSetNodeInfo()) {
        struct.nodeInfo.write(oprot);
      }
      if (struct.isSetEngineRules()) {
        {
          oprot.writeI32(struct.engineRules.size());
          for (String _iter8 : struct.engineRules)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetEnginePlots()) {
        {
          oprot.writeI32(struct.enginePlots.size());
          for (String _iter9 : struct.enginePlots)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Engine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.engineId = iprot.readString();
        struct.setEngineIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.engineName = iprot.readString();
        struct.setEngineNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.engineIp = iprot.readString();
        struct.setEngineIpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.engineStatus = iprot.readString();
        struct.setEngineStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.engineType = iprot.readString();
        struct.setEngineTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nodeInfo = new NodeInfo();
        struct.nodeInfo.read(iprot);
        struct.setNodeInfoIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.engineRules = new ArrayList<String>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            String _elem12;
            _elem12 = iprot.readString();
            struct.engineRules.add(_elem12);
          }
        }
        struct.setEngineRulesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.enginePlots = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.enginePlots.add(_elem15);
          }
        }
        struct.setEnginePlotsIsSet(true);
      }
    }
  }

}

