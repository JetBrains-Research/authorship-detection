/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * 定义应用状态
 * insave 刚刚接收到样本
 * inequs 待一致性检测
 * inequserr 一致性检测出错
 * inbupt 待北邮检测
 * inbupterr 待北邮检测出错
 * insensitive 待敏感检测
 * insensitiveerr 待敏感检测失败
 * insent 已发送至引擎
 * inreceived 引擎已接收
 * inverified 恶意待确认
 * inrecheck 灰色待复检
 * inwaitsign 待签名
 * insign 已签名
 * inaway 已取走
 * inbad 恶意
 * insignerr 签名失败
 */
public enum AppStatus implements org.apache.thrift.TEnum {
  insaved(0),
  inequs(1),
  inequserror(2),
  inbupt(3),
  inbupterr(4),
  insensitive(5),
  insensitiveerr(6),
  insent(7),
  inreceived(8),
  insucceeded(9),
  inrisked(10),
  inriskerror(11),
  inreported(12),
  inreportederror(13),
  inverified(14),
  inrecheck(15),
  inwaitsign(16),
  insign(17),
  inaway(18),
  inbad(19),
  insignerr(20);

  private final int value;

  private AppStatus(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static AppStatus findByValue(int value) { 
    switch (value) {
      case 0:
        return insaved;
      case 1:
        return inequs;
      case 2:
        return inequserror;
      case 3:
        return inbupt;
      case 4:
        return inbupterr;
      case 5:
        return insensitive;
      case 6:
        return insensitiveerr;
      case 7:
        return insent;
      case 8:
        return inreceived;
      case 9:
        return insucceeded;
      case 10:
        return inrisked;
      case 11:
        return inriskerror;
      case 12:
        return inreported;
      case 13:
        return inreportederror;
      case 14:
        return inverified;
      case 15:
        return inrecheck;
      case 16:
        return inwaitsign;
      case 17:
        return insign;
      case 18:
        return inaway;
      case 19:
        return inbad;
      case 20:
        return insignerr;
      default:
        return null;
    }
  }
}
