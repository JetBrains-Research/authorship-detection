/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl.rules;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 1:string ruleId 规则编号
 * 2:string ruleName 规则名称
 * 3:Activity ruleType 规则行为类型
 * 4:Risk riskLevel 风险级别
 * 5:string pak 命名空间
 * 6:string obj 类名
 * 7:string funct 函数名称
 * 8:string ruleDescription 规则描述
 */
public class Rules implements org.apache.thrift.TBase<Rules, Rules._Fields>, java.io.Serializable, Cloneable, Comparable<Rules> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rules");

  private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RULE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleTypes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLevel", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PAK_FIELD_DESC = new org.apache.thrift.protocol.TField("pak", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("obj", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FUNC_FIELD_DESC = new org.apache.thrift.protocol.TField("func", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RULE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleDescription", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RulesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RulesTupleSchemeFactory());
  }

  public String ruleId; // required
  public String ruleName; // required
  public List<Activity> ruleTypes; // required
  /**
   * 
   * @see Risk
   */
  public Risk riskLevel; // required
  public String pak; // required
  public String obj; // required
  public String func; // required
  public String ruleDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RULE_ID((short)1, "ruleId"),
    RULE_NAME((short)2, "ruleName"),
    RULE_TYPES((short)3, "ruleTypes"),
    /**
     * 
     * @see Risk
     */
    RISK_LEVEL((short)4, "riskLevel"),
    PAK((short)5, "pak"),
    OBJ((short)6, "obj"),
    FUNC((short)7, "func"),
    RULE_DESCRIPTION((short)8, "ruleDescription");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RULE_ID
          return RULE_ID;
        case 2: // RULE_NAME
          return RULE_NAME;
        case 3: // RULE_TYPES
          return RULE_TYPES;
        case 4: // RISK_LEVEL
          return RISK_LEVEL;
        case 5: // PAK
          return PAK;
        case 6: // OBJ
          return OBJ;
        case 7: // FUNC
          return FUNC;
        case 8: // RULE_DESCRIPTION
          return RULE_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ruleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("ruleTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Activity.class))));
    tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("riskLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Risk.class)));
    tmpMap.put(_Fields.PAK, new org.apache.thrift.meta_data.FieldMetaData("pak", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJ, new org.apache.thrift.meta_data.FieldMetaData("obj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNC, new org.apache.thrift.meta_data.FieldMetaData("func", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("ruleDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rules.class, metaDataMap);
  }

  public Rules() {
  }

  public Rules(
    String ruleId,
    String ruleName,
    List<Activity> ruleTypes,
    Risk riskLevel,
    String pak,
    String obj,
    String func,
    String ruleDescription)
  {
    this();
    this.ruleId = ruleId;
    this.ruleName = ruleName;
    this.ruleTypes = ruleTypes;
    this.riskLevel = riskLevel;
    this.pak = pak;
    this.obj = obj;
    this.func = func;
    this.ruleDescription = ruleDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rules(Rules other) {
    if (other.isSetRuleId()) {
      this.ruleId = other.ruleId;
    }
    if (other.isSetRuleName()) {
      this.ruleName = other.ruleName;
    }
    if (other.isSetRuleTypes()) {
      List<Activity> __this__ruleTypes = new ArrayList<Activity>(other.ruleTypes.size());
      for (Activity other_element : other.ruleTypes) {
        __this__ruleTypes.add(other_element);
      }
      this.ruleTypes = __this__ruleTypes;
    }
    if (other.isSetRiskLevel()) {
      this.riskLevel = other.riskLevel;
    }
    if (other.isSetPak()) {
      this.pak = other.pak;
    }
    if (other.isSetObj()) {
      this.obj = other.obj;
    }
    if (other.isSetFunc()) {
      this.func = other.func;
    }
    if (other.isSetRuleDescription()) {
      this.ruleDescription = other.ruleDescription;
    }
  }

  public Rules deepCopy() {
    return new Rules(this);
  }

  @Override
  public void clear() {
    this.ruleId = null;
    this.ruleName = null;
    this.ruleTypes = null;
    this.riskLevel = null;
    this.pak = null;
    this.obj = null;
    this.func = null;
    this.ruleDescription = null;
  }

  public String getRuleId() {
    return this.ruleId;
  }

  public Rules setRuleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  public void unsetRuleId() {
    this.ruleId = null;
  }

  /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleId() {
    return this.ruleId != null;
  }

  public void setRuleIdIsSet(boolean value) {
    if (!value) {
      this.ruleId = null;
    }
  }

  public String getRuleName() {
    return this.ruleName;
  }

  public Rules setRuleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  public void unsetRuleName() {
    this.ruleName = null;
  }

  /** Returns true if field ruleName is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleName() {
    return this.ruleName != null;
  }

  public void setRuleNameIsSet(boolean value) {
    if (!value) {
      this.ruleName = null;
    }
  }

  public int getRuleTypesSize() {
    return (this.ruleTypes == null) ? 0 : this.ruleTypes.size();
  }

  public java.util.Iterator<Activity> getRuleTypesIterator() {
    return (this.ruleTypes == null) ? null : this.ruleTypes.iterator();
  }

  public void addToRuleTypes(Activity elem) {
    if (this.ruleTypes == null) {
      this.ruleTypes = new ArrayList<Activity>();
    }
    this.ruleTypes.add(elem);
  }

  public List<Activity> getRuleTypes() {
    return this.ruleTypes;
  }

  public Rules setRuleTypes(List<Activity> ruleTypes) {
    this.ruleTypes = ruleTypes;
    return this;
  }

  public void unsetRuleTypes() {
    this.ruleTypes = null;
  }

  /** Returns true if field ruleTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleTypes() {
    return this.ruleTypes != null;
  }

  public void setRuleTypesIsSet(boolean value) {
    if (!value) {
      this.ruleTypes = null;
    }
  }

  /**
   * 
   * @see Risk
   */
  public Risk getRiskLevel() {
    return this.riskLevel;
  }

  /**
   * 
   * @see Risk
   */
  public Rules setRiskLevel(Risk riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

  public void unsetRiskLevel() {
    this.riskLevel = null;
  }

  /** Returns true if field riskLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskLevel() {
    return this.riskLevel != null;
  }

  public void setRiskLevelIsSet(boolean value) {
    if (!value) {
      this.riskLevel = null;
    }
  }

  public String getPak() {
    return this.pak;
  }

  public Rules setPak(String pak) {
    this.pak = pak;
    return this;
  }

  public void unsetPak() {
    this.pak = null;
  }

  /** Returns true if field pak is set (has been assigned a value) and false otherwise */
  public boolean isSetPak() {
    return this.pak != null;
  }

  public void setPakIsSet(boolean value) {
    if (!value) {
      this.pak = null;
    }
  }

  public String getObj() {
    return this.obj;
  }

  public Rules setObj(String obj) {
    this.obj = obj;
    return this;
  }

  public void unsetObj() {
    this.obj = null;
  }

  /** Returns true if field obj is set (has been assigned a value) and false otherwise */
  public boolean isSetObj() {
    return this.obj != null;
  }

  public void setObjIsSet(boolean value) {
    if (!value) {
      this.obj = null;
    }
  }

  public String getFunc() {
    return this.func;
  }

  public Rules setFunc(String func) {
    this.func = func;
    return this;
  }

  public void unsetFunc() {
    this.func = null;
  }

  /** Returns true if field func is set (has been assigned a value) and false otherwise */
  public boolean isSetFunc() {
    return this.func != null;
  }

  public void setFuncIsSet(boolean value) {
    if (!value) {
      this.func = null;
    }
  }

  public String getRuleDescription() {
    return this.ruleDescription;
  }

  public Rules setRuleDescription(String ruleDescription) {
    this.ruleDescription = ruleDescription;
    return this;
  }

  public void unsetRuleDescription() {
    this.ruleDescription = null;
  }

  /** Returns true if field ruleDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleDescription() {
    return this.ruleDescription != null;
  }

  public void setRuleDescriptionIsSet(boolean value) {
    if (!value) {
      this.ruleDescription = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RULE_ID:
      if (value == null) {
        unsetRuleId();
      } else {
        setRuleId((String)value);
      }
      break;

    case RULE_NAME:
      if (value == null) {
        unsetRuleName();
      } else {
        setRuleName((String)value);
      }
      break;

    case RULE_TYPES:
      if (value == null) {
        unsetRuleTypes();
      } else {
        setRuleTypes((List<Activity>)value);
      }
      break;

    case RISK_LEVEL:
      if (value == null) {
        unsetRiskLevel();
      } else {
        setRiskLevel((Risk)value);
      }
      break;

    case PAK:
      if (value == null) {
        unsetPak();
      } else {
        setPak((String)value);
      }
      break;

    case OBJ:
      if (value == null) {
        unsetObj();
      } else {
        setObj((String)value);
      }
      break;

    case FUNC:
      if (value == null) {
        unsetFunc();
      } else {
        setFunc((String)value);
      }
      break;

    case RULE_DESCRIPTION:
      if (value == null) {
        unsetRuleDescription();
      } else {
        setRuleDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RULE_ID:
      return getRuleId();

    case RULE_NAME:
      return getRuleName();

    case RULE_TYPES:
      return getRuleTypes();

    case RISK_LEVEL:
      return getRiskLevel();

    case PAK:
      return getPak();

    case OBJ:
      return getObj();

    case FUNC:
      return getFunc();

    case RULE_DESCRIPTION:
      return getRuleDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RULE_ID:
      return isSetRuleId();
    case RULE_NAME:
      return isSetRuleName();
    case RULE_TYPES:
      return isSetRuleTypes();
    case RISK_LEVEL:
      return isSetRiskLevel();
    case PAK:
      return isSetPak();
    case OBJ:
      return isSetObj();
    case FUNC:
      return isSetFunc();
    case RULE_DESCRIPTION:
      return isSetRuleDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Rules)
      return this.equals((Rules)that);
    return false;
  }

  public boolean equals(Rules that) {
    if (that == null)
      return false;

    boolean this_present_ruleId = true && this.isSetRuleId();
    boolean that_present_ruleId = true && that.isSetRuleId();
    if (this_present_ruleId || that_present_ruleId) {
      if (!(this_present_ruleId && that_present_ruleId))
        return false;
      if (!this.ruleId.equals(that.ruleId))
        return false;
    }

    boolean this_present_ruleName = true && this.isSetRuleName();
    boolean that_present_ruleName = true && that.isSetRuleName();
    if (this_present_ruleName || that_present_ruleName) {
      if (!(this_present_ruleName && that_present_ruleName))
        return false;
      if (!this.ruleName.equals(that.ruleName))
        return false;
    }

    boolean this_present_ruleTypes = true && this.isSetRuleTypes();
    boolean that_present_ruleTypes = true && that.isSetRuleTypes();
    if (this_present_ruleTypes || that_present_ruleTypes) {
      if (!(this_present_ruleTypes && that_present_ruleTypes))
        return false;
      if (!this.ruleTypes.equals(that.ruleTypes))
        return false;
    }

    boolean this_present_riskLevel = true && this.isSetRiskLevel();
    boolean that_present_riskLevel = true && that.isSetRiskLevel();
    if (this_present_riskLevel || that_present_riskLevel) {
      if (!(this_present_riskLevel && that_present_riskLevel))
        return false;
      if (!this.riskLevel.equals(that.riskLevel))
        return false;
    }

    boolean this_present_pak = true && this.isSetPak();
    boolean that_present_pak = true && that.isSetPak();
    if (this_present_pak || that_present_pak) {
      if (!(this_present_pak && that_present_pak))
        return false;
      if (!this.pak.equals(that.pak))
        return false;
    }

    boolean this_present_obj = true && this.isSetObj();
    boolean that_present_obj = true && that.isSetObj();
    if (this_present_obj || that_present_obj) {
      if (!(this_present_obj && that_present_obj))
        return false;
      if (!this.obj.equals(that.obj))
        return false;
    }

    boolean this_present_func = true && this.isSetFunc();
    boolean that_present_func = true && that.isSetFunc();
    if (this_present_func || that_present_func) {
      if (!(this_present_func && that_present_func))
        return false;
      if (!this.func.equals(that.func))
        return false;
    }

    boolean this_present_ruleDescription = true && this.isSetRuleDescription();
    boolean that_present_ruleDescription = true && that.isSetRuleDescription();
    if (this_present_ruleDescription || that_present_ruleDescription) {
      if (!(this_present_ruleDescription && that_present_ruleDescription))
        return false;
      if (!this.ruleDescription.equals(that.ruleDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Rules other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuleName()).compareTo(other.isSetRuleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleName, other.ruleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuleTypes()).compareTo(other.isSetRuleTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleTypes, other.ruleTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskLevel()).compareTo(other.isSetRiskLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLevel, other.riskLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPak()).compareTo(other.isSetPak());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPak()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pak, other.pak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObj()).compareTo(other.isSetObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj, other.obj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunc()).compareTo(other.isSetFunc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.func, other.func);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuleDescription()).compareTo(other.isSetRuleDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleDescription, other.ruleDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Rules(");
    boolean first = true;

    sb.append("ruleId:");
    if (this.ruleId == null) {
      sb.append("null");
    } else {
      sb.append(this.ruleId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruleName:");
    if (this.ruleName == null) {
      sb.append("null");
    } else {
      sb.append(this.ruleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruleTypes:");
    if (this.ruleTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.ruleTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskLevel:");
    if (this.riskLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.riskLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pak:");
    if (this.pak == null) {
      sb.append("null");
    } else {
      sb.append(this.pak);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("obj:");
    if (this.obj == null) {
      sb.append("null");
    } else {
      sb.append(this.obj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("func:");
    if (this.func == null) {
      sb.append("null");
    } else {
      sb.append(this.func);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruleDescription:");
    if (this.ruleDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.ruleDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RulesStandardSchemeFactory implements SchemeFactory {
    public RulesStandardScheme getScheme() {
      return new RulesStandardScheme();
    }
  }

  private static class RulesStandardScheme extends StandardScheme<Rules> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Rules struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ruleId = iprot.readString();
              struct.setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RULE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ruleName = iprot.readString();
              struct.setRuleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RULE_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.ruleTypes = new ArrayList<Activity>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Activity _elem2;
                  _elem2 = Activity.findByValue(iprot.readI32());
                  struct.ruleTypes.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRuleTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RISK_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.riskLevel = Risk.findByValue(iprot.readI32());
              struct.setRiskLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pak = iprot.readString();
              struct.setPakIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.obj = iprot.readString();
              struct.setObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FUNC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.func = iprot.readString();
              struct.setFuncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RULE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ruleDescription = iprot.readString();
              struct.setRuleDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Rules struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ruleId != null) {
        oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
        oprot.writeString(struct.ruleId);
        oprot.writeFieldEnd();
      }
      if (struct.ruleName != null) {
        oprot.writeFieldBegin(RULE_NAME_FIELD_DESC);
        oprot.writeString(struct.ruleName);
        oprot.writeFieldEnd();
      }
      if (struct.ruleTypes != null) {
        oprot.writeFieldBegin(RULE_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ruleTypes.size()));
          for (Activity _iter3 : struct.ruleTypes)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.riskLevel != null) {
        oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.riskLevel.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.pak != null) {
        oprot.writeFieldBegin(PAK_FIELD_DESC);
        oprot.writeString(struct.pak);
        oprot.writeFieldEnd();
      }
      if (struct.obj != null) {
        oprot.writeFieldBegin(OBJ_FIELD_DESC);
        oprot.writeString(struct.obj);
        oprot.writeFieldEnd();
      }
      if (struct.func != null) {
        oprot.writeFieldBegin(FUNC_FIELD_DESC);
        oprot.writeString(struct.func);
        oprot.writeFieldEnd();
      }
      if (struct.ruleDescription != null) {
        oprot.writeFieldBegin(RULE_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.ruleDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RulesTupleSchemeFactory implements SchemeFactory {
    public RulesTupleScheme getScheme() {
      return new RulesTupleScheme();
    }
  }

  private static class RulesTupleScheme extends TupleScheme<Rules> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Rules struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRuleId()) {
        optionals.set(0);
      }
      if (struct.isSetRuleName()) {
        optionals.set(1);
      }
      if (struct.isSetRuleTypes()) {
        optionals.set(2);
      }
      if (struct.isSetRiskLevel()) {
        optionals.set(3);
      }
      if (struct.isSetPak()) {
        optionals.set(4);
      }
      if (struct.isSetObj()) {
        optionals.set(5);
      }
      if (struct.isSetFunc()) {
        optionals.set(6);
      }
      if (struct.isSetRuleDescription()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetRuleId()) {
        oprot.writeString(struct.ruleId);
      }
      if (struct.isSetRuleName()) {
        oprot.writeString(struct.ruleName);
      }
      if (struct.isSetRuleTypes()) {
        {
          oprot.writeI32(struct.ruleTypes.size());
          for (Activity _iter4 : struct.ruleTypes)
          {
            oprot.writeI32(_iter4.getValue());
          }
        }
      }
      if (struct.isSetRiskLevel()) {
        oprot.writeI32(struct.riskLevel.getValue());
      }
      if (struct.isSetPak()) {
        oprot.writeString(struct.pak);
      }
      if (struct.isSetObj()) {
        oprot.writeString(struct.obj);
      }
      if (struct.isSetFunc()) {
        oprot.writeString(struct.func);
      }
      if (struct.isSetRuleDescription()) {
        oprot.writeString(struct.ruleDescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Rules struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.ruleId = iprot.readString();
        struct.setRuleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ruleName = iprot.readString();
        struct.setRuleNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.ruleTypes = new ArrayList<Activity>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Activity _elem7;
            _elem7 = Activity.findByValue(iprot.readI32());
            struct.ruleTypes.add(_elem7);
          }
        }
        struct.setRuleTypesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.riskLevel = Risk.findByValue(iprot.readI32());
        struct.setRiskLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pak = iprot.readString();
        struct.setPakIsSet(true);
      }
      if (incoming.get(5)) {
        struct.obj = iprot.readString();
        struct.setObjIsSet(true);
      }
      if (incoming.get(6)) {
        struct.func = iprot.readString();
        struct.setFuncIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ruleDescription = iprot.readString();
        struct.setRuleDescriptionIsSet(true);
      }
    }
  }

}

