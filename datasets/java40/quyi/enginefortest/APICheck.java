/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义静态检测 API检测记录
 * 1:string apiName 被调用的威胁Api名称
 * 2:string apiPackageName 被调用的威胁Api包名称
 * 3:string packageName 检测存在问题的包的名称
 * 4:string objectName 检测存在问题的类的名称
 * 5:string methodName 检测存在问题的方法的名称
 * 6:string statement 检测存在问题
 * 7:string riskType 威胁类型
 * 8:string riskLevel 威胁等级
 * 9:string ruleNo 规则序号
 * 10:string category 规则的类别
 * 11:string description 规则描述
 * 12:i32 lineNum 检测到威胁所在行
 * 13:i32 columnNum 检测到威胁所在列
 * 14:string riskDescription 检测到的威胁描述
 */
public class APICheck implements org.apache.thrift.TBase<APICheck, APICheck._Fields>, java.io.Serializable, Cloneable, Comparable<APICheck> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APICheck");

  private static final org.apache.thrift.protocol.TField API_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("apiName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField API_PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("apiPackageName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OBJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("objectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RISK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("riskType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLevel", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RULE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LINE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNum", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField COLUMN_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNum", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField RISK_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("riskDescription", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APICheckStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APICheckTupleSchemeFactory());
  }

  public String apiName; // required
  public String apiPackageName; // required
  public String packageName; // required
  public String objectName; // required
  public String methodName; // required
  public String statement; // required
  public String riskType; // required
  public String riskLevel; // required
  public String ruleNo; // required
  public String category; // required
  public String description; // required
  public int lineNum; // required
  public int columnNum; // required
  public String riskDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    API_NAME((short)1, "apiName"),
    API_PACKAGE_NAME((short)2, "apiPackageName"),
    PACKAGE_NAME((short)3, "packageName"),
    OBJECT_NAME((short)4, "objectName"),
    METHOD_NAME((short)5, "methodName"),
    STATEMENT((short)6, "statement"),
    RISK_TYPE((short)7, "riskType"),
    RISK_LEVEL((short)8, "riskLevel"),
    RULE_NO((short)9, "ruleNo"),
    CATEGORY((short)10, "category"),
    DESCRIPTION((short)11, "description"),
    LINE_NUM((short)12, "lineNum"),
    COLUMN_NUM((short)13, "columnNum"),
    RISK_DESCRIPTION((short)14, "riskDescription");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // API_NAME
          return API_NAME;
        case 2: // API_PACKAGE_NAME
          return API_PACKAGE_NAME;
        case 3: // PACKAGE_NAME
          return PACKAGE_NAME;
        case 4: // OBJECT_NAME
          return OBJECT_NAME;
        case 5: // METHOD_NAME
          return METHOD_NAME;
        case 6: // STATEMENT
          return STATEMENT;
        case 7: // RISK_TYPE
          return RISK_TYPE;
        case 8: // RISK_LEVEL
          return RISK_LEVEL;
        case 9: // RULE_NO
          return RULE_NO;
        case 10: // CATEGORY
          return CATEGORY;
        case 11: // DESCRIPTION
          return DESCRIPTION;
        case 12: // LINE_NUM
          return LINE_NUM;
        case 13: // COLUMN_NUM
          return COLUMN_NUM;
        case 14: // RISK_DESCRIPTION
          return RISK_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINENUM_ISSET_ID = 0;
  private static final int __COLUMNNUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.API_NAME, new org.apache.thrift.meta_data.FieldMetaData("apiName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.API_PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("apiPackageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("objectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RISK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("riskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("riskLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE_NO, new org.apache.thrift.meta_data.FieldMetaData("ruleNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_NUM, new org.apache.thrift.meta_data.FieldMetaData("lineNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_NUM, new org.apache.thrift.meta_data.FieldMetaData("columnNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RISK_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("riskDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APICheck.class, metaDataMap);
  }

  public APICheck() {
  }

  public APICheck(
    String apiName,
    String apiPackageName,
    String packageName,
    String objectName,
    String methodName,
    String statement,
    String riskType,
    String riskLevel,
    String ruleNo,
    String category,
    String description,
    int lineNum,
    int columnNum,
    String riskDescription)
  {
    this();
    this.apiName = apiName;
    this.apiPackageName = apiPackageName;
    this.packageName = packageName;
    this.objectName = objectName;
    this.methodName = methodName;
    this.statement = statement;
    this.riskType = riskType;
    this.riskLevel = riskLevel;
    this.ruleNo = ruleNo;
    this.category = category;
    this.description = description;
    this.lineNum = lineNum;
    setLineNumIsSet(true);
    this.columnNum = columnNum;
    setColumnNumIsSet(true);
    this.riskDescription = riskDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APICheck(APICheck other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApiName()) {
      this.apiName = other.apiName;
    }
    if (other.isSetApiPackageName()) {
      this.apiPackageName = other.apiPackageName;
    }
    if (other.isSetPackageName()) {
      this.packageName = other.packageName;
    }
    if (other.isSetObjectName()) {
      this.objectName = other.objectName;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    if (other.isSetRiskType()) {
      this.riskType = other.riskType;
    }
    if (other.isSetRiskLevel()) {
      this.riskLevel = other.riskLevel;
    }
    if (other.isSetRuleNo()) {
      this.ruleNo = other.ruleNo;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.lineNum = other.lineNum;
    this.columnNum = other.columnNum;
    if (other.isSetRiskDescription()) {
      this.riskDescription = other.riskDescription;
    }
  }

  public APICheck deepCopy() {
    return new APICheck(this);
  }

  @Override
  public void clear() {
    this.apiName = null;
    this.apiPackageName = null;
    this.packageName = null;
    this.objectName = null;
    this.methodName = null;
    this.statement = null;
    this.riskType = null;
    this.riskLevel = null;
    this.ruleNo = null;
    this.category = null;
    this.description = null;
    setLineNumIsSet(false);
    this.lineNum = 0;
    setColumnNumIsSet(false);
    this.columnNum = 0;
    this.riskDescription = null;
  }

  public String getApiName() {
    return this.apiName;
  }

  public APICheck setApiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  public void unsetApiName() {
    this.apiName = null;
  }

  /** Returns true if field apiName is set (has been assigned a value) and false otherwise */
  public boolean isSetApiName() {
    return this.apiName != null;
  }

  public void setApiNameIsSet(boolean value) {
    if (!value) {
      this.apiName = null;
    }
  }

  public String getApiPackageName() {
    return this.apiPackageName;
  }

  public APICheck setApiPackageName(String apiPackageName) {
    this.apiPackageName = apiPackageName;
    return this;
  }

  public void unsetApiPackageName() {
    this.apiPackageName = null;
  }

  /** Returns true if field apiPackageName is set (has been assigned a value) and false otherwise */
  public boolean isSetApiPackageName() {
    return this.apiPackageName != null;
  }

  public void setApiPackageNameIsSet(boolean value) {
    if (!value) {
      this.apiPackageName = null;
    }
  }

  public String getPackageName() {
    return this.packageName;
  }

  public APICheck setPackageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  public void unsetPackageName() {
    this.packageName = null;
  }

  /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageName() {
    return this.packageName != null;
  }

  public void setPackageNameIsSet(boolean value) {
    if (!value) {
      this.packageName = null;
    }
  }

  public String getObjectName() {
    return this.objectName;
  }

  public APICheck setObjectName(String objectName) {
    this.objectName = objectName;
    return this;
  }

  public void unsetObjectName() {
    this.objectName = null;
  }

  /** Returns true if field objectName is set (has been assigned a value) and false otherwise */
  public boolean isSetObjectName() {
    return this.objectName != null;
  }

  public void setObjectNameIsSet(boolean value) {
    if (!value) {
      this.objectName = null;
    }
  }

  public String getMethodName() {
    return this.methodName;
  }

  public APICheck setMethodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public String getStatement() {
    return this.statement;
  }

  public APICheck setStatement(String statement) {
    this.statement = statement;
    return this;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  public String getRiskType() {
    return this.riskType;
  }

  public APICheck setRiskType(String riskType) {
    this.riskType = riskType;
    return this;
  }

  public void unsetRiskType() {
    this.riskType = null;
  }

  /** Returns true if field riskType is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskType() {
    return this.riskType != null;
  }

  public void setRiskTypeIsSet(boolean value) {
    if (!value) {
      this.riskType = null;
    }
  }

  public String getRiskLevel() {
    return this.riskLevel;
  }

  public APICheck setRiskLevel(String riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

  public void unsetRiskLevel() {
    this.riskLevel = null;
  }

  /** Returns true if field riskLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskLevel() {
    return this.riskLevel != null;
  }

  public void setRiskLevelIsSet(boolean value) {
    if (!value) {
      this.riskLevel = null;
    }
  }

  public String getRuleNo() {
    return this.ruleNo;
  }

  public APICheck setRuleNo(String ruleNo) {
    this.ruleNo = ruleNo;
    return this;
  }

  public void unsetRuleNo() {
    this.ruleNo = null;
  }

  /** Returns true if field ruleNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleNo() {
    return this.ruleNo != null;
  }

  public void setRuleNoIsSet(boolean value) {
    if (!value) {
      this.ruleNo = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public APICheck setCategory(String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public APICheck setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getLineNum() {
    return this.lineNum;
  }

  public APICheck setLineNum(int lineNum) {
    this.lineNum = lineNum;
    setLineNumIsSet(true);
    return this;
  }

  public void unsetLineNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINENUM_ISSET_ID);
  }

  /** Returns true if field lineNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLineNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LINENUM_ISSET_ID);
  }

  public void setLineNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINENUM_ISSET_ID, value);
  }

  public int getColumnNum() {
    return this.columnNum;
  }

  public APICheck setColumnNum(int columnNum) {
    this.columnNum = columnNum;
    setColumnNumIsSet(true);
    return this;
  }

  public void unsetColumnNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNNUM_ISSET_ID);
  }

  /** Returns true if field columnNum is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnNum() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNNUM_ISSET_ID);
  }

  public void setColumnNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNNUM_ISSET_ID, value);
  }

  public String getRiskDescription() {
    return this.riskDescription;
  }

  public APICheck setRiskDescription(String riskDescription) {
    this.riskDescription = riskDescription;
    return this;
  }

  public void unsetRiskDescription() {
    this.riskDescription = null;
  }

  /** Returns true if field riskDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskDescription() {
    return this.riskDescription != null;
  }

  public void setRiskDescriptionIsSet(boolean value) {
    if (!value) {
      this.riskDescription = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case API_NAME:
      if (value == null) {
        unsetApiName();
      } else {
        setApiName((String)value);
      }
      break;

    case API_PACKAGE_NAME:
      if (value == null) {
        unsetApiPackageName();
      } else {
        setApiPackageName((String)value);
      }
      break;

    case PACKAGE_NAME:
      if (value == null) {
        unsetPackageName();
      } else {
        setPackageName((String)value);
      }
      break;

    case OBJECT_NAME:
      if (value == null) {
        unsetObjectName();
      } else {
        setObjectName((String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case STATEMENT:
      if (value == null) {
        unsetStatement();
      } else {
        setStatement((String)value);
      }
      break;

    case RISK_TYPE:
      if (value == null) {
        unsetRiskType();
      } else {
        setRiskType((String)value);
      }
      break;

    case RISK_LEVEL:
      if (value == null) {
        unsetRiskLevel();
      } else {
        setRiskLevel((String)value);
      }
      break;

    case RULE_NO:
      if (value == null) {
        unsetRuleNo();
      } else {
        setRuleNo((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case LINE_NUM:
      if (value == null) {
        unsetLineNum();
      } else {
        setLineNum((Integer)value);
      }
      break;

    case COLUMN_NUM:
      if (value == null) {
        unsetColumnNum();
      } else {
        setColumnNum((Integer)value);
      }
      break;

    case RISK_DESCRIPTION:
      if (value == null) {
        unsetRiskDescription();
      } else {
        setRiskDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case API_NAME:
      return getApiName();

    case API_PACKAGE_NAME:
      return getApiPackageName();

    case PACKAGE_NAME:
      return getPackageName();

    case OBJECT_NAME:
      return getObjectName();

    case METHOD_NAME:
      return getMethodName();

    case STATEMENT:
      return getStatement();

    case RISK_TYPE:
      return getRiskType();

    case RISK_LEVEL:
      return getRiskLevel();

    case RULE_NO:
      return getRuleNo();

    case CATEGORY:
      return getCategory();

    case DESCRIPTION:
      return getDescription();

    case LINE_NUM:
      return Integer.valueOf(getLineNum());

    case COLUMN_NUM:
      return Integer.valueOf(getColumnNum());

    case RISK_DESCRIPTION:
      return getRiskDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case API_NAME:
      return isSetApiName();
    case API_PACKAGE_NAME:
      return isSetApiPackageName();
    case PACKAGE_NAME:
      return isSetPackageName();
    case OBJECT_NAME:
      return isSetObjectName();
    case METHOD_NAME:
      return isSetMethodName();
    case STATEMENT:
      return isSetStatement();
    case RISK_TYPE:
      return isSetRiskType();
    case RISK_LEVEL:
      return isSetRiskLevel();
    case RULE_NO:
      return isSetRuleNo();
    case CATEGORY:
      return isSetCategory();
    case DESCRIPTION:
      return isSetDescription();
    case LINE_NUM:
      return isSetLineNum();
    case COLUMN_NUM:
      return isSetColumnNum();
    case RISK_DESCRIPTION:
      return isSetRiskDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APICheck)
      return this.equals((APICheck)that);
    return false;
  }

  public boolean equals(APICheck that) {
    if (that == null)
      return false;

    boolean this_present_apiName = true && this.isSetApiName();
    boolean that_present_apiName = true && that.isSetApiName();
    if (this_present_apiName || that_present_apiName) {
      if (!(this_present_apiName && that_present_apiName))
        return false;
      if (!this.apiName.equals(that.apiName))
        return false;
    }

    boolean this_present_apiPackageName = true && this.isSetApiPackageName();
    boolean that_present_apiPackageName = true && that.isSetApiPackageName();
    if (this_present_apiPackageName || that_present_apiPackageName) {
      if (!(this_present_apiPackageName && that_present_apiPackageName))
        return false;
      if (!this.apiPackageName.equals(that.apiPackageName))
        return false;
    }

    boolean this_present_packageName = true && this.isSetPackageName();
    boolean that_present_packageName = true && that.isSetPackageName();
    if (this_present_packageName || that_present_packageName) {
      if (!(this_present_packageName && that_present_packageName))
        return false;
      if (!this.packageName.equals(that.packageName))
        return false;
    }

    boolean this_present_objectName = true && this.isSetObjectName();
    boolean that_present_objectName = true && that.isSetObjectName();
    if (this_present_objectName || that_present_objectName) {
      if (!(this_present_objectName && that_present_objectName))
        return false;
      if (!this.objectName.equals(that.objectName))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement))
        return false;
      if (!this.statement.equals(that.statement))
        return false;
    }

    boolean this_present_riskType = true && this.isSetRiskType();
    boolean that_present_riskType = true && that.isSetRiskType();
    if (this_present_riskType || that_present_riskType) {
      if (!(this_present_riskType && that_present_riskType))
        return false;
      if (!this.riskType.equals(that.riskType))
        return false;
    }

    boolean this_present_riskLevel = true && this.isSetRiskLevel();
    boolean that_present_riskLevel = true && that.isSetRiskLevel();
    if (this_present_riskLevel || that_present_riskLevel) {
      if (!(this_present_riskLevel && that_present_riskLevel))
        return false;
      if (!this.riskLevel.equals(that.riskLevel))
        return false;
    }

    boolean this_present_ruleNo = true && this.isSetRuleNo();
    boolean that_present_ruleNo = true && that.isSetRuleNo();
    if (this_present_ruleNo || that_present_ruleNo) {
      if (!(this_present_ruleNo && that_present_ruleNo))
        return false;
      if (!this.ruleNo.equals(that.ruleNo))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_lineNum = true;
    boolean that_present_lineNum = true;
    if (this_present_lineNum || that_present_lineNum) {
      if (!(this_present_lineNum && that_present_lineNum))
        return false;
      if (this.lineNum != that.lineNum)
        return false;
    }

    boolean this_present_columnNum = true;
    boolean that_present_columnNum = true;
    if (this_present_columnNum || that_present_columnNum) {
      if (!(this_present_columnNum && that_present_columnNum))
        return false;
      if (this.columnNum != that.columnNum)
        return false;
    }

    boolean this_present_riskDescription = true && this.isSetRiskDescription();
    boolean that_present_riskDescription = true && that.isSetRiskDescription();
    if (this_present_riskDescription || that_present_riskDescription) {
      if (!(this_present_riskDescription && that_present_riskDescription))
        return false;
      if (!this.riskDescription.equals(that.riskDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(APICheck other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApiName()).compareTo(other.isSetApiName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiName, other.apiName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiPackageName()).compareTo(other.isSetApiPackageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiPackageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiPackageName, other.apiPackageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjectName()).compareTo(other.isSetObjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectName, other.objectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatement()).compareTo(other.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskType()).compareTo(other.isSetRiskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskType, other.riskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskLevel()).compareTo(other.isSetRiskLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLevel, other.riskLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuleNo()).compareTo(other.isSetRuleNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNo, other.ruleNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineNum()).compareTo(other.isSetLineNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNum, other.lineNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnNum()).compareTo(other.isSetColumnNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNum, other.columnNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskDescription()).compareTo(other.isSetRiskDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskDescription, other.riskDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APICheck(");
    boolean first = true;

    sb.append("apiName:");
    if (this.apiName == null) {
      sb.append("null");
    } else {
      sb.append(this.apiName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apiPackageName:");
    if (this.apiPackageName == null) {
      sb.append("null");
    } else {
      sb.append(this.apiPackageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageName:");
    if (this.packageName == null) {
      sb.append("null");
    } else {
      sb.append(this.packageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objectName:");
    if (this.objectName == null) {
      sb.append("null");
    } else {
      sb.append(this.objectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statement:");
    if (this.statement == null) {
      sb.append("null");
    } else {
      sb.append(this.statement);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskType:");
    if (this.riskType == null) {
      sb.append("null");
    } else {
      sb.append(this.riskType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskLevel:");
    if (this.riskLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.riskLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruleNo:");
    if (this.ruleNo == null) {
      sb.append("null");
    } else {
      sb.append(this.ruleNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineNum:");
    sb.append(this.lineNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnNum:");
    sb.append(this.columnNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskDescription:");
    if (this.riskDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.riskDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APICheckStandardSchemeFactory implements SchemeFactory {
    public APICheckStandardScheme getScheme() {
      return new APICheckStandardScheme();
    }
  }

  private static class APICheckStandardScheme extends StandardScheme<APICheck> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APICheck struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // API_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiName = iprot.readString();
              struct.setApiNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // API_PACKAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apiPackageName = iprot.readString();
              struct.setApiPackageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PACKAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packageName = iprot.readString();
              struct.setPackageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OBJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objectName = iprot.readString();
              struct.setObjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statement = iprot.readString();
              struct.setStatementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RISK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.riskType = iprot.readString();
              struct.setRiskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RISK_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.riskLevel = iprot.readString();
              struct.setRiskLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RULE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ruleNo = iprot.readString();
              struct.setRuleNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LINE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lineNum = iprot.readI32();
              struct.setLineNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLUMN_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnNum = iprot.readI32();
              struct.setColumnNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RISK_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.riskDescription = iprot.readString();
              struct.setRiskDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APICheck struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.apiName != null) {
        oprot.writeFieldBegin(API_NAME_FIELD_DESC);
        oprot.writeString(struct.apiName);
        oprot.writeFieldEnd();
      }
      if (struct.apiPackageName != null) {
        oprot.writeFieldBegin(API_PACKAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.apiPackageName);
        oprot.writeFieldEnd();
      }
      if (struct.packageName != null) {
        oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.packageName);
        oprot.writeFieldEnd();
      }
      if (struct.objectName != null) {
        oprot.writeFieldBegin(OBJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.objectName);
        oprot.writeFieldEnd();
      }
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.statement != null) {
        oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
        oprot.writeString(struct.statement);
        oprot.writeFieldEnd();
      }
      if (struct.riskType != null) {
        oprot.writeFieldBegin(RISK_TYPE_FIELD_DESC);
        oprot.writeString(struct.riskType);
        oprot.writeFieldEnd();
      }
      if (struct.riskLevel != null) {
        oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
        oprot.writeString(struct.riskLevel);
        oprot.writeFieldEnd();
      }
      if (struct.ruleNo != null) {
        oprot.writeFieldBegin(RULE_NO_FIELD_DESC);
        oprot.writeString(struct.ruleNo);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LINE_NUM_FIELD_DESC);
      oprot.writeI32(struct.lineNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLUMN_NUM_FIELD_DESC);
      oprot.writeI32(struct.columnNum);
      oprot.writeFieldEnd();
      if (struct.riskDescription != null) {
        oprot.writeFieldBegin(RISK_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.riskDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APICheckTupleSchemeFactory implements SchemeFactory {
    public APICheckTupleScheme getScheme() {
      return new APICheckTupleScheme();
    }
  }

  private static class APICheckTupleScheme extends TupleScheme<APICheck> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APICheck struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApiName()) {
        optionals.set(0);
      }
      if (struct.isSetApiPackageName()) {
        optionals.set(1);
      }
      if (struct.isSetPackageName()) {
        optionals.set(2);
      }
      if (struct.isSetObjectName()) {
        optionals.set(3);
      }
      if (struct.isSetMethodName()) {
        optionals.set(4);
      }
      if (struct.isSetStatement()) {
        optionals.set(5);
      }
      if (struct.isSetRiskType()) {
        optionals.set(6);
      }
      if (struct.isSetRiskLevel()) {
        optionals.set(7);
      }
      if (struct.isSetRuleNo()) {
        optionals.set(8);
      }
      if (struct.isSetCategory()) {
        optionals.set(9);
      }
      if (struct.isSetDescription()) {
        optionals.set(10);
      }
      if (struct.isSetLineNum()) {
        optionals.set(11);
      }
      if (struct.isSetColumnNum()) {
        optionals.set(12);
      }
      if (struct.isSetRiskDescription()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetApiName()) {
        oprot.writeString(struct.apiName);
      }
      if (struct.isSetApiPackageName()) {
        oprot.writeString(struct.apiPackageName);
      }
      if (struct.isSetPackageName()) {
        oprot.writeString(struct.packageName);
      }
      if (struct.isSetObjectName()) {
        oprot.writeString(struct.objectName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetStatement()) {
        oprot.writeString(struct.statement);
      }
      if (struct.isSetRiskType()) {
        oprot.writeString(struct.riskType);
      }
      if (struct.isSetRiskLevel()) {
        oprot.writeString(struct.riskLevel);
      }
      if (struct.isSetRuleNo()) {
        oprot.writeString(struct.ruleNo);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetLineNum()) {
        oprot.writeI32(struct.lineNum);
      }
      if (struct.isSetColumnNum()) {
        oprot.writeI32(struct.columnNum);
      }
      if (struct.isSetRiskDescription()) {
        oprot.writeString(struct.riskDescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APICheck struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.apiName = iprot.readString();
        struct.setApiNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.apiPackageName = iprot.readString();
        struct.setApiPackageNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.packageName = iprot.readString();
        struct.setPackageNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.objectName = iprot.readString();
        struct.setObjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.statement = iprot.readString();
        struct.setStatementIsSet(true);
      }
      if (incoming.get(6)) {
        struct.riskType = iprot.readString();
        struct.setRiskTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.riskLevel = iprot.readString();
        struct.setRiskLevelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ruleNo = iprot.readString();
        struct.setRuleNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(10)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lineNum = iprot.readI32();
        struct.setLineNumIsSet(true);
      }
      if (incoming.get(12)) {
        struct.columnNum = iprot.readI32();
        struct.setColumnNumIsSet(true);
      }
      if (incoming.get(13)) {
        struct.riskDescription = iprot.readString();
        struct.setRiskDescriptionIsSet(true);
      }
    }
  }

}

