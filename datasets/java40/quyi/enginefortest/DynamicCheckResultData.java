/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义动态检测结果
 * 1:string apkMD5 应用MD5值
 * 2:list<string> sensitive 敏感词组
 * 3:list<RunMonitor> autoRunMonitor 运行监视
 * 4:list<FileOperate> fileOperate 文件操作记录
 * 5:list<NetworkPacket> networkPacket 网络数据包记录
 * 6:list<SystemResources> 系统资源占用记录
 * 7:list<HardwareResources> 设备资源使用记录
 * 8:string checkEndDate 检测结束时间
 */
public class DynamicCheckResultData implements org.apache.thrift.TBase<DynamicCheckResultData, DynamicCheckResultData._Fields>, java.io.Serializable, Cloneable, Comparable<DynamicCheckResultData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DynamicCheckResultData");

  private static final org.apache.thrift.protocol.TField APK_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("apkMD5", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENSITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensitive", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField AUTO_RUN_MONITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("autoRunMonitor", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_OPERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileOperate", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NETWORK_PACKET_FIELD_DESC = new org.apache.thrift.protocol.TField("networkPacket", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SYSTEM_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("systemResources", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField HARDWARE_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("hardwareResources", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CHECK_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkEndDate", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DynamicCheckResultDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DynamicCheckResultDataTupleSchemeFactory());
  }

  public String apkMD5; // required
  public List<String> sensitive; // required
  public List<RunMonitor> autoRunMonitor; // required
  public List<FileOperate> fileOperate; // required
  public List<NetworkPacket> networkPacket; // required
  public List<SystemResources> systemResources; // required
  public List<HardwareResources> hardwareResources; // required
  public String checkEndDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APK_MD5((short)1, "apkMD5"),
    SENSITIVE((short)2, "sensitive"),
    AUTO_RUN_MONITOR((short)3, "autoRunMonitor"),
    FILE_OPERATE((short)4, "fileOperate"),
    NETWORK_PACKET((short)5, "networkPacket"),
    SYSTEM_RESOURCES((short)6, "systemResources"),
    HARDWARE_RESOURCES((short)7, "hardwareResources"),
    CHECK_END_DATE((short)8, "checkEndDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APK_MD5
          return APK_MD5;
        case 2: // SENSITIVE
          return SENSITIVE;
        case 3: // AUTO_RUN_MONITOR
          return AUTO_RUN_MONITOR;
        case 4: // FILE_OPERATE
          return FILE_OPERATE;
        case 5: // NETWORK_PACKET
          return NETWORK_PACKET;
        case 6: // SYSTEM_RESOURCES
          return SYSTEM_RESOURCES;
        case 7: // HARDWARE_RESOURCES
          return HARDWARE_RESOURCES;
        case 8: // CHECK_END_DATE
          return CHECK_END_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APK_MD5, new org.apache.thrift.meta_data.FieldMetaData("apkMD5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSITIVE, new org.apache.thrift.meta_data.FieldMetaData("sensitive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUTO_RUN_MONITOR, new org.apache.thrift.meta_data.FieldMetaData("autoRunMonitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RunMonitor.class))));
    tmpMap.put(_Fields.FILE_OPERATE, new org.apache.thrift.meta_data.FieldMetaData("fileOperate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileOperate.class))));
    tmpMap.put(_Fields.NETWORK_PACKET, new org.apache.thrift.meta_data.FieldMetaData("networkPacket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetworkPacket.class))));
    tmpMap.put(_Fields.SYSTEM_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("systemResources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemResources.class))));
    tmpMap.put(_Fields.HARDWARE_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("hardwareResources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HardwareResources.class))));
    tmpMap.put(_Fields.CHECK_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("checkEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DynamicCheckResultData.class, metaDataMap);
  }

  public DynamicCheckResultData() {
  }

  public DynamicCheckResultData(
    String apkMD5,
    List<String> sensitive,
    List<RunMonitor> autoRunMonitor,
    List<FileOperate> fileOperate,
    List<NetworkPacket> networkPacket,
    List<SystemResources> systemResources,
    List<HardwareResources> hardwareResources,
    String checkEndDate)
  {
    this();
    this.apkMD5 = apkMD5;
    this.sensitive = sensitive;
    this.autoRunMonitor = autoRunMonitor;
    this.fileOperate = fileOperate;
    this.networkPacket = networkPacket;
    this.systemResources = systemResources;
    this.hardwareResources = hardwareResources;
    this.checkEndDate = checkEndDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DynamicCheckResultData(DynamicCheckResultData other) {
    if (other.isSetApkMD5()) {
      this.apkMD5 = other.apkMD5;
    }
    if (other.isSetSensitive()) {
      List<String> __this__sensitive = new ArrayList<String>(other.sensitive);
      this.sensitive = __this__sensitive;
    }
    if (other.isSetAutoRunMonitor()) {
      List<RunMonitor> __this__autoRunMonitor = new ArrayList<RunMonitor>(other.autoRunMonitor.size());
      for (RunMonitor other_element : other.autoRunMonitor) {
        __this__autoRunMonitor.add(new RunMonitor(other_element));
      }
      this.autoRunMonitor = __this__autoRunMonitor;
    }
    if (other.isSetFileOperate()) {
      List<FileOperate> __this__fileOperate = new ArrayList<FileOperate>(other.fileOperate.size());
      for (FileOperate other_element : other.fileOperate) {
        __this__fileOperate.add(new FileOperate(other_element));
      }
      this.fileOperate = __this__fileOperate;
    }
    if (other.isSetNetworkPacket()) {
      List<NetworkPacket> __this__networkPacket = new ArrayList<NetworkPacket>(other.networkPacket.size());
      for (NetworkPacket other_element : other.networkPacket) {
        __this__networkPacket.add(new NetworkPacket(other_element));
      }
      this.networkPacket = __this__networkPacket;
    }
    if (other.isSetSystemResources()) {
      List<SystemResources> __this__systemResources = new ArrayList<SystemResources>(other.systemResources.size());
      for (SystemResources other_element : other.systemResources) {
        __this__systemResources.add(new SystemResources(other_element));
      }
      this.systemResources = __this__systemResources;
    }
    if (other.isSetHardwareResources()) {
      List<HardwareResources> __this__hardwareResources = new ArrayList<HardwareResources>(other.hardwareResources.size());
      for (HardwareResources other_element : other.hardwareResources) {
        __this__hardwareResources.add(new HardwareResources(other_element));
      }
      this.hardwareResources = __this__hardwareResources;
    }
    if (other.isSetCheckEndDate()) {
      this.checkEndDate = other.checkEndDate;
    }
  }

  public DynamicCheckResultData deepCopy() {
    return new DynamicCheckResultData(this);
  }

  @Override
  public void clear() {
    this.apkMD5 = null;
    this.sensitive = null;
    this.autoRunMonitor = null;
    this.fileOperate = null;
    this.networkPacket = null;
    this.systemResources = null;
    this.hardwareResources = null;
    this.checkEndDate = null;
  }

  public String getApkMD5() {
    return this.apkMD5;
  }

  public DynamicCheckResultData setApkMD5(String apkMD5) {
    this.apkMD5 = apkMD5;
    return this;
  }

  public void unsetApkMD5() {
    this.apkMD5 = null;
  }

  /** Returns true if field apkMD5 is set (has been assigned a value) and false otherwise */
  public boolean isSetApkMD5() {
    return this.apkMD5 != null;
  }

  public void setApkMD5IsSet(boolean value) {
    if (!value) {
      this.apkMD5 = null;
    }
  }

  public int getSensitiveSize() {
    return (this.sensitive == null) ? 0 : this.sensitive.size();
  }

  public java.util.Iterator<String> getSensitiveIterator() {
    return (this.sensitive == null) ? null : this.sensitive.iterator();
  }

  public void addToSensitive(String elem) {
    if (this.sensitive == null) {
      this.sensitive = new ArrayList<String>();
    }
    this.sensitive.add(elem);
  }

  public List<String> getSensitive() {
    return this.sensitive;
  }

  public DynamicCheckResultData setSensitive(List<String> sensitive) {
    this.sensitive = sensitive;
    return this;
  }

  public void unsetSensitive() {
    this.sensitive = null;
  }

  /** Returns true if field sensitive is set (has been assigned a value) and false otherwise */
  public boolean isSetSensitive() {
    return this.sensitive != null;
  }

  public void setSensitiveIsSet(boolean value) {
    if (!value) {
      this.sensitive = null;
    }
  }

  public int getAutoRunMonitorSize() {
    return (this.autoRunMonitor == null) ? 0 : this.autoRunMonitor.size();
  }

  public java.util.Iterator<RunMonitor> getAutoRunMonitorIterator() {
    return (this.autoRunMonitor == null) ? null : this.autoRunMonitor.iterator();
  }

  public void addToAutoRunMonitor(RunMonitor elem) {
    if (this.autoRunMonitor == null) {
      this.autoRunMonitor = new ArrayList<RunMonitor>();
    }
    this.autoRunMonitor.add(elem);
  }

  public List<RunMonitor> getAutoRunMonitor() {
    return this.autoRunMonitor;
  }

  public DynamicCheckResultData setAutoRunMonitor(List<RunMonitor> autoRunMonitor) {
    this.autoRunMonitor = autoRunMonitor;
    return this;
  }

  public void unsetAutoRunMonitor() {
    this.autoRunMonitor = null;
  }

  /** Returns true if field autoRunMonitor is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoRunMonitor() {
    return this.autoRunMonitor != null;
  }

  public void setAutoRunMonitorIsSet(boolean value) {
    if (!value) {
      this.autoRunMonitor = null;
    }
  }

  public int getFileOperateSize() {
    return (this.fileOperate == null) ? 0 : this.fileOperate.size();
  }

  public java.util.Iterator<FileOperate> getFileOperateIterator() {
    return (this.fileOperate == null) ? null : this.fileOperate.iterator();
  }

  public void addToFileOperate(FileOperate elem) {
    if (this.fileOperate == null) {
      this.fileOperate = new ArrayList<FileOperate>();
    }
    this.fileOperate.add(elem);
  }

  public List<FileOperate> getFileOperate() {
    return this.fileOperate;
  }

  public DynamicCheckResultData setFileOperate(List<FileOperate> fileOperate) {
    this.fileOperate = fileOperate;
    return this;
  }

  public void unsetFileOperate() {
    this.fileOperate = null;
  }

  /** Returns true if field fileOperate is set (has been assigned a value) and false otherwise */
  public boolean isSetFileOperate() {
    return this.fileOperate != null;
  }

  public void setFileOperateIsSet(boolean value) {
    if (!value) {
      this.fileOperate = null;
    }
  }

  public int getNetworkPacketSize() {
    return (this.networkPacket == null) ? 0 : this.networkPacket.size();
  }

  public java.util.Iterator<NetworkPacket> getNetworkPacketIterator() {
    return (this.networkPacket == null) ? null : this.networkPacket.iterator();
  }

  public void addToNetworkPacket(NetworkPacket elem) {
    if (this.networkPacket == null) {
      this.networkPacket = new ArrayList<NetworkPacket>();
    }
    this.networkPacket.add(elem);
  }

  public List<NetworkPacket> getNetworkPacket() {
    return this.networkPacket;
  }

  public DynamicCheckResultData setNetworkPacket(List<NetworkPacket> networkPacket) {
    this.networkPacket = networkPacket;
    return this;
  }

  public void unsetNetworkPacket() {
    this.networkPacket = null;
  }

  /** Returns true if field networkPacket is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkPacket() {
    return this.networkPacket != null;
  }

  public void setNetworkPacketIsSet(boolean value) {
    if (!value) {
      this.networkPacket = null;
    }
  }

  public int getSystemResourcesSize() {
    return (this.systemResources == null) ? 0 : this.systemResources.size();
  }

  public java.util.Iterator<SystemResources> getSystemResourcesIterator() {
    return (this.systemResources == null) ? null : this.systemResources.iterator();
  }

  public void addToSystemResources(SystemResources elem) {
    if (this.systemResources == null) {
      this.systemResources = new ArrayList<SystemResources>();
    }
    this.systemResources.add(elem);
  }

  public List<SystemResources> getSystemResources() {
    return this.systemResources;
  }

  public DynamicCheckResultData setSystemResources(List<SystemResources> systemResources) {
    this.systemResources = systemResources;
    return this;
  }

  public void unsetSystemResources() {
    this.systemResources = null;
  }

  /** Returns true if field systemResources is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemResources() {
    return this.systemResources != null;
  }

  public void setSystemResourcesIsSet(boolean value) {
    if (!value) {
      this.systemResources = null;
    }
  }

  public int getHardwareResourcesSize() {
    return (this.hardwareResources == null) ? 0 : this.hardwareResources.size();
  }

  public java.util.Iterator<HardwareResources> getHardwareResourcesIterator() {
    return (this.hardwareResources == null) ? null : this.hardwareResources.iterator();
  }

  public void addToHardwareResources(HardwareResources elem) {
    if (this.hardwareResources == null) {
      this.hardwareResources = new ArrayList<HardwareResources>();
    }
    this.hardwareResources.add(elem);
  }

  public List<HardwareResources> getHardwareResources() {
    return this.hardwareResources;
  }

  public DynamicCheckResultData setHardwareResources(List<HardwareResources> hardwareResources) {
    this.hardwareResources = hardwareResources;
    return this;
  }

  public void unsetHardwareResources() {
    this.hardwareResources = null;
  }

  /** Returns true if field hardwareResources is set (has been assigned a value) and false otherwise */
  public boolean isSetHardwareResources() {
    return this.hardwareResources != null;
  }

  public void setHardwareResourcesIsSet(boolean value) {
    if (!value) {
      this.hardwareResources = null;
    }
  }

  public String getCheckEndDate() {
    return this.checkEndDate;
  }

  public DynamicCheckResultData setCheckEndDate(String checkEndDate) {
    this.checkEndDate = checkEndDate;
    return this;
  }

  public void unsetCheckEndDate() {
    this.checkEndDate = null;
  }

  /** Returns true if field checkEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckEndDate() {
    return this.checkEndDate != null;
  }

  public void setCheckEndDateIsSet(boolean value) {
    if (!value) {
      this.checkEndDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APK_MD5:
      if (value == null) {
        unsetApkMD5();
      } else {
        setApkMD5((String)value);
      }
      break;

    case SENSITIVE:
      if (value == null) {
        unsetSensitive();
      } else {
        setSensitive((List<String>)value);
      }
      break;

    case AUTO_RUN_MONITOR:
      if (value == null) {
        unsetAutoRunMonitor();
      } else {
        setAutoRunMonitor((List<RunMonitor>)value);
      }
      break;

    case FILE_OPERATE:
      if (value == null) {
        unsetFileOperate();
      } else {
        setFileOperate((List<FileOperate>)value);
      }
      break;

    case NETWORK_PACKET:
      if (value == null) {
        unsetNetworkPacket();
      } else {
        setNetworkPacket((List<NetworkPacket>)value);
      }
      break;

    case SYSTEM_RESOURCES:
      if (value == null) {
        unsetSystemResources();
      } else {
        setSystemResources((List<SystemResources>)value);
      }
      break;

    case HARDWARE_RESOURCES:
      if (value == null) {
        unsetHardwareResources();
      } else {
        setHardwareResources((List<HardwareResources>)value);
      }
      break;

    case CHECK_END_DATE:
      if (value == null) {
        unsetCheckEndDate();
      } else {
        setCheckEndDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APK_MD5:
      return getApkMD5();

    case SENSITIVE:
      return getSensitive();

    case AUTO_RUN_MONITOR:
      return getAutoRunMonitor();

    case FILE_OPERATE:
      return getFileOperate();

    case NETWORK_PACKET:
      return getNetworkPacket();

    case SYSTEM_RESOURCES:
      return getSystemResources();

    case HARDWARE_RESOURCES:
      return getHardwareResources();

    case CHECK_END_DATE:
      return getCheckEndDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APK_MD5:
      return isSetApkMD5();
    case SENSITIVE:
      return isSetSensitive();
    case AUTO_RUN_MONITOR:
      return isSetAutoRunMonitor();
    case FILE_OPERATE:
      return isSetFileOperate();
    case NETWORK_PACKET:
      return isSetNetworkPacket();
    case SYSTEM_RESOURCES:
      return isSetSystemResources();
    case HARDWARE_RESOURCES:
      return isSetHardwareResources();
    case CHECK_END_DATE:
      return isSetCheckEndDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DynamicCheckResultData)
      return this.equals((DynamicCheckResultData)that);
    return false;
  }

  public boolean equals(DynamicCheckResultData that) {
    if (that == null)
      return false;

    boolean this_present_apkMD5 = true && this.isSetApkMD5();
    boolean that_present_apkMD5 = true && that.isSetApkMD5();
    if (this_present_apkMD5 || that_present_apkMD5) {
      if (!(this_present_apkMD5 && that_present_apkMD5))
        return false;
      if (!this.apkMD5.equals(that.apkMD5))
        return false;
    }

    boolean this_present_sensitive = true && this.isSetSensitive();
    boolean that_present_sensitive = true && that.isSetSensitive();
    if (this_present_sensitive || that_present_sensitive) {
      if (!(this_present_sensitive && that_present_sensitive))
        return false;
      if (!this.sensitive.equals(that.sensitive))
        return false;
    }

    boolean this_present_autoRunMonitor = true && this.isSetAutoRunMonitor();
    boolean that_present_autoRunMonitor = true && that.isSetAutoRunMonitor();
    if (this_present_autoRunMonitor || that_present_autoRunMonitor) {
      if (!(this_present_autoRunMonitor && that_present_autoRunMonitor))
        return false;
      if (!this.autoRunMonitor.equals(that.autoRunMonitor))
        return false;
    }

    boolean this_present_fileOperate = true && this.isSetFileOperate();
    boolean that_present_fileOperate = true && that.isSetFileOperate();
    if (this_present_fileOperate || that_present_fileOperate) {
      if (!(this_present_fileOperate && that_present_fileOperate))
        return false;
      if (!this.fileOperate.equals(that.fileOperate))
        return false;
    }

    boolean this_present_networkPacket = true && this.isSetNetworkPacket();
    boolean that_present_networkPacket = true && that.isSetNetworkPacket();
    if (this_present_networkPacket || that_present_networkPacket) {
      if (!(this_present_networkPacket && that_present_networkPacket))
        return false;
      if (!this.networkPacket.equals(that.networkPacket))
        return false;
    }

    boolean this_present_systemResources = true && this.isSetSystemResources();
    boolean that_present_systemResources = true && that.isSetSystemResources();
    if (this_present_systemResources || that_present_systemResources) {
      if (!(this_present_systemResources && that_present_systemResources))
        return false;
      if (!this.systemResources.equals(that.systemResources))
        return false;
    }

    boolean this_present_hardwareResources = true && this.isSetHardwareResources();
    boolean that_present_hardwareResources = true && that.isSetHardwareResources();
    if (this_present_hardwareResources || that_present_hardwareResources) {
      if (!(this_present_hardwareResources && that_present_hardwareResources))
        return false;
      if (!this.hardwareResources.equals(that.hardwareResources))
        return false;
    }

    boolean this_present_checkEndDate = true && this.isSetCheckEndDate();
    boolean that_present_checkEndDate = true && that.isSetCheckEndDate();
    if (this_present_checkEndDate || that_present_checkEndDate) {
      if (!(this_present_checkEndDate && that_present_checkEndDate))
        return false;
      if (!this.checkEndDate.equals(that.checkEndDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DynamicCheckResultData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApkMD5()).compareTo(other.isSetApkMD5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApkMD5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkMD5, other.apkMD5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensitive()).compareTo(other.isSetSensitive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensitive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensitive, other.sensitive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoRunMonitor()).compareTo(other.isSetAutoRunMonitor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoRunMonitor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoRunMonitor, other.autoRunMonitor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileOperate()).compareTo(other.isSetFileOperate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileOperate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOperate, other.fileOperate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkPacket()).compareTo(other.isSetNetworkPacket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkPacket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkPacket, other.networkPacket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemResources()).compareTo(other.isSetSystemResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemResources, other.systemResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHardwareResources()).compareTo(other.isSetHardwareResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHardwareResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hardwareResources, other.hardwareResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckEndDate()).compareTo(other.isSetCheckEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkEndDate, other.checkEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DynamicCheckResultData(");
    boolean first = true;

    sb.append("apkMD5:");
    if (this.apkMD5 == null) {
      sb.append("null");
    } else {
      sb.append(this.apkMD5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensitive:");
    if (this.sensitive == null) {
      sb.append("null");
    } else {
      sb.append(this.sensitive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoRunMonitor:");
    if (this.autoRunMonitor == null) {
      sb.append("null");
    } else {
      sb.append(this.autoRunMonitor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileOperate:");
    if (this.fileOperate == null) {
      sb.append("null");
    } else {
      sb.append(this.fileOperate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("networkPacket:");
    if (this.networkPacket == null) {
      sb.append("null");
    } else {
      sb.append(this.networkPacket);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemResources:");
    if (this.systemResources == null) {
      sb.append("null");
    } else {
      sb.append(this.systemResources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hardwareResources:");
    if (this.hardwareResources == null) {
      sb.append("null");
    } else {
      sb.append(this.hardwareResources);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkEndDate:");
    if (this.checkEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.checkEndDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DynamicCheckResultDataStandardSchemeFactory implements SchemeFactory {
    public DynamicCheckResultDataStandardScheme getScheme() {
      return new DynamicCheckResultDataStandardScheme();
    }
  }

  private static class DynamicCheckResultDataStandardScheme extends StandardScheme<DynamicCheckResultData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DynamicCheckResultData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APK_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apkMD5 = iprot.readString();
              struct.setApkMD5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENSITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.sensitive = new ArrayList<String>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  String _elem34;
                  _elem34 = iprot.readString();
                  struct.sensitive.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setSensitiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTO_RUN_MONITOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.autoRunMonitor = new ArrayList<RunMonitor>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  RunMonitor _elem37;
                  _elem37 = new RunMonitor();
                  _elem37.read(iprot);
                  struct.autoRunMonitor.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setAutoRunMonitorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_OPERATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.fileOperate = new ArrayList<FileOperate>(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  FileOperate _elem40;
                  _elem40 = new FileOperate();
                  _elem40.read(iprot);
                  struct.fileOperate.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setFileOperateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NETWORK_PACKET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.networkPacket = new ArrayList<NetworkPacket>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  NetworkPacket _elem43;
                  _elem43 = new NetworkPacket();
                  _elem43.read(iprot);
                  struct.networkPacket.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setNetworkPacketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYSTEM_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.systemResources = new ArrayList<SystemResources>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  SystemResources _elem46;
                  _elem46 = new SystemResources();
                  _elem46.read(iprot);
                  struct.systemResources.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setSystemResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HARDWARE_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.hardwareResources = new ArrayList<HardwareResources>(_list47.size);
                for (int _i48 = 0; _i48 < _list47.size; ++_i48)
                {
                  HardwareResources _elem49;
                  _elem49 = new HardwareResources();
                  _elem49.read(iprot);
                  struct.hardwareResources.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setHardwareResourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHECK_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkEndDate = iprot.readString();
              struct.setCheckEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DynamicCheckResultData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.apkMD5 != null) {
        oprot.writeFieldBegin(APK_MD5_FIELD_DESC);
        oprot.writeString(struct.apkMD5);
        oprot.writeFieldEnd();
      }
      if (struct.sensitive != null) {
        oprot.writeFieldBegin(SENSITIVE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sensitive.size()));
          for (String _iter50 : struct.sensitive)
          {
            oprot.writeString(_iter50);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.autoRunMonitor != null) {
        oprot.writeFieldBegin(AUTO_RUN_MONITOR_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.autoRunMonitor.size()));
          for (RunMonitor _iter51 : struct.autoRunMonitor)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fileOperate != null) {
        oprot.writeFieldBegin(FILE_OPERATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fileOperate.size()));
          for (FileOperate _iter52 : struct.fileOperate)
          {
            _iter52.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.networkPacket != null) {
        oprot.writeFieldBegin(NETWORK_PACKET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.networkPacket.size()));
          for (NetworkPacket _iter53 : struct.networkPacket)
          {
            _iter53.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.systemResources != null) {
        oprot.writeFieldBegin(SYSTEM_RESOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.systemResources.size()));
          for (SystemResources _iter54 : struct.systemResources)
          {
            _iter54.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.hardwareResources != null) {
        oprot.writeFieldBegin(HARDWARE_RESOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hardwareResources.size()));
          for (HardwareResources _iter55 : struct.hardwareResources)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.checkEndDate != null) {
        oprot.writeFieldBegin(CHECK_END_DATE_FIELD_DESC);
        oprot.writeString(struct.checkEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DynamicCheckResultDataTupleSchemeFactory implements SchemeFactory {
    public DynamicCheckResultDataTupleScheme getScheme() {
      return new DynamicCheckResultDataTupleScheme();
    }
  }

  private static class DynamicCheckResultDataTupleScheme extends TupleScheme<DynamicCheckResultData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DynamicCheckResultData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApkMD5()) {
        optionals.set(0);
      }
      if (struct.isSetSensitive()) {
        optionals.set(1);
      }
      if (struct.isSetAutoRunMonitor()) {
        optionals.set(2);
      }
      if (struct.isSetFileOperate()) {
        optionals.set(3);
      }
      if (struct.isSetNetworkPacket()) {
        optionals.set(4);
      }
      if (struct.isSetSystemResources()) {
        optionals.set(5);
      }
      if (struct.isSetHardwareResources()) {
        optionals.set(6);
      }
      if (struct.isSetCheckEndDate()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetApkMD5()) {
        oprot.writeString(struct.apkMD5);
      }
      if (struct.isSetSensitive()) {
        {
          oprot.writeI32(struct.sensitive.size());
          for (String _iter56 : struct.sensitive)
          {
            oprot.writeString(_iter56);
          }
        }
      }
      if (struct.isSetAutoRunMonitor()) {
        {
          oprot.writeI32(struct.autoRunMonitor.size());
          for (RunMonitor _iter57 : struct.autoRunMonitor)
          {
            _iter57.write(oprot);
          }
        }
      }
      if (struct.isSetFileOperate()) {
        {
          oprot.writeI32(struct.fileOperate.size());
          for (FileOperate _iter58 : struct.fileOperate)
          {
            _iter58.write(oprot);
          }
        }
      }
      if (struct.isSetNetworkPacket()) {
        {
          oprot.writeI32(struct.networkPacket.size());
          for (NetworkPacket _iter59 : struct.networkPacket)
          {
            _iter59.write(oprot);
          }
        }
      }
      if (struct.isSetSystemResources()) {
        {
          oprot.writeI32(struct.systemResources.size());
          for (SystemResources _iter60 : struct.systemResources)
          {
            _iter60.write(oprot);
          }
        }
      }
      if (struct.isSetHardwareResources()) {
        {
          oprot.writeI32(struct.hardwareResources.size());
          for (HardwareResources _iter61 : struct.hardwareResources)
          {
            _iter61.write(oprot);
          }
        }
      }
      if (struct.isSetCheckEndDate()) {
        oprot.writeString(struct.checkEndDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DynamicCheckResultData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.apkMD5 = iprot.readString();
        struct.setApkMD5IsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sensitive = new ArrayList<String>(_list62.size);
          for (int _i63 = 0; _i63 < _list62.size; ++_i63)
          {
            String _elem64;
            _elem64 = iprot.readString();
            struct.sensitive.add(_elem64);
          }
        }
        struct.setSensitiveIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.autoRunMonitor = new ArrayList<RunMonitor>(_list65.size);
          for (int _i66 = 0; _i66 < _list65.size; ++_i66)
          {
            RunMonitor _elem67;
            _elem67 = new RunMonitor();
            _elem67.read(iprot);
            struct.autoRunMonitor.add(_elem67);
          }
        }
        struct.setAutoRunMonitorIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fileOperate = new ArrayList<FileOperate>(_list68.size);
          for (int _i69 = 0; _i69 < _list68.size; ++_i69)
          {
            FileOperate _elem70;
            _elem70 = new FileOperate();
            _elem70.read(iprot);
            struct.fileOperate.add(_elem70);
          }
        }
        struct.setFileOperateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.networkPacket = new ArrayList<NetworkPacket>(_list71.size);
          for (int _i72 = 0; _i72 < _list71.size; ++_i72)
          {
            NetworkPacket _elem73;
            _elem73 = new NetworkPacket();
            _elem73.read(iprot);
            struct.networkPacket.add(_elem73);
          }
        }
        struct.setNetworkPacketIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.systemResources = new ArrayList<SystemResources>(_list74.size);
          for (int _i75 = 0; _i75 < _list74.size; ++_i75)
          {
            SystemResources _elem76;
            _elem76 = new SystemResources();
            _elem76.read(iprot);
            struct.systemResources.add(_elem76);
          }
        }
        struct.setSystemResourcesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hardwareResources = new ArrayList<HardwareResources>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            HardwareResources _elem79;
            _elem79 = new HardwareResources();
            _elem79.read(iprot);
            struct.hardwareResources.add(_elem79);
          }
        }
        struct.setHardwareResourcesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.checkEndDate = iprot.readString();
        struct.setCheckEndDateIsSet(true);
      }
    }
  }

}

