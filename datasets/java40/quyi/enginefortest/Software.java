/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.engine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 1:string osArch os架构
 * 2:string osName os名称
 * 3:string osDesc os描述
 * 4:string osVersion os版本
 * 5:string jvmName jvm名称
 * 6:string jvmVersion jvm版本
 * 7:string jvmMaxMem jvm最大版本
 */
public class Software implements org.apache.thrift.TBase<Software, Software._Fields>, java.io.Serializable, Cloneable, Comparable<Software> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Software");

  private static final org.apache.thrift.protocol.TField OS_ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("osArch", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("osName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("osDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField JVM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField JVM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmVersion", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField JVM_MAX_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMaxMem", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SoftwareStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SoftwareTupleSchemeFactory());
  }

  public String osArch; // required
  public String osName; // required
  public String osDesc; // required
  public String osVersion; // required
  public String jvmName; // required
  public String jvmVersion; // required
  public String jvmMaxMem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OS_ARCH((short)1, "osArch"),
    OS_NAME((short)2, "osName"),
    OS_DESC((short)3, "osDesc"),
    OS_VERSION((short)4, "osVersion"),
    JVM_NAME((short)5, "jvmName"),
    JVM_VERSION((short)6, "jvmVersion"),
    JVM_MAX_MEM((short)7, "jvmMaxMem");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OS_ARCH
          return OS_ARCH;
        case 2: // OS_NAME
          return OS_NAME;
        case 3: // OS_DESC
          return OS_DESC;
        case 4: // OS_VERSION
          return OS_VERSION;
        case 5: // JVM_NAME
          return JVM_NAME;
        case 6: // JVM_VERSION
          return JVM_VERSION;
        case 7: // JVM_MAX_MEM
          return JVM_MAX_MEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OS_ARCH, new org.apache.thrift.meta_data.FieldMetaData("osArch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_NAME, new org.apache.thrift.meta_data.FieldMetaData("osName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_DESC, new org.apache.thrift.meta_data.FieldMetaData("osDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_NAME, new org.apache.thrift.meta_data.FieldMetaData("jvmName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jvmVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_MAX_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmMaxMem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Software.class, metaDataMap);
  }

  public Software() {
  }

  public Software(
    String osArch,
    String osName,
    String osDesc,
    String osVersion,
    String jvmName,
    String jvmVersion,
    String jvmMaxMem)
  {
    this();
    this.osArch = osArch;
    this.osName = osName;
    this.osDesc = osDesc;
    this.osVersion = osVersion;
    this.jvmName = jvmName;
    this.jvmVersion = jvmVersion;
    this.jvmMaxMem = jvmMaxMem;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Software(Software other) {
    if (other.isSetOsArch()) {
      this.osArch = other.osArch;
    }
    if (other.isSetOsName()) {
      this.osName = other.osName;
    }
    if (other.isSetOsDesc()) {
      this.osDesc = other.osDesc;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetJvmName()) {
      this.jvmName = other.jvmName;
    }
    if (other.isSetJvmVersion()) {
      this.jvmVersion = other.jvmVersion;
    }
    if (other.isSetJvmMaxMem()) {
      this.jvmMaxMem = other.jvmMaxMem;
    }
  }

  public Software deepCopy() {
    return new Software(this);
  }

  @Override
  public void clear() {
    this.osArch = null;
    this.osName = null;
    this.osDesc = null;
    this.osVersion = null;
    this.jvmName = null;
    this.jvmVersion = null;
    this.jvmMaxMem = null;
  }

  public String getOsArch() {
    return this.osArch;
  }

  public Software setOsArch(String osArch) {
    this.osArch = osArch;
    return this;
  }

  public void unsetOsArch() {
    this.osArch = null;
  }

  /** Returns true if field osArch is set (has been assigned a value) and false otherwise */
  public boolean isSetOsArch() {
    return this.osArch != null;
  }

  public void setOsArchIsSet(boolean value) {
    if (!value) {
      this.osArch = null;
    }
  }

  public String getOsName() {
    return this.osName;
  }

  public Software setOsName(String osName) {
    this.osName = osName;
    return this;
  }

  public void unsetOsName() {
    this.osName = null;
  }

  /** Returns true if field osName is set (has been assigned a value) and false otherwise */
  public boolean isSetOsName() {
    return this.osName != null;
  }

  public void setOsNameIsSet(boolean value) {
    if (!value) {
      this.osName = null;
    }
  }

  public String getOsDesc() {
    return this.osDesc;
  }

  public Software setOsDesc(String osDesc) {
    this.osDesc = osDesc;
    return this;
  }

  public void unsetOsDesc() {
    this.osDesc = null;
  }

  /** Returns true if field osDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetOsDesc() {
    return this.osDesc != null;
  }

  public void setOsDescIsSet(boolean value) {
    if (!value) {
      this.osDesc = null;
    }
  }

  public String getOsVersion() {
    return this.osVersion;
  }

  public Software setOsVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public String getJvmName() {
    return this.jvmName;
  }

  public Software setJvmName(String jvmName) {
    this.jvmName = jvmName;
    return this;
  }

  public void unsetJvmName() {
    this.jvmName = null;
  }

  /** Returns true if field jvmName is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmName() {
    return this.jvmName != null;
  }

  public void setJvmNameIsSet(boolean value) {
    if (!value) {
      this.jvmName = null;
    }
  }

  public String getJvmVersion() {
    return this.jvmVersion;
  }

  public Software setJvmVersion(String jvmVersion) {
    this.jvmVersion = jvmVersion;
    return this;
  }

  public void unsetJvmVersion() {
    this.jvmVersion = null;
  }

  /** Returns true if field jvmVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmVersion() {
    return this.jvmVersion != null;
  }

  public void setJvmVersionIsSet(boolean value) {
    if (!value) {
      this.jvmVersion = null;
    }
  }

  public String getJvmMaxMem() {
    return this.jvmMaxMem;
  }

  public Software setJvmMaxMem(String jvmMaxMem) {
    this.jvmMaxMem = jvmMaxMem;
    return this;
  }

  public void unsetJvmMaxMem() {
    this.jvmMaxMem = null;
  }

  /** Returns true if field jvmMaxMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMaxMem() {
    return this.jvmMaxMem != null;
  }

  public void setJvmMaxMemIsSet(boolean value) {
    if (!value) {
      this.jvmMaxMem = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OS_ARCH:
      if (value == null) {
        unsetOsArch();
      } else {
        setOsArch((String)value);
      }
      break;

    case OS_NAME:
      if (value == null) {
        unsetOsName();
      } else {
        setOsName((String)value);
      }
      break;

    case OS_DESC:
      if (value == null) {
        unsetOsDesc();
      } else {
        setOsDesc((String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((String)value);
      }
      break;

    case JVM_NAME:
      if (value == null) {
        unsetJvmName();
      } else {
        setJvmName((String)value);
      }
      break;

    case JVM_VERSION:
      if (value == null) {
        unsetJvmVersion();
      } else {
        setJvmVersion((String)value);
      }
      break;

    case JVM_MAX_MEM:
      if (value == null) {
        unsetJvmMaxMem();
      } else {
        setJvmMaxMem((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OS_ARCH:
      return getOsArch();

    case OS_NAME:
      return getOsName();

    case OS_DESC:
      return getOsDesc();

    case OS_VERSION:
      return getOsVersion();

    case JVM_NAME:
      return getJvmName();

    case JVM_VERSION:
      return getJvmVersion();

    case JVM_MAX_MEM:
      return getJvmMaxMem();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OS_ARCH:
      return isSetOsArch();
    case OS_NAME:
      return isSetOsName();
    case OS_DESC:
      return isSetOsDesc();
    case OS_VERSION:
      return isSetOsVersion();
    case JVM_NAME:
      return isSetJvmName();
    case JVM_VERSION:
      return isSetJvmVersion();
    case JVM_MAX_MEM:
      return isSetJvmMaxMem();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Software)
      return this.equals((Software)that);
    return false;
  }

  public boolean equals(Software that) {
    if (that == null)
      return false;

    boolean this_present_osArch = true && this.isSetOsArch();
    boolean that_present_osArch = true && that.isSetOsArch();
    if (this_present_osArch || that_present_osArch) {
      if (!(this_present_osArch && that_present_osArch))
        return false;
      if (!this.osArch.equals(that.osArch))
        return false;
    }

    boolean this_present_osName = true && this.isSetOsName();
    boolean that_present_osName = true && that.isSetOsName();
    if (this_present_osName || that_present_osName) {
      if (!(this_present_osName && that_present_osName))
        return false;
      if (!this.osName.equals(that.osName))
        return false;
    }

    boolean this_present_osDesc = true && this.isSetOsDesc();
    boolean that_present_osDesc = true && that.isSetOsDesc();
    if (this_present_osDesc || that_present_osDesc) {
      if (!(this_present_osDesc && that_present_osDesc))
        return false;
      if (!this.osDesc.equals(that.osDesc))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_jvmName = true && this.isSetJvmName();
    boolean that_present_jvmName = true && that.isSetJvmName();
    if (this_present_jvmName || that_present_jvmName) {
      if (!(this_present_jvmName && that_present_jvmName))
        return false;
      if (!this.jvmName.equals(that.jvmName))
        return false;
    }

    boolean this_present_jvmVersion = true && this.isSetJvmVersion();
    boolean that_present_jvmVersion = true && that.isSetJvmVersion();
    if (this_present_jvmVersion || that_present_jvmVersion) {
      if (!(this_present_jvmVersion && that_present_jvmVersion))
        return false;
      if (!this.jvmVersion.equals(that.jvmVersion))
        return false;
    }

    boolean this_present_jvmMaxMem = true && this.isSetJvmMaxMem();
    boolean that_present_jvmMaxMem = true && that.isSetJvmMaxMem();
    if (this_present_jvmMaxMem || that_present_jvmMaxMem) {
      if (!(this_present_jvmMaxMem && that_present_jvmMaxMem))
        return false;
      if (!this.jvmMaxMem.equals(that.jvmMaxMem))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Software other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOsArch()).compareTo(other.isSetOsArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osArch, other.osArch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsName()).compareTo(other.isSetOsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osName, other.osName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsDesc()).compareTo(other.isSetOsDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osDesc, other.osDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsVersion()).compareTo(other.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, other.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmName()).compareTo(other.isSetJvmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmName, other.jvmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmVersion()).compareTo(other.isSetJvmVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmVersion, other.jvmVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJvmMaxMem()).compareTo(other.isSetJvmMaxMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMaxMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMaxMem, other.jvmMaxMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Software(");
    boolean first = true;

    sb.append("osArch:");
    if (this.osArch == null) {
      sb.append("null");
    } else {
      sb.append(this.osArch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osName:");
    if (this.osName == null) {
      sb.append("null");
    } else {
      sb.append(this.osName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osDesc:");
    if (this.osDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.osDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmName:");
    if (this.jvmName == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmVersion:");
    if (this.jvmVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMaxMem:");
    if (this.jvmMaxMem == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmMaxMem);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SoftwareStandardSchemeFactory implements SchemeFactory {
    public SoftwareStandardScheme getScheme() {
      return new SoftwareStandardScheme();
    }
  }

  private static class SoftwareStandardScheme extends StandardScheme<Software> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Software struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OS_ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osArch = iprot.readString();
              struct.setOsArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osName = iprot.readString();
              struct.setOsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osDesc = iprot.readString();
              struct.setOsDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JVM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmName = iprot.readString();
              struct.setJvmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JVM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmVersion = iprot.readString();
              struct.setJvmVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JVM_MAX_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmMaxMem = iprot.readString();
              struct.setJvmMaxMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Software struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.osArch != null) {
        oprot.writeFieldBegin(OS_ARCH_FIELD_DESC);
        oprot.writeString(struct.osArch);
        oprot.writeFieldEnd();
      }
      if (struct.osName != null) {
        oprot.writeFieldBegin(OS_NAME_FIELD_DESC);
        oprot.writeString(struct.osName);
        oprot.writeFieldEnd();
      }
      if (struct.osDesc != null) {
        oprot.writeFieldBegin(OS_DESC_FIELD_DESC);
        oprot.writeString(struct.osDesc);
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.jvmName != null) {
        oprot.writeFieldBegin(JVM_NAME_FIELD_DESC);
        oprot.writeString(struct.jvmName);
        oprot.writeFieldEnd();
      }
      if (struct.jvmVersion != null) {
        oprot.writeFieldBegin(JVM_VERSION_FIELD_DESC);
        oprot.writeString(struct.jvmVersion);
        oprot.writeFieldEnd();
      }
      if (struct.jvmMaxMem != null) {
        oprot.writeFieldBegin(JVM_MAX_MEM_FIELD_DESC);
        oprot.writeString(struct.jvmMaxMem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SoftwareTupleSchemeFactory implements SchemeFactory {
    public SoftwareTupleScheme getScheme() {
      return new SoftwareTupleScheme();
    }
  }

  private static class SoftwareTupleScheme extends TupleScheme<Software> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Software struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOsArch()) {
        optionals.set(0);
      }
      if (struct.isSetOsName()) {
        optionals.set(1);
      }
      if (struct.isSetOsDesc()) {
        optionals.set(2);
      }
      if (struct.isSetOsVersion()) {
        optionals.set(3);
      }
      if (struct.isSetJvmName()) {
        optionals.set(4);
      }
      if (struct.isSetJvmVersion()) {
        optionals.set(5);
      }
      if (struct.isSetJvmMaxMem()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOsArch()) {
        oprot.writeString(struct.osArch);
      }
      if (struct.isSetOsName()) {
        oprot.writeString(struct.osName);
      }
      if (struct.isSetOsDesc()) {
        oprot.writeString(struct.osDesc);
      }
      if (struct.isSetOsVersion()) {
        oprot.writeString(struct.osVersion);
      }
      if (struct.isSetJvmName()) {
        oprot.writeString(struct.jvmName);
      }
      if (struct.isSetJvmVersion()) {
        oprot.writeString(struct.jvmVersion);
      }
      if (struct.isSetJvmMaxMem()) {
        oprot.writeString(struct.jvmMaxMem);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Software struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.osArch = iprot.readString();
        struct.setOsArchIsSet(true);
      }
      if (incoming.get(1)) {
        struct.osName = iprot.readString();
        struct.setOsNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.osDesc = iprot.readString();
        struct.setOsDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.osVersion = iprot.readString();
        struct.setOsVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jvmName = iprot.readString();
        struct.setJvmNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.jvmVersion = iprot.readString();
        struct.setJvmVersionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jvmMaxMem = iprot.readString();
        struct.setJvmMaxMemIsSet(true);
      }
    }
  }

}

