/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.engine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 批次结果集
 * 1:string missionId 批次号
 * 2:list<commons.Engine> engines 引擎列表
 * 3:string missionProgress 批次进度
 */
public class MissionResults implements org.apache.thrift.TBase<MissionResults, MissionResults._Fields>, java.io.Serializable, Cloneable, Comparable<MissionResults> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MissionResults");

  private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENGINES_FIELD_DESC = new org.apache.thrift.protocol.TField("engines", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MISSION_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("missionProgress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("samples", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MissionResultsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MissionResultsTupleSchemeFactory());
  }

  public String missionId; // required
  public List<Engine> engines; // required
  public String missionProgress; // required
  public List<com.nercis.isscp.idl.Sample> samples; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MISSION_ID((short)1, "missionId"),
    ENGINES((short)2, "engines"),
    MISSION_PROGRESS((short)3, "missionProgress"),
    SAMPLES((short)4, "samples");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MISSION_ID
          return MISSION_ID;
        case 2: // ENGINES
          return ENGINES;
        case 3: // MISSION_PROGRESS
          return MISSION_PROGRESS;
        case 4: // SAMPLES
          return SAMPLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGINES, new org.apache.thrift.meta_data.FieldMetaData("engines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Engine.class))));
    tmpMap.put(_Fields.MISSION_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("missionProgress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("samples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.Sample.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MissionResults.class, metaDataMap);
  }

  public MissionResults() {
  }

  public MissionResults(
    String missionId,
    List<Engine> engines,
    String missionProgress,
    List<com.nercis.isscp.idl.Sample> samples)
  {
    this();
    this.missionId = missionId;
    this.engines = engines;
    this.missionProgress = missionProgress;
    this.samples = samples;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MissionResults(MissionResults other) {
    if (other.isSetMissionId()) {
      this.missionId = other.missionId;
    }
    if (other.isSetEngines()) {
      List<Engine> __this__engines = new ArrayList<Engine>(other.engines.size());
      for (Engine other_element : other.engines) {
        __this__engines.add(new Engine(other_element));
      }
      this.engines = __this__engines;
    }
    if (other.isSetMissionProgress()) {
      this.missionProgress = other.missionProgress;
    }
    if (other.isSetSamples()) {
      List<com.nercis.isscp.idl.Sample> __this__samples = new ArrayList<com.nercis.isscp.idl.Sample>(other.samples.size());
      for (com.nercis.isscp.idl.Sample other_element : other.samples) {
        __this__samples.add(new com.nercis.isscp.idl.Sample(other_element));
      }
      this.samples = __this__samples;
    }
  }

  public MissionResults deepCopy() {
    return new MissionResults(this);
  }

  @Override
  public void clear() {
    this.missionId = null;
    this.engines = null;
    this.missionProgress = null;
    this.samples = null;
  }

  public String getMissionId() {
    return this.missionId;
  }

  public MissionResults setMissionId(String missionId) {
    this.missionId = missionId;
    return this;
  }

  public void unsetMissionId() {
    this.missionId = null;
  }

  /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionId() {
    return this.missionId != null;
  }

  public void setMissionIdIsSet(boolean value) {
    if (!value) {
      this.missionId = null;
    }
  }

  public int getEnginesSize() {
    return (this.engines == null) ? 0 : this.engines.size();
  }

  public java.util.Iterator<Engine> getEnginesIterator() {
    return (this.engines == null) ? null : this.engines.iterator();
  }

  public void addToEngines(Engine elem) {
    if (this.engines == null) {
      this.engines = new ArrayList<Engine>();
    }
    this.engines.add(elem);
  }

  public List<Engine> getEngines() {
    return this.engines;
  }

  public MissionResults setEngines(List<Engine> engines) {
    this.engines = engines;
    return this;
  }

  public void unsetEngines() {
    this.engines = null;
  }

  /** Returns true if field engines is set (has been assigned a value) and false otherwise */
  public boolean isSetEngines() {
    return this.engines != null;
  }

  public void setEnginesIsSet(boolean value) {
    if (!value) {
      this.engines = null;
    }
  }

  public String getMissionProgress() {
    return this.missionProgress;
  }

  public MissionResults setMissionProgress(String missionProgress) {
    this.missionProgress = missionProgress;
    return this;
  }

  public void unsetMissionProgress() {
    this.missionProgress = null;
  }

  /** Returns true if field missionProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetMissionProgress() {
    return this.missionProgress != null;
  }

  public void setMissionProgressIsSet(boolean value) {
    if (!value) {
      this.missionProgress = null;
    }
  }

  public int getSamplesSize() {
    return (this.samples == null) ? 0 : this.samples.size();
  }

  public java.util.Iterator<com.nercis.isscp.idl.Sample> getSamplesIterator() {
    return (this.samples == null) ? null : this.samples.iterator();
  }

  public void addToSamples(com.nercis.isscp.idl.Sample elem) {
    if (this.samples == null) {
      this.samples = new ArrayList<com.nercis.isscp.idl.Sample>();
    }
    this.samples.add(elem);
  }

  public List<com.nercis.isscp.idl.Sample> getSamples() {
    return this.samples;
  }

  public MissionResults setSamples(List<com.nercis.isscp.idl.Sample> samples) {
    this.samples = samples;
    return this;
  }

  public void unsetSamples() {
    this.samples = null;
  }

  /** Returns true if field samples is set (has been assigned a value) and false otherwise */
  public boolean isSetSamples() {
    return this.samples != null;
  }

  public void setSamplesIsSet(boolean value) {
    if (!value) {
      this.samples = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MISSION_ID:
      if (value == null) {
        unsetMissionId();
      } else {
        setMissionId((String)value);
      }
      break;

    case ENGINES:
      if (value == null) {
        unsetEngines();
      } else {
        setEngines((List<Engine>)value);
      }
      break;

    case MISSION_PROGRESS:
      if (value == null) {
        unsetMissionProgress();
      } else {
        setMissionProgress((String)value);
      }
      break;

    case SAMPLES:
      if (value == null) {
        unsetSamples();
      } else {
        setSamples((List<com.nercis.isscp.idl.Sample>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MISSION_ID:
      return getMissionId();

    case ENGINES:
      return getEngines();

    case MISSION_PROGRESS:
      return getMissionProgress();

    case SAMPLES:
      return getSamples();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MISSION_ID:
      return isSetMissionId();
    case ENGINES:
      return isSetEngines();
    case MISSION_PROGRESS:
      return isSetMissionProgress();
    case SAMPLES:
      return isSetSamples();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MissionResults)
      return this.equals((MissionResults)that);
    return false;
  }

  public boolean equals(MissionResults that) {
    if (that == null)
      return false;

    boolean this_present_missionId = true && this.isSetMissionId();
    boolean that_present_missionId = true && that.isSetMissionId();
    if (this_present_missionId || that_present_missionId) {
      if (!(this_present_missionId && that_present_missionId))
        return false;
      if (!this.missionId.equals(that.missionId))
        return false;
    }

    boolean this_present_engines = true && this.isSetEngines();
    boolean that_present_engines = true && that.isSetEngines();
    if (this_present_engines || that_present_engines) {
      if (!(this_present_engines && that_present_engines))
        return false;
      if (!this.engines.equals(that.engines))
        return false;
    }

    boolean this_present_missionProgress = true && this.isSetMissionProgress();
    boolean that_present_missionProgress = true && that.isSetMissionProgress();
    if (this_present_missionProgress || that_present_missionProgress) {
      if (!(this_present_missionProgress && that_present_missionProgress))
        return false;
      if (!this.missionProgress.equals(that.missionProgress))
        return false;
    }

    boolean this_present_samples = true && this.isSetSamples();
    boolean that_present_samples = true && that.isSetSamples();
    if (this_present_samples || that_present_samples) {
      if (!(this_present_samples && that_present_samples))
        return false;
      if (!this.samples.equals(that.samples))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MissionResults other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngines()).compareTo(other.isSetEngines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engines, other.engines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMissionProgress()).compareTo(other.isSetMissionProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissionProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionProgress, other.missionProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samples, other.samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MissionResults(");
    boolean first = true;

    sb.append("missionId:");
    if (this.missionId == null) {
      sb.append("null");
    } else {
      sb.append(this.missionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("engines:");
    if (this.engines == null) {
      sb.append("null");
    } else {
      sb.append(this.engines);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("missionProgress:");
    if (this.missionProgress == null) {
      sb.append("null");
    } else {
      sb.append(this.missionProgress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("samples:");
    if (this.samples == null) {
      sb.append("null");
    } else {
      sb.append(this.samples);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MissionResultsStandardSchemeFactory implements SchemeFactory {
    public MissionResultsStandardScheme getScheme() {
      return new MissionResultsStandardScheme();
    }
  }

  private static class MissionResultsStandardScheme extends StandardScheme<MissionResults> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MissionResults struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.missionId = iprot.readString();
              struct.setMissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENGINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.engines = new ArrayList<Engine>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  Engine _elem18;
                  _elem18 = new Engine();
                  _elem18.read(iprot);
                  struct.engines.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setEnginesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISSION_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.missionProgress = iprot.readString();
              struct.setMissionProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.samples = new ArrayList<com.nercis.isscp.idl.Sample>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  com.nercis.isscp.idl.Sample _elem21;
                  _elem21 = new com.nercis.isscp.idl.Sample();
                  _elem21.read(iprot);
                  struct.samples.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setSamplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MissionResults struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.missionId != null) {
        oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
        oprot.writeString(struct.missionId);
        oprot.writeFieldEnd();
      }
      if (struct.engines != null) {
        oprot.writeFieldBegin(ENGINES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.engines.size()));
          for (Engine _iter22 : struct.engines)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.missionProgress != null) {
        oprot.writeFieldBegin(MISSION_PROGRESS_FIELD_DESC);
        oprot.writeString(struct.missionProgress);
        oprot.writeFieldEnd();
      }
      if (struct.samples != null) {
        oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.samples.size()));
          for (com.nercis.isscp.idl.Sample _iter23 : struct.samples)
          {
            _iter23.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MissionResultsTupleSchemeFactory implements SchemeFactory {
    public MissionResultsTupleScheme getScheme() {
      return new MissionResultsTupleScheme();
    }
  }

  private static class MissionResultsTupleScheme extends TupleScheme<MissionResults> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MissionResults struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMissionId()) {
        optionals.set(0);
      }
      if (struct.isSetEngines()) {
        optionals.set(1);
      }
      if (struct.isSetMissionProgress()) {
        optionals.set(2);
      }
      if (struct.isSetSamples()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMissionId()) {
        oprot.writeString(struct.missionId);
      }
      if (struct.isSetEngines()) {
        {
          oprot.writeI32(struct.engines.size());
          for (Engine _iter24 : struct.engines)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetMissionProgress()) {
        oprot.writeString(struct.missionProgress);
      }
      if (struct.isSetSamples()) {
        {
          oprot.writeI32(struct.samples.size());
          for (com.nercis.isscp.idl.Sample _iter25 : struct.samples)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MissionResults struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.engines = new ArrayList<Engine>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            Engine _elem28;
            _elem28 = new Engine();
            _elem28.read(iprot);
            struct.engines.add(_elem28);
          }
        }
        struct.setEnginesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.missionProgress = iprot.readString();
        struct.setMissionProgressIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.samples = new ArrayList<com.nercis.isscp.idl.Sample>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            com.nercis.isscp.idl.Sample _elem31;
            _elem31 = new com.nercis.isscp.idl.Sample();
            _elem31.read(iprot);
            struct.samples.add(_elem31);
          }
        }
        struct.setSamplesIsSet(true);
      }
    }
  }

}

