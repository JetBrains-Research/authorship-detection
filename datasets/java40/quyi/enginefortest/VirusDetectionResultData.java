/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl.virus;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 1:string checkTime 检测日期
 * 2:string MD5 Md5值
 * 3:i32 checkEngineNum 检测引擎数量
 * 4:i32 positives 命中数
 * 5:list<VirusEngine> virusEngine 病毒引擎检测结果
 * 6:string description 描述
 */
public class VirusDetectionResultData implements org.apache.thrift.TBase<VirusDetectionResultData, VirusDetectionResultData._Fields>, java.io.Serializable, Cloneable, Comparable<VirusDetectionResultData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VirusDetectionResultData");

  private static final org.apache.thrift.protocol.TField CHECK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("MD5", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHECK_ENGINE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("checkEngineNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField POSITIVES_FIELD_DESC = new org.apache.thrift.protocol.TField("positives", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VIRUS_ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("virusEngine", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VirusDetectionResultDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VirusDetectionResultDataTupleSchemeFactory());
  }

  public String checkTime; // required
  public String MD5; // required
  public int checkEngineNum; // required
  public int positives; // required
  public List<VirusEngine> virusEngine; // required
  public String description; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHECK_TIME((short)1, "checkTime"),
    MD5((short)2, "MD5"),
    CHECK_ENGINE_NUM((short)3, "checkEngineNum"),
    POSITIVES((short)4, "positives"),
    VIRUS_ENGINE((short)5, "virusEngine"),
    DESCRIPTION((short)6, "description");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHECK_TIME
          return CHECK_TIME;
        case 2: // MD5
          return MD5;
        case 3: // CHECK_ENGINE_NUM
          return CHECK_ENGINE_NUM;
        case 4: // POSITIVES
          return POSITIVES;
        case 5: // VIRUS_ENGINE
          return VIRUS_ENGINE;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHECKENGINENUM_ISSET_ID = 0;
  private static final int __POSITIVES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHECK_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("MD5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_ENGINE_NUM, new org.apache.thrift.meta_data.FieldMetaData("checkEngineNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITIVES, new org.apache.thrift.meta_data.FieldMetaData("positives", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIRUS_ENGINE, new org.apache.thrift.meta_data.FieldMetaData("virusEngine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VirusEngine.class))));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VirusDetectionResultData.class, metaDataMap);
  }

  public VirusDetectionResultData() {
  }

  public VirusDetectionResultData(
    String checkTime,
    String MD5,
    int checkEngineNum,
    int positives,
    List<VirusEngine> virusEngine,
    String description)
  {
    this();
    this.checkTime = checkTime;
    this.MD5 = MD5;
    this.checkEngineNum = checkEngineNum;
    setCheckEngineNumIsSet(true);
    this.positives = positives;
    setPositivesIsSet(true);
    this.virusEngine = virusEngine;
    this.description = description;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VirusDetectionResultData(VirusDetectionResultData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCheckTime()) {
      this.checkTime = other.checkTime;
    }
    if (other.isSetMD5()) {
      this.MD5 = other.MD5;
    }
    this.checkEngineNum = other.checkEngineNum;
    this.positives = other.positives;
    if (other.isSetVirusEngine()) {
      List<VirusEngine> __this__virusEngine = new ArrayList<VirusEngine>(other.virusEngine.size());
      for (VirusEngine other_element : other.virusEngine) {
        __this__virusEngine.add(new VirusEngine(other_element));
      }
      this.virusEngine = __this__virusEngine;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
  }

  public VirusDetectionResultData deepCopy() {
    return new VirusDetectionResultData(this);
  }

  @Override
  public void clear() {
    this.checkTime = null;
    this.MD5 = null;
    setCheckEngineNumIsSet(false);
    this.checkEngineNum = 0;
    setPositivesIsSet(false);
    this.positives = 0;
    this.virusEngine = null;
    this.description = null;
  }

  public String getCheckTime() {
    return this.checkTime;
  }

  public VirusDetectionResultData setCheckTime(String checkTime) {
    this.checkTime = checkTime;
    return this;
  }

  public void unsetCheckTime() {
    this.checkTime = null;
  }

  /** Returns true if field checkTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckTime() {
    return this.checkTime != null;
  }

  public void setCheckTimeIsSet(boolean value) {
    if (!value) {
      this.checkTime = null;
    }
  }

  public String getMD5() {
    return this.MD5;
  }

  public VirusDetectionResultData setMD5(String MD5) {
    this.MD5 = MD5;
    return this;
  }

  public void unsetMD5() {
    this.MD5 = null;
  }

  /** Returns true if field MD5 is set (has been assigned a value) and false otherwise */
  public boolean isSetMD5() {
    return this.MD5 != null;
  }

  public void setMD5IsSet(boolean value) {
    if (!value) {
      this.MD5 = null;
    }
  }

  public int getCheckEngineNum() {
    return this.checkEngineNum;
  }

  public VirusDetectionResultData setCheckEngineNum(int checkEngineNum) {
    this.checkEngineNum = checkEngineNum;
    setCheckEngineNumIsSet(true);
    return this;
  }

  public void unsetCheckEngineNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKENGINENUM_ISSET_ID);
  }

  /** Returns true if field checkEngineNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckEngineNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKENGINENUM_ISSET_ID);
  }

  public void setCheckEngineNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKENGINENUM_ISSET_ID, value);
  }

  public int getPositives() {
    return this.positives;
  }

  public VirusDetectionResultData setPositives(int positives) {
    this.positives = positives;
    setPositivesIsSet(true);
    return this;
  }

  public void unsetPositives() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIVES_ISSET_ID);
  }

  /** Returns true if field positives is set (has been assigned a value) and false otherwise */
  public boolean isSetPositives() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIVES_ISSET_ID);
  }

  public void setPositivesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIVES_ISSET_ID, value);
  }

  public int getVirusEngineSize() {
    return (this.virusEngine == null) ? 0 : this.virusEngine.size();
  }

  public java.util.Iterator<VirusEngine> getVirusEngineIterator() {
    return (this.virusEngine == null) ? null : this.virusEngine.iterator();
  }

  public void addToVirusEngine(VirusEngine elem) {
    if (this.virusEngine == null) {
      this.virusEngine = new ArrayList<VirusEngine>();
    }
    this.virusEngine.add(elem);
  }

  public List<VirusEngine> getVirusEngine() {
    return this.virusEngine;
  }

  public VirusDetectionResultData setVirusEngine(List<VirusEngine> virusEngine) {
    this.virusEngine = virusEngine;
    return this;
  }

  public void unsetVirusEngine() {
    this.virusEngine = null;
  }

  /** Returns true if field virusEngine is set (has been assigned a value) and false otherwise */
  public boolean isSetVirusEngine() {
    return this.virusEngine != null;
  }

  public void setVirusEngineIsSet(boolean value) {
    if (!value) {
      this.virusEngine = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public VirusDetectionResultData setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHECK_TIME:
      if (value == null) {
        unsetCheckTime();
      } else {
        setCheckTime((String)value);
      }
      break;

    case MD5:
      if (value == null) {
        unsetMD5();
      } else {
        setMD5((String)value);
      }
      break;

    case CHECK_ENGINE_NUM:
      if (value == null) {
        unsetCheckEngineNum();
      } else {
        setCheckEngineNum((Integer)value);
      }
      break;

    case POSITIVES:
      if (value == null) {
        unsetPositives();
      } else {
        setPositives((Integer)value);
      }
      break;

    case VIRUS_ENGINE:
      if (value == null) {
        unsetVirusEngine();
      } else {
        setVirusEngine((List<VirusEngine>)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHECK_TIME:
      return getCheckTime();

    case MD5:
      return getMD5();

    case CHECK_ENGINE_NUM:
      return Integer.valueOf(getCheckEngineNum());

    case POSITIVES:
      return Integer.valueOf(getPositives());

    case VIRUS_ENGINE:
      return getVirusEngine();

    case DESCRIPTION:
      return getDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHECK_TIME:
      return isSetCheckTime();
    case MD5:
      return isSetMD5();
    case CHECK_ENGINE_NUM:
      return isSetCheckEngineNum();
    case POSITIVES:
      return isSetPositives();
    case VIRUS_ENGINE:
      return isSetVirusEngine();
    case DESCRIPTION:
      return isSetDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VirusDetectionResultData)
      return this.equals((VirusDetectionResultData)that);
    return false;
  }

  public boolean equals(VirusDetectionResultData that) {
    if (that == null)
      return false;

    boolean this_present_checkTime = true && this.isSetCheckTime();
    boolean that_present_checkTime = true && that.isSetCheckTime();
    if (this_present_checkTime || that_present_checkTime) {
      if (!(this_present_checkTime && that_present_checkTime))
        return false;
      if (!this.checkTime.equals(that.checkTime))
        return false;
    }

    boolean this_present_MD5 = true && this.isSetMD5();
    boolean that_present_MD5 = true && that.isSetMD5();
    if (this_present_MD5 || that_present_MD5) {
      if (!(this_present_MD5 && that_present_MD5))
        return false;
      if (!this.MD5.equals(that.MD5))
        return false;
    }

    boolean this_present_checkEngineNum = true;
    boolean that_present_checkEngineNum = true;
    if (this_present_checkEngineNum || that_present_checkEngineNum) {
      if (!(this_present_checkEngineNum && that_present_checkEngineNum))
        return false;
      if (this.checkEngineNum != that.checkEngineNum)
        return false;
    }

    boolean this_present_positives = true;
    boolean that_present_positives = true;
    if (this_present_positives || that_present_positives) {
      if (!(this_present_positives && that_present_positives))
        return false;
      if (this.positives != that.positives)
        return false;
    }

    boolean this_present_virusEngine = true && this.isSetVirusEngine();
    boolean that_present_virusEngine = true && that.isSetVirusEngine();
    if (this_present_virusEngine || that_present_virusEngine) {
      if (!(this_present_virusEngine && that_present_virusEngine))
        return false;
      if (!this.virusEngine.equals(that.virusEngine))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(VirusDetectionResultData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCheckTime()).compareTo(other.isSetCheckTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkTime, other.checkTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMD5()).compareTo(other.isSetMD5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMD5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MD5, other.MD5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckEngineNum()).compareTo(other.isSetCheckEngineNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckEngineNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkEngineNum, other.checkEngineNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositives()).compareTo(other.isSetPositives());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositives()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positives, other.positives);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVirusEngine()).compareTo(other.isSetVirusEngine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirusEngine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virusEngine, other.virusEngine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VirusDetectionResultData(");
    boolean first = true;

    sb.append("checkTime:");
    if (this.checkTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MD5:");
    if (this.MD5 == null) {
      sb.append("null");
    } else {
      sb.append(this.MD5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkEngineNum:");
    sb.append(this.checkEngineNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positives:");
    sb.append(this.positives);
    first = false;
    if (!first) sb.append(", ");
    sb.append("virusEngine:");
    if (this.virusEngine == null) {
      sb.append("null");
    } else {
      sb.append(this.virusEngine);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VirusDetectionResultDataStandardSchemeFactory implements SchemeFactory {
    public VirusDetectionResultDataStandardScheme getScheme() {
      return new VirusDetectionResultDataStandardScheme();
    }
  }

  private static class VirusDetectionResultDataStandardScheme extends StandardScheme<VirusDetectionResultData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VirusDetectionResultData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHECK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkTime = iprot.readString();
              struct.setCheckTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MD5 = iprot.readString();
              struct.setMD5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHECK_ENGINE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkEngineNum = iprot.readI32();
              struct.setCheckEngineNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITIVES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positives = iprot.readI32();
              struct.setPositivesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VIRUS_ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.virusEngine = new ArrayList<VirusEngine>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  VirusEngine _elem2;
                  _elem2 = new VirusEngine();
                  _elem2.read(iprot);
                  struct.virusEngine.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setVirusEngineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VirusDetectionResultData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.checkTime != null) {
        oprot.writeFieldBegin(CHECK_TIME_FIELD_DESC);
        oprot.writeString(struct.checkTime);
        oprot.writeFieldEnd();
      }
      if (struct.MD5 != null) {
        oprot.writeFieldBegin(MD5_FIELD_DESC);
        oprot.writeString(struct.MD5);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_ENGINE_NUM_FIELD_DESC);
      oprot.writeI32(struct.checkEngineNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITIVES_FIELD_DESC);
      oprot.writeI32(struct.positives);
      oprot.writeFieldEnd();
      if (struct.virusEngine != null) {
        oprot.writeFieldBegin(VIRUS_ENGINE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.virusEngine.size()));
          for (VirusEngine _iter3 : struct.virusEngine)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VirusDetectionResultDataTupleSchemeFactory implements SchemeFactory {
    public VirusDetectionResultDataTupleScheme getScheme() {
      return new VirusDetectionResultDataTupleScheme();
    }
  }

  private static class VirusDetectionResultDataTupleScheme extends TupleScheme<VirusDetectionResultData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VirusDetectionResultData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCheckTime()) {
        optionals.set(0);
      }
      if (struct.isSetMD5()) {
        optionals.set(1);
      }
      if (struct.isSetCheckEngineNum()) {
        optionals.set(2);
      }
      if (struct.isSetPositives()) {
        optionals.set(3);
      }
      if (struct.isSetVirusEngine()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCheckTime()) {
        oprot.writeString(struct.checkTime);
      }
      if (struct.isSetMD5()) {
        oprot.writeString(struct.MD5);
      }
      if (struct.isSetCheckEngineNum()) {
        oprot.writeI32(struct.checkEngineNum);
      }
      if (struct.isSetPositives()) {
        oprot.writeI32(struct.positives);
      }
      if (struct.isSetVirusEngine()) {
        {
          oprot.writeI32(struct.virusEngine.size());
          for (VirusEngine _iter4 : struct.virusEngine)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VirusDetectionResultData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.checkTime = iprot.readString();
        struct.setCheckTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MD5 = iprot.readString();
        struct.setMD5IsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkEngineNum = iprot.readI32();
        struct.setCheckEngineNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.positives = iprot.readI32();
        struct.setPositivesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.virusEngine = new ArrayList<VirusEngine>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            VirusEngine _elem7;
            _elem7 = new VirusEngine();
            _elem7.read(iprot);
            struct.virusEngine.add(_elem7);
          }
        }
        struct.setVirusEngineIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }
  }

}

