/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.engine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConfigModifyService {

  public interface Iface {

    /**
     * report config.properties in engine
     * @return	config.properties
     */
    public String reportEngineConfig() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * report config.properties in taskmanager
     * @return	config.properties
     */
    public String reportTaskManagerConfig() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * report config.properties in nodemanager
     * @return	config.properties
     * 
     * @param nodeId
     */
    public String reportNodeManagerConfig(String nodeId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * modify engine config.properties
     * @param	propertyName
     * @param	propertyValue
     * @return	succeed or not
     * 
     * @param propertyName
     * @param propertyValue
     */
    public com.nercis.isscp.idl.Result modifyEngineConfig(String propertyName, String propertyValue) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * modify taskmanager config.properties
     * @param	propertyName
     * @param	propertyValue
     * @return	succeed or not
     * 
     * @param propertyName
     * @param propertyValue
     */
    public com.nercis.isscp.idl.Result modifyTaskManagerConfig(String propertyName, String propertyValue) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * modify nodemanager config.properties
     * @param	propertyName
     * @param	propertyValue
     * @return	succeed or not
     * 
     * @param nodeId
     * @param propertyName
     * @param propertyValue
     */
    public com.nercis.isscp.idl.Result modifyNodeManagerConfig(String nodeId, String propertyName, String propertyValue) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void reportEngineConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reportTaskManagerConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reportNodeManagerConfig(String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifyEngineConfig(String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifyTaskManagerConfig(String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifyNodeManagerConfig(String nodeId, String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String reportEngineConfig() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_reportEngineConfig();
      return recv_reportEngineConfig();
    }

    public void send_reportEngineConfig() throws org.apache.thrift.TException
    {
      reportEngineConfig_args args = new reportEngineConfig_args();
      sendBase("reportEngineConfig", args);
    }

    public String recv_reportEngineConfig() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      reportEngineConfig_result result = new reportEngineConfig_result();
      receiveBase(result, "reportEngineConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportEngineConfig failed: unknown result");
    }

    public String reportTaskManagerConfig() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_reportTaskManagerConfig();
      return recv_reportTaskManagerConfig();
    }

    public void send_reportTaskManagerConfig() throws org.apache.thrift.TException
    {
      reportTaskManagerConfig_args args = new reportTaskManagerConfig_args();
      sendBase("reportTaskManagerConfig", args);
    }

    public String recv_reportTaskManagerConfig() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      reportTaskManagerConfig_result result = new reportTaskManagerConfig_result();
      receiveBase(result, "reportTaskManagerConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportTaskManagerConfig failed: unknown result");
    }

    public String reportNodeManagerConfig(String nodeId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_reportNodeManagerConfig(nodeId);
      return recv_reportNodeManagerConfig();
    }

    public void send_reportNodeManagerConfig(String nodeId) throws org.apache.thrift.TException
    {
      reportNodeManagerConfig_args args = new reportNodeManagerConfig_args();
      args.setNodeId(nodeId);
      sendBase("reportNodeManagerConfig", args);
    }

    public String recv_reportNodeManagerConfig() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      reportNodeManagerConfig_result result = new reportNodeManagerConfig_result();
      receiveBase(result, "reportNodeManagerConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportNodeManagerConfig failed: unknown result");
    }

    public com.nercis.isscp.idl.Result modifyEngineConfig(String propertyName, String propertyValue) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_modifyEngineConfig(propertyName, propertyValue);
      return recv_modifyEngineConfig();
    }

    public void send_modifyEngineConfig(String propertyName, String propertyValue) throws org.apache.thrift.TException
    {
      modifyEngineConfig_args args = new modifyEngineConfig_args();
      args.setPropertyName(propertyName);
      args.setPropertyValue(propertyValue);
      sendBase("modifyEngineConfig", args);
    }

    public com.nercis.isscp.idl.Result recv_modifyEngineConfig() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      modifyEngineConfig_result result = new modifyEngineConfig_result();
      receiveBase(result, "modifyEngineConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyEngineConfig failed: unknown result");
    }

    public com.nercis.isscp.idl.Result modifyTaskManagerConfig(String propertyName, String propertyValue) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_modifyTaskManagerConfig(propertyName, propertyValue);
      return recv_modifyTaskManagerConfig();
    }

    public void send_modifyTaskManagerConfig(String propertyName, String propertyValue) throws org.apache.thrift.TException
    {
      modifyTaskManagerConfig_args args = new modifyTaskManagerConfig_args();
      args.setPropertyName(propertyName);
      args.setPropertyValue(propertyValue);
      sendBase("modifyTaskManagerConfig", args);
    }

    public com.nercis.isscp.idl.Result recv_modifyTaskManagerConfig() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      modifyTaskManagerConfig_result result = new modifyTaskManagerConfig_result();
      receiveBase(result, "modifyTaskManagerConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyTaskManagerConfig failed: unknown result");
    }

    public com.nercis.isscp.idl.Result modifyNodeManagerConfig(String nodeId, String propertyName, String propertyValue) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_modifyNodeManagerConfig(nodeId, propertyName, propertyValue);
      return recv_modifyNodeManagerConfig();
    }

    public void send_modifyNodeManagerConfig(String nodeId, String propertyName, String propertyValue) throws org.apache.thrift.TException
    {
      modifyNodeManagerConfig_args args = new modifyNodeManagerConfig_args();
      args.setNodeId(nodeId);
      args.setPropertyName(propertyName);
      args.setPropertyValue(propertyValue);
      sendBase("modifyNodeManagerConfig", args);
    }

    public com.nercis.isscp.idl.Result recv_modifyNodeManagerConfig() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      modifyNodeManagerConfig_result result = new modifyNodeManagerConfig_result();
      receiveBase(result, "modifyNodeManagerConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyNodeManagerConfig failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void reportEngineConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportEngineConfig_call method_call = new reportEngineConfig_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportEngineConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      public reportEngineConfig_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportEngineConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportEngineConfig_args args = new reportEngineConfig_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportEngineConfig();
      }
    }

    public void reportTaskManagerConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportTaskManagerConfig_call method_call = new reportTaskManagerConfig_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportTaskManagerConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      public reportTaskManagerConfig_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportTaskManagerConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportTaskManagerConfig_args args = new reportTaskManagerConfig_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportTaskManagerConfig();
      }
    }

    public void reportNodeManagerConfig(String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportNodeManagerConfig_call method_call = new reportNodeManagerConfig_call(nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportNodeManagerConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      public reportNodeManagerConfig_call(String nodeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportNodeManagerConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportNodeManagerConfig_args args = new reportNodeManagerConfig_args();
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportNodeManagerConfig();
      }
    }

    public void modifyEngineConfig(String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyEngineConfig_call method_call = new modifyEngineConfig_call(propertyName, propertyValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyEngineConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyName;
      private String propertyValue;
      public modifyEngineConfig_call(String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyName = propertyName;
        this.propertyValue = propertyValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyEngineConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyEngineConfig_args args = new modifyEngineConfig_args();
        args.setPropertyName(propertyName);
        args.setPropertyValue(propertyValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyEngineConfig();
      }
    }

    public void modifyTaskManagerConfig(String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyTaskManagerConfig_call method_call = new modifyTaskManagerConfig_call(propertyName, propertyValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyTaskManagerConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String propertyName;
      private String propertyValue;
      public modifyTaskManagerConfig_call(String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.propertyName = propertyName;
        this.propertyValue = propertyValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyTaskManagerConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyTaskManagerConfig_args args = new modifyTaskManagerConfig_args();
        args.setPropertyName(propertyName);
        args.setPropertyValue(propertyValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyTaskManagerConfig();
      }
    }

    public void modifyNodeManagerConfig(String nodeId, String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyNodeManagerConfig_call method_call = new modifyNodeManagerConfig_call(nodeId, propertyName, propertyValue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyNodeManagerConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String propertyName;
      private String propertyValue;
      public modifyNodeManagerConfig_call(String nodeId, String propertyName, String propertyValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.propertyName = propertyName;
        this.propertyValue = propertyValue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyNodeManagerConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyNodeManagerConfig_args args = new modifyNodeManagerConfig_args();
        args.setNodeId(nodeId);
        args.setPropertyName(propertyName);
        args.setPropertyValue(propertyValue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyNodeManagerConfig();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("reportEngineConfig", new reportEngineConfig());
      processMap.put("reportTaskManagerConfig", new reportTaskManagerConfig());
      processMap.put("reportNodeManagerConfig", new reportNodeManagerConfig());
      processMap.put("modifyEngineConfig", new modifyEngineConfig());
      processMap.put("modifyTaskManagerConfig", new modifyTaskManagerConfig());
      processMap.put("modifyNodeManagerConfig", new modifyNodeManagerConfig());
      return processMap;
    }

    public static class reportEngineConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportEngineConfig_args> {
      public reportEngineConfig() {
        super("reportEngineConfig");
      }

      public reportEngineConfig_args getEmptyArgsInstance() {
        return new reportEngineConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportEngineConfig_result getResult(I iface, reportEngineConfig_args args) throws org.apache.thrift.TException {
        reportEngineConfig_result result = new reportEngineConfig_result();
        try {
          result.success = iface.reportEngineConfig();
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class reportTaskManagerConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportTaskManagerConfig_args> {
      public reportTaskManagerConfig() {
        super("reportTaskManagerConfig");
      }

      public reportTaskManagerConfig_args getEmptyArgsInstance() {
        return new reportTaskManagerConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportTaskManagerConfig_result getResult(I iface, reportTaskManagerConfig_args args) throws org.apache.thrift.TException {
        reportTaskManagerConfig_result result = new reportTaskManagerConfig_result();
        try {
          result.success = iface.reportTaskManagerConfig();
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class reportNodeManagerConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportNodeManagerConfig_args> {
      public reportNodeManagerConfig() {
        super("reportNodeManagerConfig");
      }

      public reportNodeManagerConfig_args getEmptyArgsInstance() {
        return new reportNodeManagerConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportNodeManagerConfig_result getResult(I iface, reportNodeManagerConfig_args args) throws org.apache.thrift.TException {
        reportNodeManagerConfig_result result = new reportNodeManagerConfig_result();
        try {
          result.success = iface.reportNodeManagerConfig(args.nodeId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class modifyEngineConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyEngineConfig_args> {
      public modifyEngineConfig() {
        super("modifyEngineConfig");
      }

      public modifyEngineConfig_args getEmptyArgsInstance() {
        return new modifyEngineConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyEngineConfig_result getResult(I iface, modifyEngineConfig_args args) throws org.apache.thrift.TException {
        modifyEngineConfig_result result = new modifyEngineConfig_result();
        try {
          result.success = iface.modifyEngineConfig(args.propertyName, args.propertyValue);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class modifyTaskManagerConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyTaskManagerConfig_args> {
      public modifyTaskManagerConfig() {
        super("modifyTaskManagerConfig");
      }

      public modifyTaskManagerConfig_args getEmptyArgsInstance() {
        return new modifyTaskManagerConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyTaskManagerConfig_result getResult(I iface, modifyTaskManagerConfig_args args) throws org.apache.thrift.TException {
        modifyTaskManagerConfig_result result = new modifyTaskManagerConfig_result();
        try {
          result.success = iface.modifyTaskManagerConfig(args.propertyName, args.propertyValue);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class modifyNodeManagerConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyNodeManagerConfig_args> {
      public modifyNodeManagerConfig() {
        super("modifyNodeManagerConfig");
      }

      public modifyNodeManagerConfig_args getEmptyArgsInstance() {
        return new modifyNodeManagerConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyNodeManagerConfig_result getResult(I iface, modifyNodeManagerConfig_args args) throws org.apache.thrift.TException {
        modifyNodeManagerConfig_result result = new modifyNodeManagerConfig_result();
        try {
          result.success = iface.modifyNodeManagerConfig(args.nodeId, args.propertyName, args.propertyValue);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("reportEngineConfig", new reportEngineConfig());
      processMap.put("reportTaskManagerConfig", new reportTaskManagerConfig());
      processMap.put("reportNodeManagerConfig", new reportNodeManagerConfig());
      processMap.put("modifyEngineConfig", new modifyEngineConfig());
      processMap.put("modifyTaskManagerConfig", new modifyTaskManagerConfig());
      processMap.put("modifyNodeManagerConfig", new modifyNodeManagerConfig());
      return processMap;
    }

    public static class reportEngineConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportEngineConfig_args, String> {
      public reportEngineConfig() {
        super("reportEngineConfig");
      }

      public reportEngineConfig_args getEmptyArgsInstance() {
        return new reportEngineConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            reportEngineConfig_result result = new reportEngineConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reportEngineConfig_result result = new reportEngineConfig_result();
            if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportEngineConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.reportEngineConfig(resultHandler);
      }
    }

    public static class reportTaskManagerConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportTaskManagerConfig_args, String> {
      public reportTaskManagerConfig() {
        super("reportTaskManagerConfig");
      }

      public reportTaskManagerConfig_args getEmptyArgsInstance() {
        return new reportTaskManagerConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            reportTaskManagerConfig_result result = new reportTaskManagerConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reportTaskManagerConfig_result result = new reportTaskManagerConfig_result();
            if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportTaskManagerConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.reportTaskManagerConfig(resultHandler);
      }
    }

    public static class reportNodeManagerConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportNodeManagerConfig_args, String> {
      public reportNodeManagerConfig() {
        super("reportNodeManagerConfig");
      }

      public reportNodeManagerConfig_args getEmptyArgsInstance() {
        return new reportNodeManagerConfig_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            reportNodeManagerConfig_result result = new reportNodeManagerConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reportNodeManagerConfig_result result = new reportNodeManagerConfig_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportNodeManagerConfig_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.reportNodeManagerConfig(args.nodeId,resultHandler);
      }
    }

    public static class modifyEngineConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyEngineConfig_args, com.nercis.isscp.idl.Result> {
      public modifyEngineConfig() {
        super("modifyEngineConfig");
      }

      public modifyEngineConfig_args getEmptyArgsInstance() {
        return new modifyEngineConfig_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            modifyEngineConfig_result result = new modifyEngineConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifyEngineConfig_result result = new modifyEngineConfig_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyEngineConfig_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.modifyEngineConfig(args.propertyName, args.propertyValue,resultHandler);
      }
    }

    public static class modifyTaskManagerConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyTaskManagerConfig_args, com.nercis.isscp.idl.Result> {
      public modifyTaskManagerConfig() {
        super("modifyTaskManagerConfig");
      }

      public modifyTaskManagerConfig_args getEmptyArgsInstance() {
        return new modifyTaskManagerConfig_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            modifyTaskManagerConfig_result result = new modifyTaskManagerConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifyTaskManagerConfig_result result = new modifyTaskManagerConfig_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyTaskManagerConfig_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.modifyTaskManagerConfig(args.propertyName, args.propertyValue,resultHandler);
      }
    }

    public static class modifyNodeManagerConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyNodeManagerConfig_args, com.nercis.isscp.idl.Result> {
      public modifyNodeManagerConfig() {
        super("modifyNodeManagerConfig");
      }

      public modifyNodeManagerConfig_args getEmptyArgsInstance() {
        return new modifyNodeManagerConfig_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            modifyNodeManagerConfig_result result = new modifyNodeManagerConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifyNodeManagerConfig_result result = new modifyNodeManagerConfig_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyNodeManagerConfig_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.modifyNodeManagerConfig(args.nodeId, args.propertyName, args.propertyValue,resultHandler);
      }
    }

  }

  public static class reportEngineConfig_args implements org.apache.thrift.TBase<reportEngineConfig_args, reportEngineConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportEngineConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportEngineConfig_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportEngineConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportEngineConfig_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportEngineConfig_args.class, metaDataMap);
    }

    public reportEngineConfig_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportEngineConfig_args(reportEngineConfig_args other) {
    }

    public reportEngineConfig_args deepCopy() {
      return new reportEngineConfig_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportEngineConfig_args)
        return this.equals((reportEngineConfig_args)that);
      return false;
    }

    public boolean equals(reportEngineConfig_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reportEngineConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportEngineConfig_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportEngineConfig_argsStandardSchemeFactory implements SchemeFactory {
      public reportEngineConfig_argsStandardScheme getScheme() {
        return new reportEngineConfig_argsStandardScheme();
      }
    }

    private static class reportEngineConfig_argsStandardScheme extends StandardScheme<reportEngineConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportEngineConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportEngineConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportEngineConfig_argsTupleSchemeFactory implements SchemeFactory {
      public reportEngineConfig_argsTupleScheme getScheme() {
        return new reportEngineConfig_argsTupleScheme();
      }
    }

    private static class reportEngineConfig_argsTupleScheme extends TupleScheme<reportEngineConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportEngineConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportEngineConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class reportEngineConfig_result implements org.apache.thrift.TBase<reportEngineConfig_result, reportEngineConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportEngineConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportEngineConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportEngineConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportEngineConfig_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportEngineConfig_result.class, metaDataMap);
    }

    public reportEngineConfig_result() {
    }

    public reportEngineConfig_result(
      String success,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportEngineConfig_result(reportEngineConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public reportEngineConfig_result deepCopy() {
      return new reportEngineConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public reportEngineConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public reportEngineConfig_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportEngineConfig_result)
        return this.equals((reportEngineConfig_result)that);
      return false;
    }

    public boolean equals(reportEngineConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reportEngineConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportEngineConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportEngineConfig_resultStandardSchemeFactory implements SchemeFactory {
      public reportEngineConfig_resultStandardScheme getScheme() {
        return new reportEngineConfig_resultStandardScheme();
      }
    }

    private static class reportEngineConfig_resultStandardScheme extends StandardScheme<reportEngineConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportEngineConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportEngineConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportEngineConfig_resultTupleSchemeFactory implements SchemeFactory {
      public reportEngineConfig_resultTupleScheme getScheme() {
        return new reportEngineConfig_resultTupleScheme();
      }
    }

    private static class reportEngineConfig_resultTupleScheme extends TupleScheme<reportEngineConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportEngineConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportEngineConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class reportTaskManagerConfig_args implements org.apache.thrift.TBase<reportTaskManagerConfig_args, reportTaskManagerConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportTaskManagerConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportTaskManagerConfig_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportTaskManagerConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportTaskManagerConfig_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportTaskManagerConfig_args.class, metaDataMap);
    }

    public reportTaskManagerConfig_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTaskManagerConfig_args(reportTaskManagerConfig_args other) {
    }

    public reportTaskManagerConfig_args deepCopy() {
      return new reportTaskManagerConfig_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTaskManagerConfig_args)
        return this.equals((reportTaskManagerConfig_args)that);
      return false;
    }

    public boolean equals(reportTaskManagerConfig_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reportTaskManagerConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTaskManagerConfig_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportTaskManagerConfig_argsStandardSchemeFactory implements SchemeFactory {
      public reportTaskManagerConfig_argsStandardScheme getScheme() {
        return new reportTaskManagerConfig_argsStandardScheme();
      }
    }

    private static class reportTaskManagerConfig_argsStandardScheme extends StandardScheme<reportTaskManagerConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportTaskManagerConfig_argsTupleSchemeFactory implements SchemeFactory {
      public reportTaskManagerConfig_argsTupleScheme getScheme() {
        return new reportTaskManagerConfig_argsTupleScheme();
      }
    }

    private static class reportTaskManagerConfig_argsTupleScheme extends TupleScheme<reportTaskManagerConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class reportTaskManagerConfig_result implements org.apache.thrift.TBase<reportTaskManagerConfig_result, reportTaskManagerConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportTaskManagerConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportTaskManagerConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportTaskManagerConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportTaskManagerConfig_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportTaskManagerConfig_result.class, metaDataMap);
    }

    public reportTaskManagerConfig_result() {
    }

    public reportTaskManagerConfig_result(
      String success,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTaskManagerConfig_result(reportTaskManagerConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public reportTaskManagerConfig_result deepCopy() {
      return new reportTaskManagerConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public reportTaskManagerConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public reportTaskManagerConfig_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTaskManagerConfig_result)
        return this.equals((reportTaskManagerConfig_result)that);
      return false;
    }

    public boolean equals(reportTaskManagerConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reportTaskManagerConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTaskManagerConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportTaskManagerConfig_resultStandardSchemeFactory implements SchemeFactory {
      public reportTaskManagerConfig_resultStandardScheme getScheme() {
        return new reportTaskManagerConfig_resultStandardScheme();
      }
    }

    private static class reportTaskManagerConfig_resultStandardScheme extends StandardScheme<reportTaskManagerConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportTaskManagerConfig_resultTupleSchemeFactory implements SchemeFactory {
      public reportTaskManagerConfig_resultTupleScheme getScheme() {
        return new reportTaskManagerConfig_resultTupleScheme();
      }
    }

    private static class reportTaskManagerConfig_resultTupleScheme extends TupleScheme<reportTaskManagerConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class reportNodeManagerConfig_args implements org.apache.thrift.TBase<reportNodeManagerConfig_args, reportNodeManagerConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportNodeManagerConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportNodeManagerConfig_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportNodeManagerConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportNodeManagerConfig_argsTupleSchemeFactory());
    }

    public String nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportNodeManagerConfig_args.class, metaDataMap);
    }

    public reportNodeManagerConfig_args() {
    }

    public reportNodeManagerConfig_args(
      String nodeId)
    {
      this();
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportNodeManagerConfig_args(reportNodeManagerConfig_args other) {
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
    }

    public reportNodeManagerConfig_args deepCopy() {
      return new reportNodeManagerConfig_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public reportNodeManagerConfig_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportNodeManagerConfig_args)
        return this.equals((reportNodeManagerConfig_args)that);
      return false;
    }

    public boolean equals(reportNodeManagerConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reportNodeManagerConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportNodeManagerConfig_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nodeId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportNodeManagerConfig_argsStandardSchemeFactory implements SchemeFactory {
      public reportNodeManagerConfig_argsStandardScheme getScheme() {
        return new reportNodeManagerConfig_argsStandardScheme();
      }
    }

    private static class reportNodeManagerConfig_argsStandardScheme extends StandardScheme<reportNodeManagerConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportNodeManagerConfig_argsTupleSchemeFactory implements SchemeFactory {
      public reportNodeManagerConfig_argsTupleScheme getScheme() {
        return new reportNodeManagerConfig_argsTupleScheme();
      }
    }

    private static class reportNodeManagerConfig_argsTupleScheme extends TupleScheme<reportNodeManagerConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.nodeId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.nodeId = iprot.readString();
        struct.setNodeIdIsSet(true);
      }
    }

  }

  public static class reportNodeManagerConfig_result implements org.apache.thrift.TBase<reportNodeManagerConfig_result, reportNodeManagerConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportNodeManagerConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportNodeManagerConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportNodeManagerConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportNodeManagerConfig_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportNodeManagerConfig_result.class, metaDataMap);
    }

    public reportNodeManagerConfig_result() {
    }

    public reportNodeManagerConfig_result(
      String success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportNodeManagerConfig_result(reportNodeManagerConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public reportNodeManagerConfig_result deepCopy() {
      return new reportNodeManagerConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public reportNodeManagerConfig_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public reportNodeManagerConfig_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public reportNodeManagerConfig_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportNodeManagerConfig_result)
        return this.equals((reportNodeManagerConfig_result)that);
      return false;
    }

    public boolean equals(reportNodeManagerConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reportNodeManagerConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportNodeManagerConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportNodeManagerConfig_resultStandardSchemeFactory implements SchemeFactory {
      public reportNodeManagerConfig_resultStandardScheme getScheme() {
        return new reportNodeManagerConfig_resultStandardScheme();
      }
    }

    private static class reportNodeManagerConfig_resultStandardScheme extends StandardScheme<reportNodeManagerConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportNodeManagerConfig_resultTupleSchemeFactory implements SchemeFactory {
      public reportNodeManagerConfig_resultTupleScheme getScheme() {
        return new reportNodeManagerConfig_resultTupleScheme();
      }
    }

    private static class reportNodeManagerConfig_resultTupleScheme extends TupleScheme<reportNodeManagerConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class modifyEngineConfig_args implements org.apache.thrift.TBase<modifyEngineConfig_args, modifyEngineConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyEngineConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyEngineConfig_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyValue", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyEngineConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyEngineConfig_argsTupleSchemeFactory());
    }

    public String propertyName; // required
    public String propertyValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_NAME((short)1, "propertyName"),
      PROPERTY_VALUE((short)2, "propertyValue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 2: // PROPERTY_VALUE
            return PROPERTY_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("propertyValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyEngineConfig_args.class, metaDataMap);
    }

    public modifyEngineConfig_args() {
    }

    public modifyEngineConfig_args(
      String propertyName,
      String propertyValue)
    {
      this();
      this.propertyName = propertyName;
      this.propertyValue = propertyValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyEngineConfig_args(modifyEngineConfig_args other) {
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      if (other.isSetPropertyValue()) {
        this.propertyValue = other.propertyValue;
      }
    }

    public modifyEngineConfig_args deepCopy() {
      return new modifyEngineConfig_args(this);
    }

    @Override
    public void clear() {
      this.propertyName = null;
      this.propertyValue = null;
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public modifyEngineConfig_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public String getPropertyValue() {
      return this.propertyValue;
    }

    public modifyEngineConfig_args setPropertyValue(String propertyValue) {
      this.propertyValue = propertyValue;
      return this;
    }

    public void unsetPropertyValue() {
      this.propertyValue = null;
    }

    /** Returns true if field propertyValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyValue() {
      return this.propertyValue != null;
    }

    public void setPropertyValueIsSet(boolean value) {
      if (!value) {
        this.propertyValue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetPropertyValue();
        } else {
          setPropertyValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_NAME:
        return getPropertyName();

      case PROPERTY_VALUE:
        return getPropertyValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_NAME:
        return isSetPropertyName();
      case PROPERTY_VALUE:
        return isSetPropertyValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyEngineConfig_args)
        return this.equals((modifyEngineConfig_args)that);
      return false;
    }

    public boolean equals(modifyEngineConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_propertyValue = true && this.isSetPropertyValue();
      boolean that_present_propertyValue = true && that.isSetPropertyValue();
      if (this_present_propertyValue || that_present_propertyValue) {
        if (!(this_present_propertyValue && that_present_propertyValue))
          return false;
        if (!this.propertyValue.equals(that.propertyValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyEngineConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(other.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, other.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyValue()).compareTo(other.isSetPropertyValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyValue, other.propertyValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyEngineConfig_args(");
      boolean first = true;

      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyValue:");
      if (this.propertyValue == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (propertyName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'propertyName' was not present! Struct: " + toString());
      }
      if (propertyValue == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'propertyValue' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyEngineConfig_argsStandardSchemeFactory implements SchemeFactory {
      public modifyEngineConfig_argsStandardScheme getScheme() {
        return new modifyEngineConfig_argsStandardScheme();
      }
    }

    private static class modifyEngineConfig_argsStandardScheme extends StandardScheme<modifyEngineConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyEngineConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROPERTY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.propertyName = iprot.readString();
                struct.setPropertyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.propertyValue = iprot.readString();
                struct.setPropertyValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyEngineConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.propertyName != null) {
          oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
          oprot.writeString(struct.propertyName);
          oprot.writeFieldEnd();
        }
        if (struct.propertyValue != null) {
          oprot.writeFieldBegin(PROPERTY_VALUE_FIELD_DESC);
          oprot.writeString(struct.propertyValue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyEngineConfig_argsTupleSchemeFactory implements SchemeFactory {
      public modifyEngineConfig_argsTupleScheme getScheme() {
        return new modifyEngineConfig_argsTupleScheme();
      }
    }

    private static class modifyEngineConfig_argsTupleScheme extends TupleScheme<modifyEngineConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyEngineConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.propertyName);
        oprot.writeString(struct.propertyValue);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyEngineConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.propertyName = iprot.readString();
        struct.setPropertyNameIsSet(true);
        struct.propertyValue = iprot.readString();
        struct.setPropertyValueIsSet(true);
      }
    }

  }

  public static class modifyEngineConfig_result implements org.apache.thrift.TBase<modifyEngineConfig_result, modifyEngineConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyEngineConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyEngineConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyEngineConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyEngineConfig_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyEngineConfig_result.class, metaDataMap);
    }

    public modifyEngineConfig_result() {
    }

    public modifyEngineConfig_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyEngineConfig_result(modifyEngineConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public modifyEngineConfig_result deepCopy() {
      return new modifyEngineConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public modifyEngineConfig_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public modifyEngineConfig_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public modifyEngineConfig_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyEngineConfig_result)
        return this.equals((modifyEngineConfig_result)that);
      return false;
    }

    public boolean equals(modifyEngineConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyEngineConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyEngineConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyEngineConfig_resultStandardSchemeFactory implements SchemeFactory {
      public modifyEngineConfig_resultStandardScheme getScheme() {
        return new modifyEngineConfig_resultStandardScheme();
      }
    }

    private static class modifyEngineConfig_resultStandardScheme extends StandardScheme<modifyEngineConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyEngineConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyEngineConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyEngineConfig_resultTupleSchemeFactory implements SchemeFactory {
      public modifyEngineConfig_resultTupleScheme getScheme() {
        return new modifyEngineConfig_resultTupleScheme();
      }
    }

    private static class modifyEngineConfig_resultTupleScheme extends TupleScheme<modifyEngineConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyEngineConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyEngineConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class modifyTaskManagerConfig_args implements org.apache.thrift.TBase<modifyTaskManagerConfig_args, modifyTaskManagerConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyTaskManagerConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyTaskManagerConfig_args");

    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyValue", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyTaskManagerConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyTaskManagerConfig_argsTupleSchemeFactory());
    }

    public String propertyName; // required
    public String propertyValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROPERTY_NAME((short)1, "propertyName"),
      PROPERTY_VALUE((short)2, "propertyValue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 2: // PROPERTY_VALUE
            return PROPERTY_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("propertyValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyTaskManagerConfig_args.class, metaDataMap);
    }

    public modifyTaskManagerConfig_args() {
    }

    public modifyTaskManagerConfig_args(
      String propertyName,
      String propertyValue)
    {
      this();
      this.propertyName = propertyName;
      this.propertyValue = propertyValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyTaskManagerConfig_args(modifyTaskManagerConfig_args other) {
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      if (other.isSetPropertyValue()) {
        this.propertyValue = other.propertyValue;
      }
    }

    public modifyTaskManagerConfig_args deepCopy() {
      return new modifyTaskManagerConfig_args(this);
    }

    @Override
    public void clear() {
      this.propertyName = null;
      this.propertyValue = null;
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public modifyTaskManagerConfig_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public String getPropertyValue() {
      return this.propertyValue;
    }

    public modifyTaskManagerConfig_args setPropertyValue(String propertyValue) {
      this.propertyValue = propertyValue;
      return this;
    }

    public void unsetPropertyValue() {
      this.propertyValue = null;
    }

    /** Returns true if field propertyValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyValue() {
      return this.propertyValue != null;
    }

    public void setPropertyValueIsSet(boolean value) {
      if (!value) {
        this.propertyValue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetPropertyValue();
        } else {
          setPropertyValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROPERTY_NAME:
        return getPropertyName();

      case PROPERTY_VALUE:
        return getPropertyValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROPERTY_NAME:
        return isSetPropertyName();
      case PROPERTY_VALUE:
        return isSetPropertyValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyTaskManagerConfig_args)
        return this.equals((modifyTaskManagerConfig_args)that);
      return false;
    }

    public boolean equals(modifyTaskManagerConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_propertyValue = true && this.isSetPropertyValue();
      boolean that_present_propertyValue = true && that.isSetPropertyValue();
      if (this_present_propertyValue || that_present_propertyValue) {
        if (!(this_present_propertyValue && that_present_propertyValue))
          return false;
        if (!this.propertyValue.equals(that.propertyValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyTaskManagerConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(other.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, other.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyValue()).compareTo(other.isSetPropertyValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyValue, other.propertyValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyTaskManagerConfig_args(");
      boolean first = true;

      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyValue:");
      if (this.propertyValue == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (propertyName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'propertyName' was not present! Struct: " + toString());
      }
      if (propertyValue == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'propertyValue' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyTaskManagerConfig_argsStandardSchemeFactory implements SchemeFactory {
      public modifyTaskManagerConfig_argsStandardScheme getScheme() {
        return new modifyTaskManagerConfig_argsStandardScheme();
      }
    }

    private static class modifyTaskManagerConfig_argsStandardScheme extends StandardScheme<modifyTaskManagerConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROPERTY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.propertyName = iprot.readString();
                struct.setPropertyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.propertyValue = iprot.readString();
                struct.setPropertyValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.propertyName != null) {
          oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
          oprot.writeString(struct.propertyName);
          oprot.writeFieldEnd();
        }
        if (struct.propertyValue != null) {
          oprot.writeFieldBegin(PROPERTY_VALUE_FIELD_DESC);
          oprot.writeString(struct.propertyValue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyTaskManagerConfig_argsTupleSchemeFactory implements SchemeFactory {
      public modifyTaskManagerConfig_argsTupleScheme getScheme() {
        return new modifyTaskManagerConfig_argsTupleScheme();
      }
    }

    private static class modifyTaskManagerConfig_argsTupleScheme extends TupleScheme<modifyTaskManagerConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.propertyName);
        oprot.writeString(struct.propertyValue);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyTaskManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.propertyName = iprot.readString();
        struct.setPropertyNameIsSet(true);
        struct.propertyValue = iprot.readString();
        struct.setPropertyValueIsSet(true);
      }
    }

  }

  public static class modifyTaskManagerConfig_result implements org.apache.thrift.TBase<modifyTaskManagerConfig_result, modifyTaskManagerConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyTaskManagerConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyTaskManagerConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyTaskManagerConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyTaskManagerConfig_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyTaskManagerConfig_result.class, metaDataMap);
    }

    public modifyTaskManagerConfig_result() {
    }

    public modifyTaskManagerConfig_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyTaskManagerConfig_result(modifyTaskManagerConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public modifyTaskManagerConfig_result deepCopy() {
      return new modifyTaskManagerConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public modifyTaskManagerConfig_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public modifyTaskManagerConfig_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public modifyTaskManagerConfig_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyTaskManagerConfig_result)
        return this.equals((modifyTaskManagerConfig_result)that);
      return false;
    }

    public boolean equals(modifyTaskManagerConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyTaskManagerConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyTaskManagerConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyTaskManagerConfig_resultStandardSchemeFactory implements SchemeFactory {
      public modifyTaskManagerConfig_resultStandardScheme getScheme() {
        return new modifyTaskManagerConfig_resultStandardScheme();
      }
    }

    private static class modifyTaskManagerConfig_resultStandardScheme extends StandardScheme<modifyTaskManagerConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyTaskManagerConfig_resultTupleSchemeFactory implements SchemeFactory {
      public modifyTaskManagerConfig_resultTupleScheme getScheme() {
        return new modifyTaskManagerConfig_resultTupleScheme();
      }
    }

    private static class modifyTaskManagerConfig_resultTupleScheme extends TupleScheme<modifyTaskManagerConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyTaskManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class modifyNodeManagerConfig_args implements org.apache.thrift.TBase<modifyNodeManagerConfig_args, modifyNodeManagerConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyNodeManagerConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyNodeManagerConfig_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROPERTY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROPERTY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyValue", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyNodeManagerConfig_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyNodeManagerConfig_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String propertyName; // required
    public String propertyValue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      PROPERTY_NAME((short)2, "propertyName"),
      PROPERTY_VALUE((short)3, "propertyValue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // PROPERTY_NAME
            return PROPERTY_NAME;
          case 3: // PROPERTY_VALUE
            return PROPERTY_VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_NAME, new org.apache.thrift.meta_data.FieldMetaData("propertyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROPERTY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("propertyValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyNodeManagerConfig_args.class, metaDataMap);
    }

    public modifyNodeManagerConfig_args() {
    }

    public modifyNodeManagerConfig_args(
      String nodeId,
      String propertyName,
      String propertyValue)
    {
      this();
      this.nodeId = nodeId;
      this.propertyName = propertyName;
      this.propertyValue = propertyValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyNodeManagerConfig_args(modifyNodeManagerConfig_args other) {
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetPropertyName()) {
        this.propertyName = other.propertyName;
      }
      if (other.isSetPropertyValue()) {
        this.propertyValue = other.propertyValue;
      }
    }

    public modifyNodeManagerConfig_args deepCopy() {
      return new modifyNodeManagerConfig_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.propertyName = null;
      this.propertyValue = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public modifyNodeManagerConfig_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getPropertyName() {
      return this.propertyName;
    }

    public modifyNodeManagerConfig_args setPropertyName(String propertyName) {
      this.propertyName = propertyName;
      return this;
    }

    public void unsetPropertyName() {
      this.propertyName = null;
    }

    /** Returns true if field propertyName is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyName() {
      return this.propertyName != null;
    }

    public void setPropertyNameIsSet(boolean value) {
      if (!value) {
        this.propertyName = null;
      }
    }

    public String getPropertyValue() {
      return this.propertyValue;
    }

    public modifyNodeManagerConfig_args setPropertyValue(String propertyValue) {
      this.propertyValue = propertyValue;
      return this;
    }

    public void unsetPropertyValue() {
      this.propertyValue = null;
    }

    /** Returns true if field propertyValue is set (has been assigned a value) and false otherwise */
    public boolean isSetPropertyValue() {
      return this.propertyValue != null;
    }

    public void setPropertyValueIsSet(boolean value) {
      if (!value) {
        this.propertyValue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case PROPERTY_NAME:
        if (value == null) {
          unsetPropertyName();
        } else {
          setPropertyName((String)value);
        }
        break;

      case PROPERTY_VALUE:
        if (value == null) {
          unsetPropertyValue();
        } else {
          setPropertyValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case PROPERTY_NAME:
        return getPropertyName();

      case PROPERTY_VALUE:
        return getPropertyValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case PROPERTY_NAME:
        return isSetPropertyName();
      case PROPERTY_VALUE:
        return isSetPropertyValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyNodeManagerConfig_args)
        return this.equals((modifyNodeManagerConfig_args)that);
      return false;
    }

    public boolean equals(modifyNodeManagerConfig_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_propertyName = true && this.isSetPropertyName();
      boolean that_present_propertyName = true && that.isSetPropertyName();
      if (this_present_propertyName || that_present_propertyName) {
        if (!(this_present_propertyName && that_present_propertyName))
          return false;
        if (!this.propertyName.equals(that.propertyName))
          return false;
      }

      boolean this_present_propertyValue = true && this.isSetPropertyValue();
      boolean that_present_propertyValue = true && that.isSetPropertyValue();
      if (this_present_propertyValue || that_present_propertyValue) {
        if (!(this_present_propertyValue && that_present_propertyValue))
          return false;
        if (!this.propertyValue.equals(that.propertyValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyNodeManagerConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyName()).compareTo(other.isSetPropertyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyName, other.propertyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPropertyValue()).compareTo(other.isSetPropertyValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPropertyValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyValue, other.propertyValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyNodeManagerConfig_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyName:");
      if (this.propertyName == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("propertyValue:");
      if (this.propertyValue == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyValue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nodeId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
      }
      if (propertyName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'propertyName' was not present! Struct: " + toString());
      }
      if (propertyValue == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'propertyValue' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyNodeManagerConfig_argsStandardSchemeFactory implements SchemeFactory {
      public modifyNodeManagerConfig_argsStandardScheme getScheme() {
        return new modifyNodeManagerConfig_argsStandardScheme();
      }
    }

    private static class modifyNodeManagerConfig_argsStandardScheme extends StandardScheme<modifyNodeManagerConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPERTY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.propertyName = iprot.readString();
                struct.setPropertyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROPERTY_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.propertyValue = iprot.readString();
                struct.setPropertyValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.propertyName != null) {
          oprot.writeFieldBegin(PROPERTY_NAME_FIELD_DESC);
          oprot.writeString(struct.propertyName);
          oprot.writeFieldEnd();
        }
        if (struct.propertyValue != null) {
          oprot.writeFieldBegin(PROPERTY_VALUE_FIELD_DESC);
          oprot.writeString(struct.propertyValue);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyNodeManagerConfig_argsTupleSchemeFactory implements SchemeFactory {
      public modifyNodeManagerConfig_argsTupleScheme getScheme() {
        return new modifyNodeManagerConfig_argsTupleScheme();
      }
    }

    private static class modifyNodeManagerConfig_argsTupleScheme extends TupleScheme<modifyNodeManagerConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.nodeId);
        oprot.writeString(struct.propertyName);
        oprot.writeString(struct.propertyValue);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyNodeManagerConfig_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.nodeId = iprot.readString();
        struct.setNodeIdIsSet(true);
        struct.propertyName = iprot.readString();
        struct.setPropertyNameIsSet(true);
        struct.propertyValue = iprot.readString();
        struct.setPropertyValueIsSet(true);
      }
    }

  }

  public static class modifyNodeManagerConfig_result implements org.apache.thrift.TBase<modifyNodeManagerConfig_result, modifyNodeManagerConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyNodeManagerConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyNodeManagerConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyNodeManagerConfig_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyNodeManagerConfig_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyNodeManagerConfig_result.class, metaDataMap);
    }

    public modifyNodeManagerConfig_result() {
    }

    public modifyNodeManagerConfig_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyNodeManagerConfig_result(modifyNodeManagerConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public modifyNodeManagerConfig_result deepCopy() {
      return new modifyNodeManagerConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public modifyNodeManagerConfig_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public modifyNodeManagerConfig_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public modifyNodeManagerConfig_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyNodeManagerConfig_result)
        return this.equals((modifyNodeManagerConfig_result)that);
      return false;
    }

    public boolean equals(modifyNodeManagerConfig_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(modifyNodeManagerConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyNodeManagerConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyNodeManagerConfig_resultStandardSchemeFactory implements SchemeFactory {
      public modifyNodeManagerConfig_resultStandardScheme getScheme() {
        return new modifyNodeManagerConfig_resultStandardScheme();
      }
    }

    private static class modifyNodeManagerConfig_resultStandardScheme extends StandardScheme<modifyNodeManagerConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyNodeManagerConfig_resultTupleSchemeFactory implements SchemeFactory {
      public modifyNodeManagerConfig_resultTupleScheme getScheme() {
        return new modifyNodeManagerConfig_resultTupleScheme();
      }
    }

    private static class modifyNodeManagerConfig_resultTupleScheme extends TupleScheme<modifyNodeManagerConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyNodeManagerConfig_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

}
