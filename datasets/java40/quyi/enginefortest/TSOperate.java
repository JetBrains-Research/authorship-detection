/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.ts;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSOperate {

  /**
   * 定义测评系统操作的服务，并指定服务名称
   */
  public interface Iface {

    /**
     * * 任务批次号生成接口
     *    * 1:submitId 提交者ID
     * 
     * @param submitId
     */
    public String genMissionId(String submitId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 提交应用信息
     * 1:missionId	批次号
     * 2:userApps	应用集合
     * 3:plots   	检测策略
     * 4:useRule		是否使用默认规则（"YES"使用默认规则，"NO"使用自定义规则，需要人工在测评管系统中指定自定义规则）
     * 
     * 
     * @param missionId
     * @param userApps
     * @param plots
     * @param useRule
     */
    public com.nercis.isscp.idl.Result submitMission(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<com.nercis.isscp.idl.PlotsType> plots, String useRule) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 获取指定批次中，指定应用的状态
     * 1:missionId 批次编号
     * 2:userAppId 应用编号
     * 
     * 
     * @param missionId
     * @param userAppId
     */
    public com.nercis.isscp.idl.AppCheckResult queryApp(String missionId, String userAppId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * 导出指定批次结果集
     * 1:missionId 批次编号
     * 
     * 
     * 
     * @param missionId
     */
    public List<com.nercis.isscp.idl.AppCheckResult> queryMission(String missionId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * * 更改指定批次ID与应用ID的应用状态
     * * 1:missionId 批次编号
     *  * 2:userAppId 应用编号
     *  * 3:status 应用状态
     *  * 4:usedPermissions 已用的权限
     *  * 5:stcRD 静态检测结果
     *  * 6:dycRD 动态检测结果
     *  * 7:
     * 
     * @param missionId
     * @param userAppId
     * @param status
     * @param usedPermissions
     * @param stcRD
     * @param dycRD
     * @param virRD
     */
    public com.nercis.isscp.idl.Result updateAppStatus(String missionId, String userAppId, com.nercis.isscp.idl.AppStatus status, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * * 更改指定批次ID与应用ID的应用状态
     * * 1:missionId 批次编号
     *  * 2:userAppId 应用编号
     *  * 3:plotsStatus 检测策略与应用状态
     *  * 4:usedPermissions 已用的权限
     *  * 5:stcRD 静态检测结果
     *  * 6:dycRD 动态检测结果
     *  * 7:
     * 
     * @param missionId
     * @param userAppId
     * @param plotsStatus
     * @param usedPermissions
     * @param stcRD
     * @param dycRD
     * @param virRD
     */
    public com.nercis.isscp.idl.Result updateUserAppInfo(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * * 更改指定批次ID与应用ID的应用状态
     * * 1:missionId 批次编号
     *  * 2:userAppId 应用编号
     *  * 3:plotsStatus 检测策略与应用状态
     *  * 4:functionStatus 第三方檢測状态
     * 
     * @param missionId
     * @param userAppId
     * @param plotsStatus
     * @param functionStatus
     */
    public com.nercis.isscp.idl.Result updateUserAppStatus(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

    /**
     * node 心跳
     * 
     * @param nodeHeat
     * @param timestamp
     */
    public com.nercis.isscp.idl.Result heart(NodeHeat nodeHeat, long timestamp) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void genMissionId(String submitId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitMission(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<com.nercis.isscp.idl.PlotsType> plots, String useRule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryApp(String missionId, String userAppId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMission(String missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAppStatus(String missionId, String userAppId, com.nercis.isscp.idl.AppStatus status, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserAppInfo(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserAppStatus(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void heart(NodeHeat nodeHeat, long timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String genMissionId(String submitId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_genMissionId(submitId);
      return recv_genMissionId();
    }

    public void send_genMissionId(String submitId) throws org.apache.thrift.TException
    {
      genMissionId_args args = new genMissionId_args();
      args.setSubmitId(submitId);
      sendBase("genMissionId", args);
    }

    public String recv_genMissionId() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      genMissionId_result result = new genMissionId_result();
      receiveBase(result, "genMissionId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "genMissionId failed: unknown result");
    }

    public com.nercis.isscp.idl.Result submitMission(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<com.nercis.isscp.idl.PlotsType> plots, String useRule) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_submitMission(missionId, userApps, plots, useRule);
      return recv_submitMission();
    }

    public void send_submitMission(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<com.nercis.isscp.idl.PlotsType> plots, String useRule) throws org.apache.thrift.TException
    {
      submitMission_args args = new submitMission_args();
      args.setMissionId(missionId);
      args.setUserApps(userApps);
      args.setPlots(plots);
      args.setUseRule(useRule);
      sendBase("submitMission", args);
    }

    public com.nercis.isscp.idl.Result recv_submitMission() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      submitMission_result result = new submitMission_result();
      receiveBase(result, "submitMission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitMission failed: unknown result");
    }

    public com.nercis.isscp.idl.AppCheckResult queryApp(String missionId, String userAppId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_queryApp(missionId, userAppId);
      return recv_queryApp();
    }

    public void send_queryApp(String missionId, String userAppId) throws org.apache.thrift.TException
    {
      queryApp_args args = new queryApp_args();
      args.setMissionId(missionId);
      args.setUserAppId(userAppId);
      sendBase("queryApp", args);
    }

    public com.nercis.isscp.idl.AppCheckResult recv_queryApp() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      queryApp_result result = new queryApp_result();
      receiveBase(result, "queryApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryApp failed: unknown result");
    }

    public List<com.nercis.isscp.idl.AppCheckResult> queryMission(String missionId) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_queryMission(missionId);
      return recv_queryMission();
    }

    public void send_queryMission(String missionId) throws org.apache.thrift.TException
    {
      queryMission_args args = new queryMission_args();
      args.setMissionId(missionId);
      sendBase("queryMission", args);
    }

    public List<com.nercis.isscp.idl.AppCheckResult> recv_queryMission() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      queryMission_result result = new queryMission_result();
      receiveBase(result, "queryMission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMission failed: unknown result");
    }

    public com.nercis.isscp.idl.Result updateAppStatus(String missionId, String userAppId, com.nercis.isscp.idl.AppStatus status, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_updateAppStatus(missionId, userAppId, status, usedPermissions, stcRD, dycRD, virRD);
      return recv_updateAppStatus();
    }

    public void send_updateAppStatus(String missionId, String userAppId, com.nercis.isscp.idl.AppStatus status, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) throws org.apache.thrift.TException
    {
      updateAppStatus_args args = new updateAppStatus_args();
      args.setMissionId(missionId);
      args.setUserAppId(userAppId);
      args.setStatus(status);
      args.setUsedPermissions(usedPermissions);
      args.setStcRD(stcRD);
      args.setDycRD(dycRD);
      args.setVirRD(virRD);
      sendBase("updateAppStatus", args);
    }

    public com.nercis.isscp.idl.Result recv_updateAppStatus() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      updateAppStatus_result result = new updateAppStatus_result();
      receiveBase(result, "updateAppStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAppStatus failed: unknown result");
    }

    public com.nercis.isscp.idl.Result updateUserAppInfo(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_updateUserAppInfo(missionId, userAppId, plotsStatus, usedPermissions, stcRD, dycRD, virRD);
      return recv_updateUserAppInfo();
    }

    public void send_updateUserAppInfo(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) throws org.apache.thrift.TException
    {
      updateUserAppInfo_args args = new updateUserAppInfo_args();
      args.setMissionId(missionId);
      args.setUserAppId(userAppId);
      args.setPlotsStatus(plotsStatus);
      args.setUsedPermissions(usedPermissions);
      args.setStcRD(stcRD);
      args.setDycRD(dycRD);
      args.setVirRD(virRD);
      sendBase("updateUserAppInfo", args);
    }

    public com.nercis.isscp.idl.Result recv_updateUserAppInfo() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      updateUserAppInfo_result result = new updateUserAppInfo_result();
      receiveBase(result, "updateUserAppInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserAppInfo failed: unknown result");
    }

    public com.nercis.isscp.idl.Result updateUserAppStatus(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_updateUserAppStatus(missionId, userAppId, plotsStatus, functionStatus);
      return recv_updateUserAppStatus();
    }

    public void send_updateUserAppStatus(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus) throws org.apache.thrift.TException
    {
      updateUserAppStatus_args args = new updateUserAppStatus_args();
      args.setMissionId(missionId);
      args.setUserAppId(userAppId);
      args.setPlotsStatus(plotsStatus);
      args.setFunctionStatus(functionStatus);
      sendBase("updateUserAppStatus", args);
    }

    public com.nercis.isscp.idl.Result recv_updateUserAppStatus() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      updateUserAppStatus_result result = new updateUserAppStatus_result();
      receiveBase(result, "updateUserAppStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserAppStatus failed: unknown result");
    }

    public com.nercis.isscp.idl.Result heart(NodeHeat nodeHeat, long timestamp) throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      send_heart(nodeHeat, timestamp);
      return recv_heart();
    }

    public void send_heart(NodeHeat nodeHeat, long timestamp) throws org.apache.thrift.TException
    {
      heart_args args = new heart_args();
      args.setNodeHeat(nodeHeat);
      args.setTimestamp(timestamp);
      sendBase("heart", args);
    }

    public com.nercis.isscp.idl.Result recv_heart() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException
    {
      heart_result result = new heart_result();
      receiveBase(result, "heart");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "heart failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void genMissionId(String submitId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      genMissionId_call method_call = new genMissionId_call(submitId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class genMissionId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String submitId;
      public genMissionId_call(String submitId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.submitId = submitId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("genMissionId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        genMissionId_args args = new genMissionId_args();
        args.setSubmitId(submitId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_genMissionId();
      }
    }

    public void submitMission(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<com.nercis.isscp.idl.PlotsType> plots, String useRule, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitMission_call method_call = new submitMission_call(missionId, userApps, plots, useRule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitMission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private List<com.nercis.isscp.idl.UserApp> userApps;
      private List<com.nercis.isscp.idl.PlotsType> plots;
      private String useRule;
      public submitMission_call(String missionId, List<com.nercis.isscp.idl.UserApp> userApps, List<com.nercis.isscp.idl.PlotsType> plots, String useRule, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userApps = userApps;
        this.plots = plots;
        this.useRule = useRule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitMission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitMission_args args = new submitMission_args();
        args.setMissionId(missionId);
        args.setUserApps(userApps);
        args.setPlots(plots);
        args.setUseRule(useRule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitMission();
      }
    }

    public void queryApp(String missionId, String userAppId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryApp_call method_call = new queryApp_call(missionId, userAppId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private String userAppId;
      public queryApp_call(String missionId, String userAppId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userAppId = userAppId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryApp_args args = new queryApp_args();
        args.setMissionId(missionId);
        args.setUserAppId(userAppId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.AppCheckResult getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryApp();
      }
    }

    public void queryMission(String missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMission_call method_call = new queryMission_call(missionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      public queryMission_call(String missionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMission_args args = new queryMission_args();
        args.setMissionId(missionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.nercis.isscp.idl.AppCheckResult> getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMission();
      }
    }

    public void updateAppStatus(String missionId, String userAppId, com.nercis.isscp.idl.AppStatus status, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAppStatus_call method_call = new updateAppStatus_call(missionId, userAppId, status, usedPermissions, stcRD, dycRD, virRD, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAppStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private String userAppId;
      private com.nercis.isscp.idl.AppStatus status;
      private List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions;
      private com.nercis.isscp.idl.StaticCheckResultData stcRD;
      private com.nercis.isscp.idl.DynamicCheckResultData dycRD;
      private com.nercis.isscp.idl.virus.VirusDetectionResultData virRD;
      public updateAppStatus_call(String missionId, String userAppId, com.nercis.isscp.idl.AppStatus status, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userAppId = userAppId;
        this.status = status;
        this.usedPermissions = usedPermissions;
        this.stcRD = stcRD;
        this.dycRD = dycRD;
        this.virRD = virRD;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAppStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAppStatus_args args = new updateAppStatus_args();
        args.setMissionId(missionId);
        args.setUserAppId(userAppId);
        args.setStatus(status);
        args.setUsedPermissions(usedPermissions);
        args.setStcRD(stcRD);
        args.setDycRD(dycRD);
        args.setVirRD(virRD);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAppStatus();
      }
    }

    public void updateUserAppInfo(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserAppInfo_call method_call = new updateUserAppInfo_call(missionId, userAppId, plotsStatus, usedPermissions, stcRD, dycRD, virRD, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserAppInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private String userAppId;
      private Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus;
      private List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions;
      private com.nercis.isscp.idl.StaticCheckResultData stcRD;
      private com.nercis.isscp.idl.DynamicCheckResultData dycRD;
      private com.nercis.isscp.idl.virus.VirusDetectionResultData virRD;
      public updateUserAppInfo_call(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions, com.nercis.isscp.idl.StaticCheckResultData stcRD, com.nercis.isscp.idl.DynamicCheckResultData dycRD, com.nercis.isscp.idl.virus.VirusDetectionResultData virRD, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userAppId = userAppId;
        this.plotsStatus = plotsStatus;
        this.usedPermissions = usedPermissions;
        this.stcRD = stcRD;
        this.dycRD = dycRD;
        this.virRD = virRD;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserAppInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserAppInfo_args args = new updateUserAppInfo_args();
        args.setMissionId(missionId);
        args.setUserAppId(userAppId);
        args.setPlotsStatus(plotsStatus);
        args.setUsedPermissions(usedPermissions);
        args.setStcRD(stcRD);
        args.setDycRD(dycRD);
        args.setVirRD(virRD);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserAppInfo();
      }
    }

    public void updateUserAppStatus(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserAppStatus_call method_call = new updateUserAppStatus_call(missionId, userAppId, plotsStatus, functionStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserAppStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String missionId;
      private String userAppId;
      private Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus;
      private Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus;
      public updateUserAppStatus_call(String missionId, String userAppId, Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus, Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.missionId = missionId;
        this.userAppId = userAppId;
        this.plotsStatus = plotsStatus;
        this.functionStatus = functionStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserAppStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserAppStatus_args args = new updateUserAppStatus_args();
        args.setMissionId(missionId);
        args.setUserAppId(userAppId);
        args.setPlotsStatus(plotsStatus);
        args.setFunctionStatus(functionStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserAppStatus();
      }
    }

    public void heart(NodeHeat nodeHeat, long timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      heart_call method_call = new heart_call(nodeHeat, timestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class heart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NodeHeat nodeHeat;
      private long timestamp;
      public heart_call(NodeHeat nodeHeat, long timestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeHeat = nodeHeat;
        this.timestamp = timestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("heart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        heart_args args = new heart_args();
        args.setNodeHeat(nodeHeat);
        args.setTimestamp(timestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.nercis.isscp.idl.Result getResult() throws com.nercis.isscp.idl.InvalidRequestException, com.nercis.isscp.idl.UnavailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_heart();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("genMissionId", new genMissionId());
      processMap.put("submitMission", new submitMission());
      processMap.put("queryApp", new queryApp());
      processMap.put("queryMission", new queryMission());
      processMap.put("updateAppStatus", new updateAppStatus());
      processMap.put("updateUserAppInfo", new updateUserAppInfo());
      processMap.put("updateUserAppStatus", new updateUserAppStatus());
      processMap.put("heart", new heart());
      return processMap;
    }

    public static class genMissionId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, genMissionId_args> {
      public genMissionId() {
        super("genMissionId");
      }

      public genMissionId_args getEmptyArgsInstance() {
        return new genMissionId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public genMissionId_result getResult(I iface, genMissionId_args args) throws org.apache.thrift.TException {
        genMissionId_result result = new genMissionId_result();
        try {
          result.success = iface.genMissionId(args.submitId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class submitMission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitMission_args> {
      public submitMission() {
        super("submitMission");
      }

      public submitMission_args getEmptyArgsInstance() {
        return new submitMission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitMission_result getResult(I iface, submitMission_args args) throws org.apache.thrift.TException {
        submitMission_result result = new submitMission_result();
        try {
          result.success = iface.submitMission(args.missionId, args.userApps, args.plots, args.useRule);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class queryApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryApp_args> {
      public queryApp() {
        super("queryApp");
      }

      public queryApp_args getEmptyArgsInstance() {
        return new queryApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryApp_result getResult(I iface, queryApp_args args) throws org.apache.thrift.TException {
        queryApp_result result = new queryApp_result();
        try {
          result.success = iface.queryApp(args.missionId, args.userAppId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class queryMission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMission_args> {
      public queryMission() {
        super("queryMission");
      }

      public queryMission_args getEmptyArgsInstance() {
        return new queryMission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMission_result getResult(I iface, queryMission_args args) throws org.apache.thrift.TException {
        queryMission_result result = new queryMission_result();
        try {
          result.success = iface.queryMission(args.missionId);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class updateAppStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAppStatus_args> {
      public updateAppStatus() {
        super("updateAppStatus");
      }

      public updateAppStatus_args getEmptyArgsInstance() {
        return new updateAppStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAppStatus_result getResult(I iface, updateAppStatus_args args) throws org.apache.thrift.TException {
        updateAppStatus_result result = new updateAppStatus_result();
        try {
          result.success = iface.updateAppStatus(args.missionId, args.userAppId, args.status, args.usedPermissions, args.stcRD, args.dycRD, args.virRD);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class updateUserAppInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserAppInfo_args> {
      public updateUserAppInfo() {
        super("updateUserAppInfo");
      }

      public updateUserAppInfo_args getEmptyArgsInstance() {
        return new updateUserAppInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserAppInfo_result getResult(I iface, updateUserAppInfo_args args) throws org.apache.thrift.TException {
        updateUserAppInfo_result result = new updateUserAppInfo_result();
        try {
          result.success = iface.updateUserAppInfo(args.missionId, args.userAppId, args.plotsStatus, args.usedPermissions, args.stcRD, args.dycRD, args.virRD);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class updateUserAppStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserAppStatus_args> {
      public updateUserAppStatus() {
        super("updateUserAppStatus");
      }

      public updateUserAppStatus_args getEmptyArgsInstance() {
        return new updateUserAppStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserAppStatus_result getResult(I iface, updateUserAppStatus_args args) throws org.apache.thrift.TException {
        updateUserAppStatus_result result = new updateUserAppStatus_result();
        try {
          result.success = iface.updateUserAppStatus(args.missionId, args.userAppId, args.plotsStatus, args.functionStatus);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

    public static class heart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, heart_args> {
      public heart() {
        super("heart");
      }

      public heart_args getEmptyArgsInstance() {
        return new heart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public heart_result getResult(I iface, heart_args args) throws org.apache.thrift.TException {
        heart_result result = new heart_result();
        try {
          result.success = iface.heart(args.nodeHeat, args.timestamp);
        } catch (com.nercis.isscp.idl.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.nercis.isscp.idl.UnavailableException ue) {
          result.ue = ue;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("genMissionId", new genMissionId());
      processMap.put("submitMission", new submitMission());
      processMap.put("queryApp", new queryApp());
      processMap.put("queryMission", new queryMission());
      processMap.put("updateAppStatus", new updateAppStatus());
      processMap.put("updateUserAppInfo", new updateUserAppInfo());
      processMap.put("updateUserAppStatus", new updateUserAppStatus());
      processMap.put("heart", new heart());
      return processMap;
    }

    public static class genMissionId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, genMissionId_args, String> {
      public genMissionId() {
        super("genMissionId");
      }

      public genMissionId_args getEmptyArgsInstance() {
        return new genMissionId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            genMissionId_result result = new genMissionId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            genMissionId_result result = new genMissionId_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, genMissionId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.genMissionId(args.submitId,resultHandler);
      }
    }

    public static class submitMission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitMission_args, com.nercis.isscp.idl.Result> {
      public submitMission() {
        super("submitMission");
      }

      public submitMission_args getEmptyArgsInstance() {
        return new submitMission_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            submitMission_result result = new submitMission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitMission_result result = new submitMission_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitMission_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.submitMission(args.missionId, args.userApps, args.plots, args.useRule,resultHandler);
      }
    }

    public static class queryApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryApp_args, com.nercis.isscp.idl.AppCheckResult> {
      public queryApp() {
        super("queryApp");
      }

      public queryApp_args getEmptyArgsInstance() {
        return new queryApp_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.AppCheckResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.AppCheckResult>() { 
          public void onComplete(com.nercis.isscp.idl.AppCheckResult o) {
            queryApp_result result = new queryApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryApp_result result = new queryApp_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryApp_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.AppCheckResult> resultHandler) throws TException {
        iface.queryApp(args.missionId, args.userAppId,resultHandler);
      }
    }

    public static class queryMission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMission_args, List<com.nercis.isscp.idl.AppCheckResult>> {
      public queryMission() {
        super("queryMission");
      }

      public queryMission_args getEmptyArgsInstance() {
        return new queryMission_args();
      }

      public AsyncMethodCallback<List<com.nercis.isscp.idl.AppCheckResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.nercis.isscp.idl.AppCheckResult>>() { 
          public void onComplete(List<com.nercis.isscp.idl.AppCheckResult> o) {
            queryMission_result result = new queryMission_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMission_result result = new queryMission_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMission_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.nercis.isscp.idl.AppCheckResult>> resultHandler) throws TException {
        iface.queryMission(args.missionId,resultHandler);
      }
    }

    public static class updateAppStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAppStatus_args, com.nercis.isscp.idl.Result> {
      public updateAppStatus() {
        super("updateAppStatus");
      }

      public updateAppStatus_args getEmptyArgsInstance() {
        return new updateAppStatus_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            updateAppStatus_result result = new updateAppStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAppStatus_result result = new updateAppStatus_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAppStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.updateAppStatus(args.missionId, args.userAppId, args.status, args.usedPermissions, args.stcRD, args.dycRD, args.virRD,resultHandler);
      }
    }

    public static class updateUserAppInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserAppInfo_args, com.nercis.isscp.idl.Result> {
      public updateUserAppInfo() {
        super("updateUserAppInfo");
      }

      public updateUserAppInfo_args getEmptyArgsInstance() {
        return new updateUserAppInfo_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            updateUserAppInfo_result result = new updateUserAppInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserAppInfo_result result = new updateUserAppInfo_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserAppInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.updateUserAppInfo(args.missionId, args.userAppId, args.plotsStatus, args.usedPermissions, args.stcRD, args.dycRD, args.virRD,resultHandler);
      }
    }

    public static class updateUserAppStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserAppStatus_args, com.nercis.isscp.idl.Result> {
      public updateUserAppStatus() {
        super("updateUserAppStatus");
      }

      public updateUserAppStatus_args getEmptyArgsInstance() {
        return new updateUserAppStatus_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            updateUserAppStatus_result result = new updateUserAppStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserAppStatus_result result = new updateUserAppStatus_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserAppStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.updateUserAppStatus(args.missionId, args.userAppId, args.plotsStatus, args.functionStatus,resultHandler);
      }
    }

    public static class heart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, heart_args, com.nercis.isscp.idl.Result> {
      public heart() {
        super("heart");
      }

      public heart_args getEmptyArgsInstance() {
        return new heart_args();
      }

      public AsyncMethodCallback<com.nercis.isscp.idl.Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.nercis.isscp.idl.Result>() { 
          public void onComplete(com.nercis.isscp.idl.Result o) {
            heart_result result = new heart_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            heart_result result = new heart_result();
            if (e instanceof com.nercis.isscp.idl.InvalidRequestException) {
                        result.ire = (com.nercis.isscp.idl.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof com.nercis.isscp.idl.UnavailableException) {
                        result.ue = (com.nercis.isscp.idl.UnavailableException) e;
                        result.setUeIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, heart_args args, org.apache.thrift.async.AsyncMethodCallback<com.nercis.isscp.idl.Result> resultHandler) throws TException {
        iface.heart(args.nodeHeat, args.timestamp,resultHandler);
      }
    }

  }

  public static class genMissionId_args implements org.apache.thrift.TBase<genMissionId_args, genMissionId_args._Fields>, java.io.Serializable, Cloneable, Comparable<genMissionId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("genMissionId_args");

    private static final org.apache.thrift.protocol.TField SUBMIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("submitId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new genMissionId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new genMissionId_argsTupleSchemeFactory());
    }

    public String submitId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUBMIT_ID((short)1, "submitId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUBMIT_ID
            return SUBMIT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUBMIT_ID, new org.apache.thrift.meta_data.FieldMetaData("submitId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(genMissionId_args.class, metaDataMap);
    }

    public genMissionId_args() {
    }

    public genMissionId_args(
      String submitId)
    {
      this();
      this.submitId = submitId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public genMissionId_args(genMissionId_args other) {
      if (other.isSetSubmitId()) {
        this.submitId = other.submitId;
      }
    }

    public genMissionId_args deepCopy() {
      return new genMissionId_args(this);
    }

    @Override
    public void clear() {
      this.submitId = null;
    }

    public String getSubmitId() {
      return this.submitId;
    }

    public genMissionId_args setSubmitId(String submitId) {
      this.submitId = submitId;
      return this;
    }

    public void unsetSubmitId() {
      this.submitId = null;
    }

    /** Returns true if field submitId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubmitId() {
      return this.submitId != null;
    }

    public void setSubmitIdIsSet(boolean value) {
      if (!value) {
        this.submitId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUBMIT_ID:
        if (value == null) {
          unsetSubmitId();
        } else {
          setSubmitId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUBMIT_ID:
        return getSubmitId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUBMIT_ID:
        return isSetSubmitId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof genMissionId_args)
        return this.equals((genMissionId_args)that);
      return false;
    }

    public boolean equals(genMissionId_args that) {
      if (that == null)
        return false;

      boolean this_present_submitId = true && this.isSetSubmitId();
      boolean that_present_submitId = true && that.isSetSubmitId();
      if (this_present_submitId || that_present_submitId) {
        if (!(this_present_submitId && that_present_submitId))
          return false;
        if (!this.submitId.equals(that.submitId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(genMissionId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSubmitId()).compareTo(other.isSetSubmitId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubmitId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitId, other.submitId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("genMissionId_args(");
      boolean first = true;

      sb.append("submitId:");
      if (this.submitId == null) {
        sb.append("null");
      } else {
        sb.append(this.submitId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (submitId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'submitId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class genMissionId_argsStandardSchemeFactory implements SchemeFactory {
      public genMissionId_argsStandardScheme getScheme() {
        return new genMissionId_argsStandardScheme();
      }
    }

    private static class genMissionId_argsStandardScheme extends StandardScheme<genMissionId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, genMissionId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUBMIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.submitId = iprot.readString();
                struct.setSubmitIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, genMissionId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.submitId != null) {
          oprot.writeFieldBegin(SUBMIT_ID_FIELD_DESC);
          oprot.writeString(struct.submitId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class genMissionId_argsTupleSchemeFactory implements SchemeFactory {
      public genMissionId_argsTupleScheme getScheme() {
        return new genMissionId_argsTupleScheme();
      }
    }

    private static class genMissionId_argsTupleScheme extends TupleScheme<genMissionId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, genMissionId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.submitId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, genMissionId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.submitId = iprot.readString();
        struct.setSubmitIdIsSet(true);
      }
    }

  }

  public static class genMissionId_result implements org.apache.thrift.TBase<genMissionId_result, genMissionId_result._Fields>, java.io.Serializable, Cloneable, Comparable<genMissionId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("genMissionId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new genMissionId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new genMissionId_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(genMissionId_result.class, metaDataMap);
    }

    public genMissionId_result() {
    }

    public genMissionId_result(
      String success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public genMissionId_result(genMissionId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public genMissionId_result deepCopy() {
      return new genMissionId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public genMissionId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public genMissionId_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public genMissionId_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof genMissionId_result)
        return this.equals((genMissionId_result)that);
      return false;
    }

    public boolean equals(genMissionId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(genMissionId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("genMissionId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class genMissionId_resultStandardSchemeFactory implements SchemeFactory {
      public genMissionId_resultStandardScheme getScheme() {
        return new genMissionId_resultStandardScheme();
      }
    }

    private static class genMissionId_resultStandardScheme extends StandardScheme<genMissionId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, genMissionId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, genMissionId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class genMissionId_resultTupleSchemeFactory implements SchemeFactory {
      public genMissionId_resultTupleScheme getScheme() {
        return new genMissionId_resultTupleScheme();
      }
    }

    private static class genMissionId_resultTupleScheme extends TupleScheme<genMissionId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, genMissionId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, genMissionId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class submitMission_args implements org.apache.thrift.TBase<submitMission_args, submitMission_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitMission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitMission_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APPS_FIELD_DESC = new org.apache.thrift.protocol.TField("userApps", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("plots", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField USE_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("useRule", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitMission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitMission_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public List<com.nercis.isscp.idl.UserApp> userApps; // required
    public List<com.nercis.isscp.idl.PlotsType> plots; // required
    public String useRule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APPS((short)2, "userApps"),
      PLOTS((short)3, "plots"),
      USE_RULE((short)4, "useRule");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APPS
            return USER_APPS;
          case 3: // PLOTS
            return PLOTS;
          case 4: // USE_RULE
            return USE_RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APPS, new org.apache.thrift.meta_data.FieldMetaData("userApps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.UserApp.class))));
      tmpMap.put(_Fields.PLOTS, new org.apache.thrift.meta_data.FieldMetaData("plots", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.PlotsType.class))));
      tmpMap.put(_Fields.USE_RULE, new org.apache.thrift.meta_data.FieldMetaData("useRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitMission_args.class, metaDataMap);
    }

    public submitMission_args() {
    }

    public submitMission_args(
      String missionId,
      List<com.nercis.isscp.idl.UserApp> userApps,
      List<com.nercis.isscp.idl.PlotsType> plots,
      String useRule)
    {
      this();
      this.missionId = missionId;
      this.userApps = userApps;
      this.plots = plots;
      this.useRule = useRule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitMission_args(submitMission_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserApps()) {
        List<com.nercis.isscp.idl.UserApp> __this__userApps = new ArrayList<com.nercis.isscp.idl.UserApp>(other.userApps.size());
        for (com.nercis.isscp.idl.UserApp other_element : other.userApps) {
          __this__userApps.add(new com.nercis.isscp.idl.UserApp(other_element));
        }
        this.userApps = __this__userApps;
      }
      if (other.isSetPlots()) {
        List<com.nercis.isscp.idl.PlotsType> __this__plots = new ArrayList<com.nercis.isscp.idl.PlotsType>(other.plots.size());
        for (com.nercis.isscp.idl.PlotsType other_element : other.plots) {
          __this__plots.add(other_element);
        }
        this.plots = __this__plots;
      }
      if (other.isSetUseRule()) {
        this.useRule = other.useRule;
      }
    }

    public submitMission_args deepCopy() {
      return new submitMission_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userApps = null;
      this.plots = null;
      this.useRule = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public submitMission_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public int getUserAppsSize() {
      return (this.userApps == null) ? 0 : this.userApps.size();
    }

    public java.util.Iterator<com.nercis.isscp.idl.UserApp> getUserAppsIterator() {
      return (this.userApps == null) ? null : this.userApps.iterator();
    }

    public void addToUserApps(com.nercis.isscp.idl.UserApp elem) {
      if (this.userApps == null) {
        this.userApps = new ArrayList<com.nercis.isscp.idl.UserApp>();
      }
      this.userApps.add(elem);
    }

    public List<com.nercis.isscp.idl.UserApp> getUserApps() {
      return this.userApps;
    }

    public submitMission_args setUserApps(List<com.nercis.isscp.idl.UserApp> userApps) {
      this.userApps = userApps;
      return this;
    }

    public void unsetUserApps() {
      this.userApps = null;
    }

    /** Returns true if field userApps is set (has been assigned a value) and false otherwise */
    public boolean isSetUserApps() {
      return this.userApps != null;
    }

    public void setUserAppsIsSet(boolean value) {
      if (!value) {
        this.userApps = null;
      }
    }

    public int getPlotsSize() {
      return (this.plots == null) ? 0 : this.plots.size();
    }

    public java.util.Iterator<com.nercis.isscp.idl.PlotsType> getPlotsIterator() {
      return (this.plots == null) ? null : this.plots.iterator();
    }

    public void addToPlots(com.nercis.isscp.idl.PlotsType elem) {
      if (this.plots == null) {
        this.plots = new ArrayList<com.nercis.isscp.idl.PlotsType>();
      }
      this.plots.add(elem);
    }

    public List<com.nercis.isscp.idl.PlotsType> getPlots() {
      return this.plots;
    }

    public submitMission_args setPlots(List<com.nercis.isscp.idl.PlotsType> plots) {
      this.plots = plots;
      return this;
    }

    public void unsetPlots() {
      this.plots = null;
    }

    /** Returns true if field plots is set (has been assigned a value) and false otherwise */
    public boolean isSetPlots() {
      return this.plots != null;
    }

    public void setPlotsIsSet(boolean value) {
      if (!value) {
        this.plots = null;
      }
    }

    public String getUseRule() {
      return this.useRule;
    }

    public submitMission_args setUseRule(String useRule) {
      this.useRule = useRule;
      return this;
    }

    public void unsetUseRule() {
      this.useRule = null;
    }

    /** Returns true if field useRule is set (has been assigned a value) and false otherwise */
    public boolean isSetUseRule() {
      return this.useRule != null;
    }

    public void setUseRuleIsSet(boolean value) {
      if (!value) {
        this.useRule = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APPS:
        if (value == null) {
          unsetUserApps();
        } else {
          setUserApps((List<com.nercis.isscp.idl.UserApp>)value);
        }
        break;

      case PLOTS:
        if (value == null) {
          unsetPlots();
        } else {
          setPlots((List<com.nercis.isscp.idl.PlotsType>)value);
        }
        break;

      case USE_RULE:
        if (value == null) {
          unsetUseRule();
        } else {
          setUseRule((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APPS:
        return getUserApps();

      case PLOTS:
        return getPlots();

      case USE_RULE:
        return getUseRule();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APPS:
        return isSetUserApps();
      case PLOTS:
        return isSetPlots();
      case USE_RULE:
        return isSetUseRule();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitMission_args)
        return this.equals((submitMission_args)that);
      return false;
    }

    public boolean equals(submitMission_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userApps = true && this.isSetUserApps();
      boolean that_present_userApps = true && that.isSetUserApps();
      if (this_present_userApps || that_present_userApps) {
        if (!(this_present_userApps && that_present_userApps))
          return false;
        if (!this.userApps.equals(that.userApps))
          return false;
      }

      boolean this_present_plots = true && this.isSetPlots();
      boolean that_present_plots = true && that.isSetPlots();
      if (this_present_plots || that_present_plots) {
        if (!(this_present_plots && that_present_plots))
          return false;
        if (!this.plots.equals(that.plots))
          return false;
      }

      boolean this_present_useRule = true && this.isSetUseRule();
      boolean that_present_useRule = true && that.isSetUseRule();
      if (this_present_useRule || that_present_useRule) {
        if (!(this_present_useRule && that_present_useRule))
          return false;
        if (!this.useRule.equals(that.useRule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(submitMission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserApps()).compareTo(other.isSetUserApps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserApps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userApps, other.userApps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlots()).compareTo(other.isSetPlots());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlots()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plots, other.plots);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUseRule()).compareTo(other.isSetUseRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useRule, other.useRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitMission_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userApps:");
      if (this.userApps == null) {
        sb.append("null");
      } else {
        sb.append(this.userApps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("plots:");
      if (this.plots == null) {
        sb.append("null");
      } else {
        sb.append(this.plots);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("useRule:");
      if (this.useRule == null) {
        sb.append("null");
      } else {
        sb.append(this.useRule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitMission_argsStandardSchemeFactory implements SchemeFactory {
      public submitMission_argsStandardScheme getScheme() {
        return new submitMission_argsStandardScheme();
      }
    }

    private static class submitMission_argsStandardScheme extends StandardScheme<submitMission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitMission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.userApps = new ArrayList<com.nercis.isscp.idl.UserApp>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.nercis.isscp.idl.UserApp _elem2;
                    _elem2 = new com.nercis.isscp.idl.UserApp();
                    _elem2.read(iprot);
                    struct.userApps.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setUserAppsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLOTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.plots = new ArrayList<com.nercis.isscp.idl.PlotsType>(_list3.size);
                  for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                  {
                    com.nercis.isscp.idl.PlotsType _elem5;
                    _elem5 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
                    struct.plots.add(_elem5);
                  }
                  iprot.readListEnd();
                }
                struct.setPlotsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USE_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.useRule = iprot.readString();
                struct.setUseRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitMission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userApps != null) {
          oprot.writeFieldBegin(USER_APPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userApps.size()));
            for (com.nercis.isscp.idl.UserApp _iter6 : struct.userApps)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.plots != null) {
          oprot.writeFieldBegin(PLOTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.plots.size()));
            for (com.nercis.isscp.idl.PlotsType _iter7 : struct.plots)
            {
              oprot.writeI32(_iter7.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.useRule != null) {
          oprot.writeFieldBegin(USE_RULE_FIELD_DESC);
          oprot.writeString(struct.useRule);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitMission_argsTupleSchemeFactory implements SchemeFactory {
      public submitMission_argsTupleScheme getScheme() {
        return new submitMission_argsTupleScheme();
      }
    }

    private static class submitMission_argsTupleScheme extends TupleScheme<submitMission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitMission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        BitSet optionals = new BitSet();
        if (struct.isSetUserApps()) {
          optionals.set(0);
        }
        if (struct.isSetPlots()) {
          optionals.set(1);
        }
        if (struct.isSetUseRule()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserApps()) {
          {
            oprot.writeI32(struct.userApps.size());
            for (com.nercis.isscp.idl.UserApp _iter8 : struct.userApps)
            {
              _iter8.write(oprot);
            }
          }
        }
        if (struct.isSetPlots()) {
          {
            oprot.writeI32(struct.plots.size());
            for (com.nercis.isscp.idl.PlotsType _iter9 : struct.plots)
            {
              oprot.writeI32(_iter9.getValue());
            }
          }
        }
        if (struct.isSetUseRule()) {
          oprot.writeString(struct.useRule);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitMission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.userApps = new ArrayList<com.nercis.isscp.idl.UserApp>(_list10.size);
            for (int _i11 = 0; _i11 < _list10.size; ++_i11)
            {
              com.nercis.isscp.idl.UserApp _elem12;
              _elem12 = new com.nercis.isscp.idl.UserApp();
              _elem12.read(iprot);
              struct.userApps.add(_elem12);
            }
          }
          struct.setUserAppsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.plots = new ArrayList<com.nercis.isscp.idl.PlotsType>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.nercis.isscp.idl.PlotsType _elem15;
              _elem15 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
              struct.plots.add(_elem15);
            }
          }
          struct.setPlotsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.useRule = iprot.readString();
          struct.setUseRuleIsSet(true);
        }
      }
    }

  }

  public static class submitMission_result implements org.apache.thrift.TBase<submitMission_result, submitMission_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitMission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitMission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitMission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitMission_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitMission_result.class, metaDataMap);
    }

    public submitMission_result() {
    }

    public submitMission_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitMission_result(submitMission_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public submitMission_result deepCopy() {
      return new submitMission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public submitMission_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public submitMission_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public submitMission_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitMission_result)
        return this.equals((submitMission_result)that);
      return false;
    }

    public boolean equals(submitMission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(submitMission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitMission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitMission_resultStandardSchemeFactory implements SchemeFactory {
      public submitMission_resultStandardScheme getScheme() {
        return new submitMission_resultStandardScheme();
      }
    }

    private static class submitMission_resultStandardScheme extends StandardScheme<submitMission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitMission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitMission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitMission_resultTupleSchemeFactory implements SchemeFactory {
      public submitMission_resultTupleScheme getScheme() {
        return new submitMission_resultTupleScheme();
      }
    }

    private static class submitMission_resultTupleScheme extends TupleScheme<submitMission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitMission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitMission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class queryApp_args implements org.apache.thrift.TBase<queryApp_args, queryApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryApp_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userAppId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryApp_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public String userAppId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APP_ID((short)2, "userAppId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APP_ID
            return USER_APP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("userAppId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryApp_args.class, metaDataMap);
    }

    public queryApp_args() {
    }

    public queryApp_args(
      String missionId,
      String userAppId)
    {
      this();
      this.missionId = missionId;
      this.userAppId = userAppId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryApp_args(queryApp_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserAppId()) {
        this.userAppId = other.userAppId;
      }
    }

    public queryApp_args deepCopy() {
      return new queryApp_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userAppId = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public queryApp_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public String getUserAppId() {
      return this.userAppId;
    }

    public queryApp_args setUserAppId(String userAppId) {
      this.userAppId = userAppId;
      return this;
    }

    public void unsetUserAppId() {
      this.userAppId = null;
    }

    /** Returns true if field userAppId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAppId() {
      return this.userAppId != null;
    }

    public void setUserAppIdIsSet(boolean value) {
      if (!value) {
        this.userAppId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APP_ID:
        if (value == null) {
          unsetUserAppId();
        } else {
          setUserAppId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APP_ID:
        return getUserAppId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APP_ID:
        return isSetUserAppId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryApp_args)
        return this.equals((queryApp_args)that);
      return false;
    }

    public boolean equals(queryApp_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userAppId = true && this.isSetUserAppId();
      boolean that_present_userAppId = true && that.isSetUserAppId();
      if (this_present_userAppId || that_present_userAppId) {
        if (!(this_present_userAppId && that_present_userAppId))
          return false;
        if (!this.userAppId.equals(that.userAppId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAppId()).compareTo(other.isSetUserAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAppId, other.userAppId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryApp_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAppId:");
      if (this.userAppId == null) {
        sb.append("null");
      } else {
        sb.append(this.userAppId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      if (userAppId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userAppId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryApp_argsStandardScheme getScheme() {
        return new queryApp_argsStandardScheme();
      }
    }

    private static class queryApp_argsStandardScheme extends StandardScheme<queryApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAppId = iprot.readString();
                struct.setUserAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userAppId != null) {
          oprot.writeFieldBegin(USER_APP_ID_FIELD_DESC);
          oprot.writeString(struct.userAppId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryApp_argsTupleScheme getScheme() {
        return new queryApp_argsTupleScheme();
      }
    }

    private static class queryApp_argsTupleScheme extends TupleScheme<queryApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        oprot.writeString(struct.userAppId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        struct.userAppId = iprot.readString();
        struct.setUserAppIdIsSet(true);
      }
    }

  }

  public static class queryApp_result implements org.apache.thrift.TBase<queryApp_result, queryApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryApp_resultTupleSchemeFactory());
    }

    public com.nercis.isscp.idl.AppCheckResult success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.AppCheckResult.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryApp_result.class, metaDataMap);
    }

    public queryApp_result() {
    }

    public queryApp_result(
      com.nercis.isscp.idl.AppCheckResult success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryApp_result(queryApp_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.nercis.isscp.idl.AppCheckResult(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public queryApp_result deepCopy() {
      return new queryApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public com.nercis.isscp.idl.AppCheckResult getSuccess() {
      return this.success;
    }

    public queryApp_result setSuccess(com.nercis.isscp.idl.AppCheckResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public queryApp_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public queryApp_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.AppCheckResult)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryApp_result)
        return this.equals((queryApp_result)that);
      return false;
    }

    public boolean equals(queryApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryApp_resultStandardScheme getScheme() {
        return new queryApp_resultStandardScheme();
      }
    }

    private static class queryApp_resultStandardScheme extends StandardScheme<queryApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.nercis.isscp.idl.AppCheckResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryApp_resultTupleScheme getScheme() {
        return new queryApp_resultTupleScheme();
      }
    }

    private static class queryApp_resultTupleScheme extends TupleScheme<queryApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new com.nercis.isscp.idl.AppCheckResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class queryMission_args implements org.apache.thrift.TBase<queryMission_args, queryMission_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMission_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMission_argsTupleSchemeFactory());
    }

    public String missionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMission_args.class, metaDataMap);
    }

    public queryMission_args() {
    }

    public queryMission_args(
      String missionId)
    {
      this();
      this.missionId = missionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMission_args(queryMission_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
    }

    public queryMission_args deepCopy() {
      return new queryMission_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public queryMission_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMission_args)
        return this.equals((queryMission_args)that);
      return false;
    }

    public boolean equals(queryMission_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryMission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMission_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMission_argsStandardSchemeFactory implements SchemeFactory {
      public queryMission_argsStandardScheme getScheme() {
        return new queryMission_argsStandardScheme();
      }
    }

    private static class queryMission_argsStandardScheme extends StandardScheme<queryMission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMission_argsTupleSchemeFactory implements SchemeFactory {
      public queryMission_argsTupleScheme getScheme() {
        return new queryMission_argsTupleScheme();
      }
    }

    private static class queryMission_argsTupleScheme extends TupleScheme<queryMission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMission_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
      }
    }

  }

  public static class queryMission_result implements org.apache.thrift.TBase<queryMission_result, queryMission_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMission_resultTupleSchemeFactory());
    }

    public List<com.nercis.isscp.idl.AppCheckResult> success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.AppCheckResult.class))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMission_result.class, metaDataMap);
    }

    public queryMission_result() {
    }

    public queryMission_result(
      List<com.nercis.isscp.idl.AppCheckResult> success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMission_result(queryMission_result other) {
      if (other.isSetSuccess()) {
        List<com.nercis.isscp.idl.AppCheckResult> __this__success = new ArrayList<com.nercis.isscp.idl.AppCheckResult>(other.success.size());
        for (com.nercis.isscp.idl.AppCheckResult other_element : other.success) {
          __this__success.add(new com.nercis.isscp.idl.AppCheckResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public queryMission_result deepCopy() {
      return new queryMission_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.nercis.isscp.idl.AppCheckResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.nercis.isscp.idl.AppCheckResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.nercis.isscp.idl.AppCheckResult>();
      }
      this.success.add(elem);
    }

    public List<com.nercis.isscp.idl.AppCheckResult> getSuccess() {
      return this.success;
    }

    public queryMission_result setSuccess(List<com.nercis.isscp.idl.AppCheckResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public queryMission_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public queryMission_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.nercis.isscp.idl.AppCheckResult>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMission_result)
        return this.equals((queryMission_result)that);
      return false;
    }

    public boolean equals(queryMission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(queryMission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMission_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMission_resultStandardSchemeFactory implements SchemeFactory {
      public queryMission_resultStandardScheme getScheme() {
        return new queryMission_resultStandardScheme();
      }
    }

    private static class queryMission_resultStandardScheme extends StandardScheme<queryMission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.nercis.isscp.idl.AppCheckResult>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    com.nercis.isscp.idl.AppCheckResult _elem18;
                    _elem18 = new com.nercis.isscp.idl.AppCheckResult();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.nercis.isscp.idl.AppCheckResult _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMission_resultTupleSchemeFactory implements SchemeFactory {
      public queryMission_resultTupleScheme getScheme() {
        return new queryMission_resultTupleScheme();
      }
    }

    private static class queryMission_resultTupleScheme extends TupleScheme<queryMission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.nercis.isscp.idl.AppCheckResult _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMission_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.nercis.isscp.idl.AppCheckResult>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              com.nercis.isscp.idl.AppCheckResult _elem23;
              _elem23 = new com.nercis.isscp.idl.AppCheckResult();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class updateAppStatus_args implements org.apache.thrift.TBase<updateAppStatus_args, updateAppStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppStatus_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userAppId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField USED_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("usedPermissions", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField STC_RD_FIELD_DESC = new org.apache.thrift.protocol.TField("stcRD", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField DYC_RD_FIELD_DESC = new org.apache.thrift.protocol.TField("dycRD", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField VIR_RD_FIELD_DESC = new org.apache.thrift.protocol.TField("virRD", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppStatus_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public String userAppId; // required
    /**
     * 
     * @see com.nercis.isscp.idl.AppStatus
     */
    public com.nercis.isscp.idl.AppStatus status; // required
    public List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions; // required
    public com.nercis.isscp.idl.StaticCheckResultData stcRD; // required
    public com.nercis.isscp.idl.DynamicCheckResultData dycRD; // required
    public com.nercis.isscp.idl.virus.VirusDetectionResultData virRD; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APP_ID((short)2, "userAppId"),
      /**
       * 
       * @see com.nercis.isscp.idl.AppStatus
       */
      STATUS((short)3, "status"),
      USED_PERMISSIONS((short)4, "usedPermissions"),
      STC_RD((short)5, "stcRD"),
      DYC_RD((short)6, "dycRD"),
      VIR_RD((short)7, "virRD");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APP_ID
            return USER_APP_ID;
          case 3: // STATUS
            return STATUS;
          case 4: // USED_PERMISSIONS
            return USED_PERMISSIONS;
          case 5: // STC_RD
            return STC_RD;
          case 6: // DYC_RD
            return DYC_RD;
          case 7: // VIR_RD
            return VIR_RD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("userAppId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.AppStatus.class)));
      tmpMap.put(_Fields.USED_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("usedPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP              , "permissionResults"))));
      tmpMap.put(_Fields.STC_RD, new org.apache.thrift.meta_data.FieldMetaData("stcRD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.StaticCheckResultData.class)));
      tmpMap.put(_Fields.DYC_RD, new org.apache.thrift.meta_data.FieldMetaData("dycRD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.DynamicCheckResultData.class)));
      tmpMap.put(_Fields.VIR_RD, new org.apache.thrift.meta_data.FieldMetaData("virRD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.virus.VirusDetectionResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppStatus_args.class, metaDataMap);
    }

    public updateAppStatus_args() {
    }

    public updateAppStatus_args(
      String missionId,
      String userAppId,
      com.nercis.isscp.idl.AppStatus status,
      List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions,
      com.nercis.isscp.idl.StaticCheckResultData stcRD,
      com.nercis.isscp.idl.DynamicCheckResultData dycRD,
      com.nercis.isscp.idl.virus.VirusDetectionResultData virRD)
    {
      this();
      this.missionId = missionId;
      this.userAppId = userAppId;
      this.status = status;
      this.usedPermissions = usedPermissions;
      this.stcRD = stcRD;
      this.dycRD = dycRD;
      this.virRD = virRD;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppStatus_args(updateAppStatus_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserAppId()) {
        this.userAppId = other.userAppId;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetUsedPermissions()) {
        List<Map<String,com.nercis.isscp.idl.APICheck>> __this__usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>(other.usedPermissions.size());
        for (Map<String,com.nercis.isscp.idl.APICheck> other_element : other.usedPermissions) {
          __this__usedPermissions.add(other_element);
        }
        this.usedPermissions = __this__usedPermissions;
      }
      if (other.isSetStcRD()) {
        this.stcRD = new com.nercis.isscp.idl.StaticCheckResultData(other.stcRD);
      }
      if (other.isSetDycRD()) {
        this.dycRD = new com.nercis.isscp.idl.DynamicCheckResultData(other.dycRD);
      }
      if (other.isSetVirRD()) {
        this.virRD = new com.nercis.isscp.idl.virus.VirusDetectionResultData(other.virRD);
      }
    }

    public updateAppStatus_args deepCopy() {
      return new updateAppStatus_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userAppId = null;
      this.status = null;
      this.usedPermissions = null;
      this.stcRD = null;
      this.dycRD = null;
      this.virRD = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public updateAppStatus_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public String getUserAppId() {
      return this.userAppId;
    }

    public updateAppStatus_args setUserAppId(String userAppId) {
      this.userAppId = userAppId;
      return this;
    }

    public void unsetUserAppId() {
      this.userAppId = null;
    }

    /** Returns true if field userAppId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAppId() {
      return this.userAppId != null;
    }

    public void setUserAppIdIsSet(boolean value) {
      if (!value) {
        this.userAppId = null;
      }
    }

    /**
     * 
     * @see com.nercis.isscp.idl.AppStatus
     */
    public com.nercis.isscp.idl.AppStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.AppStatus
     */
    public updateAppStatus_args setStatus(com.nercis.isscp.idl.AppStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public int getUsedPermissionsSize() {
      return (this.usedPermissions == null) ? 0 : this.usedPermissions.size();
    }

    public java.util.Iterator<Map<String,com.nercis.isscp.idl.APICheck>> getUsedPermissionsIterator() {
      return (this.usedPermissions == null) ? null : this.usedPermissions.iterator();
    }

    public void addToUsedPermissions(Map<String,com.nercis.isscp.idl.APICheck> elem) {
      if (this.usedPermissions == null) {
        this.usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>();
      }
      this.usedPermissions.add(elem);
    }

    public List<Map<String,com.nercis.isscp.idl.APICheck>> getUsedPermissions() {
      return this.usedPermissions;
    }

    public updateAppStatus_args setUsedPermissions(List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions) {
      this.usedPermissions = usedPermissions;
      return this;
    }

    public void unsetUsedPermissions() {
      this.usedPermissions = null;
    }

    /** Returns true if field usedPermissions is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedPermissions() {
      return this.usedPermissions != null;
    }

    public void setUsedPermissionsIsSet(boolean value) {
      if (!value) {
        this.usedPermissions = null;
      }
    }

    public com.nercis.isscp.idl.StaticCheckResultData getStcRD() {
      return this.stcRD;
    }

    public updateAppStatus_args setStcRD(com.nercis.isscp.idl.StaticCheckResultData stcRD) {
      this.stcRD = stcRD;
      return this;
    }

    public void unsetStcRD() {
      this.stcRD = null;
    }

    /** Returns true if field stcRD is set (has been assigned a value) and false otherwise */
    public boolean isSetStcRD() {
      return this.stcRD != null;
    }

    public void setStcRDIsSet(boolean value) {
      if (!value) {
        this.stcRD = null;
      }
    }

    public com.nercis.isscp.idl.DynamicCheckResultData getDycRD() {
      return this.dycRD;
    }

    public updateAppStatus_args setDycRD(com.nercis.isscp.idl.DynamicCheckResultData dycRD) {
      this.dycRD = dycRD;
      return this;
    }

    public void unsetDycRD() {
      this.dycRD = null;
    }

    /** Returns true if field dycRD is set (has been assigned a value) and false otherwise */
    public boolean isSetDycRD() {
      return this.dycRD != null;
    }

    public void setDycRDIsSet(boolean value) {
      if (!value) {
        this.dycRD = null;
      }
    }

    public com.nercis.isscp.idl.virus.VirusDetectionResultData getVirRD() {
      return this.virRD;
    }

    public updateAppStatus_args setVirRD(com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) {
      this.virRD = virRD;
      return this;
    }

    public void unsetVirRD() {
      this.virRD = null;
    }

    /** Returns true if field virRD is set (has been assigned a value) and false otherwise */
    public boolean isSetVirRD() {
      return this.virRD != null;
    }

    public void setVirRDIsSet(boolean value) {
      if (!value) {
        this.virRD = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APP_ID:
        if (value == null) {
          unsetUserAppId();
        } else {
          setUserAppId((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.nercis.isscp.idl.AppStatus)value);
        }
        break;

      case USED_PERMISSIONS:
        if (value == null) {
          unsetUsedPermissions();
        } else {
          setUsedPermissions((List<Map<String,com.nercis.isscp.idl.APICheck>>)value);
        }
        break;

      case STC_RD:
        if (value == null) {
          unsetStcRD();
        } else {
          setStcRD((com.nercis.isscp.idl.StaticCheckResultData)value);
        }
        break;

      case DYC_RD:
        if (value == null) {
          unsetDycRD();
        } else {
          setDycRD((com.nercis.isscp.idl.DynamicCheckResultData)value);
        }
        break;

      case VIR_RD:
        if (value == null) {
          unsetVirRD();
        } else {
          setVirRD((com.nercis.isscp.idl.virus.VirusDetectionResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APP_ID:
        return getUserAppId();

      case STATUS:
        return getStatus();

      case USED_PERMISSIONS:
        return getUsedPermissions();

      case STC_RD:
        return getStcRD();

      case DYC_RD:
        return getDycRD();

      case VIR_RD:
        return getVirRD();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APP_ID:
        return isSetUserAppId();
      case STATUS:
        return isSetStatus();
      case USED_PERMISSIONS:
        return isSetUsedPermissions();
      case STC_RD:
        return isSetStcRD();
      case DYC_RD:
        return isSetDycRD();
      case VIR_RD:
        return isSetVirRD();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppStatus_args)
        return this.equals((updateAppStatus_args)that);
      return false;
    }

    public boolean equals(updateAppStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userAppId = true && this.isSetUserAppId();
      boolean that_present_userAppId = true && that.isSetUserAppId();
      if (this_present_userAppId || that_present_userAppId) {
        if (!(this_present_userAppId && that_present_userAppId))
          return false;
        if (!this.userAppId.equals(that.userAppId))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_usedPermissions = true && this.isSetUsedPermissions();
      boolean that_present_usedPermissions = true && that.isSetUsedPermissions();
      if (this_present_usedPermissions || that_present_usedPermissions) {
        if (!(this_present_usedPermissions && that_present_usedPermissions))
          return false;
        if (!this.usedPermissions.equals(that.usedPermissions))
          return false;
      }

      boolean this_present_stcRD = true && this.isSetStcRD();
      boolean that_present_stcRD = true && that.isSetStcRD();
      if (this_present_stcRD || that_present_stcRD) {
        if (!(this_present_stcRD && that_present_stcRD))
          return false;
        if (!this.stcRD.equals(that.stcRD))
          return false;
      }

      boolean this_present_dycRD = true && this.isSetDycRD();
      boolean that_present_dycRD = true && that.isSetDycRD();
      if (this_present_dycRD || that_present_dycRD) {
        if (!(this_present_dycRD && that_present_dycRD))
          return false;
        if (!this.dycRD.equals(that.dycRD))
          return false;
      }

      boolean this_present_virRD = true && this.isSetVirRD();
      boolean that_present_virRD = true && that.isSetVirRD();
      if (this_present_virRD || that_present_virRD) {
        if (!(this_present_virRD && that_present_virRD))
          return false;
        if (!this.virRD.equals(that.virRD))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAppId()).compareTo(other.isSetUserAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAppId, other.userAppId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedPermissions()).compareTo(other.isSetUsedPermissions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedPermissions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedPermissions, other.usedPermissions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStcRD()).compareTo(other.isSetStcRD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStcRD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stcRD, other.stcRD);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDycRD()).compareTo(other.isSetDycRD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDycRD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dycRD, other.dycRD);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVirRD()).compareTo(other.isSetVirRD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirRD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virRD, other.virRD);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppStatus_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAppId:");
      if (this.userAppId == null) {
        sb.append("null");
      } else {
        sb.append(this.userAppId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedPermissions:");
      if (this.usedPermissions == null) {
        sb.append("null");
      } else {
        sb.append(this.usedPermissions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stcRD:");
      if (this.stcRD == null) {
        sb.append("null");
      } else {
        sb.append(this.stcRD);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dycRD:");
      if (this.dycRD == null) {
        sb.append("null");
      } else {
        sb.append(this.dycRD);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("virRD:");
      if (this.virRD == null) {
        sb.append("null");
      } else {
        sb.append(this.virRD);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      if (userAppId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userAppId' was not present! Struct: " + toString());
      }
      if (status == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (stcRD != null) {
        stcRD.validate();
      }
      if (dycRD != null) {
        dycRD.validate();
      }
      if (virRD != null) {
        virRD.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateAppStatus_argsStandardScheme getScheme() {
        return new updateAppStatus_argsStandardScheme();
      }
    }

    private static class updateAppStatus_argsStandardScheme extends StandardScheme<updateAppStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAppId = iprot.readString();
                struct.setUserAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.nercis.isscp.idl.AppStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USED_PERMISSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Map<String,com.nercis.isscp.idl.APICheck> _elem26;
                    {
                      org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                      _elem26 = new HashMap<String,com.nercis.isscp.idl.APICheck>(2*_map27.size);
                      for (int _i28 = 0; _i28 < _map27.size; ++_i28)
                      {
                        String _key29;
                        com.nercis.isscp.idl.APICheck _val30;
                        _key29 = iprot.readString();
                        _val30 = new com.nercis.isscp.idl.APICheck();
                        _val30.read(iprot);
                        _elem26.put(_key29, _val30);
                      }
                      iprot.readMapEnd();
                    }
                    struct.usedPermissions.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setUsedPermissionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STC_RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stcRD = new com.nercis.isscp.idl.StaticCheckResultData();
                struct.stcRD.read(iprot);
                struct.setStcRDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DYC_RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dycRD = new com.nercis.isscp.idl.DynamicCheckResultData();
                struct.dycRD.read(iprot);
                struct.setDycRDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // VIR_RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.virRD = new com.nercis.isscp.idl.virus.VirusDetectionResultData();
                struct.virRD.read(iprot);
                struct.setVirRDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userAppId != null) {
          oprot.writeFieldBegin(USER_APP_ID_FIELD_DESC);
          oprot.writeString(struct.userAppId);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.usedPermissions != null) {
          oprot.writeFieldBegin(USED_PERMISSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.usedPermissions.size()));
            for (Map<String,com.nercis.isscp.idl.APICheck> _iter31 : struct.usedPermissions)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter31.size()));
                for (Map.Entry<String, com.nercis.isscp.idl.APICheck> _iter32 : _iter31.entrySet())
                {
                  oprot.writeString(_iter32.getKey());
                  _iter32.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stcRD != null) {
          oprot.writeFieldBegin(STC_RD_FIELD_DESC);
          struct.stcRD.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dycRD != null) {
          oprot.writeFieldBegin(DYC_RD_FIELD_DESC);
          struct.dycRD.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.virRD != null) {
          oprot.writeFieldBegin(VIR_RD_FIELD_DESC);
          struct.virRD.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateAppStatus_argsTupleScheme getScheme() {
        return new updateAppStatus_argsTupleScheme();
      }
    }

    private static class updateAppStatus_argsTupleScheme extends TupleScheme<updateAppStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        oprot.writeString(struct.userAppId);
        oprot.writeI32(struct.status.getValue());
        BitSet optionals = new BitSet();
        if (struct.isSetUsedPermissions()) {
          optionals.set(0);
        }
        if (struct.isSetStcRD()) {
          optionals.set(1);
        }
        if (struct.isSetDycRD()) {
          optionals.set(2);
        }
        if (struct.isSetVirRD()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUsedPermissions()) {
          {
            oprot.writeI32(struct.usedPermissions.size());
            for (Map<String,com.nercis.isscp.idl.APICheck> _iter33 : struct.usedPermissions)
            {
              {
                oprot.writeI32(_iter33.size());
                for (Map.Entry<String, com.nercis.isscp.idl.APICheck> _iter34 : _iter33.entrySet())
                {
                  oprot.writeString(_iter34.getKey());
                  _iter34.getValue().write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetStcRD()) {
          struct.stcRD.write(oprot);
        }
        if (struct.isSetDycRD()) {
          struct.dycRD.write(oprot);
        }
        if (struct.isSetVirRD()) {
          struct.virRD.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        struct.userAppId = iprot.readString();
        struct.setUserAppIdIsSet(true);
        struct.status = com.nercis.isscp.idl.AppStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>(_list35.size);
            for (int _i36 = 0; _i36 < _list35.size; ++_i36)
            {
              Map<String,com.nercis.isscp.idl.APICheck> _elem37;
              {
                org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem37 = new HashMap<String,com.nercis.isscp.idl.APICheck>(2*_map38.size);
                for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                {
                  String _key40;
                  com.nercis.isscp.idl.APICheck _val41;
                  _key40 = iprot.readString();
                  _val41 = new com.nercis.isscp.idl.APICheck();
                  _val41.read(iprot);
                  _elem37.put(_key40, _val41);
                }
              }
              struct.usedPermissions.add(_elem37);
            }
          }
          struct.setUsedPermissionsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stcRD = new com.nercis.isscp.idl.StaticCheckResultData();
          struct.stcRD.read(iprot);
          struct.setStcRDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dycRD = new com.nercis.isscp.idl.DynamicCheckResultData();
          struct.dycRD.read(iprot);
          struct.setDycRDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.virRD = new com.nercis.isscp.idl.virus.VirusDetectionResultData();
          struct.virRD.read(iprot);
          struct.setVirRDIsSet(true);
        }
      }
    }

  }

  public static class updateAppStatus_result implements org.apache.thrift.TBase<updateAppStatus_result, updateAppStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAppStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAppStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAppStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAppStatus_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAppStatus_result.class, metaDataMap);
    }

    public updateAppStatus_result() {
    }

    public updateAppStatus_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAppStatus_result(updateAppStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public updateAppStatus_result deepCopy() {
      return new updateAppStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public updateAppStatus_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateAppStatus_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public updateAppStatus_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAppStatus_result)
        return this.equals((updateAppStatus_result)that);
      return false;
    }

    public boolean equals(updateAppStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateAppStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAppStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAppStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateAppStatus_resultStandardScheme getScheme() {
        return new updateAppStatus_resultStandardScheme();
      }
    }

    private static class updateAppStatus_resultStandardScheme extends StandardScheme<updateAppStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAppStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAppStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAppStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateAppStatus_resultTupleScheme getScheme() {
        return new updateAppStatus_resultTupleScheme();
      }
    }

    private static class updateAppStatus_resultTupleScheme extends TupleScheme<updateAppStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAppStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAppStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class updateUserAppInfo_args implements org.apache.thrift.TBase<updateUserAppInfo_args, updateUserAppInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserAppInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserAppInfo_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userAppId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PLOTS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("plotsStatus", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField USED_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("usedPermissions", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField STC_RD_FIELD_DESC = new org.apache.thrift.protocol.TField("stcRD", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField DYC_RD_FIELD_DESC = new org.apache.thrift.protocol.TField("dycRD", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField VIR_RD_FIELD_DESC = new org.apache.thrift.protocol.TField("virRD", org.apache.thrift.protocol.TType.STRUCT, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserAppInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserAppInfo_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public String userAppId; // required
    public Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus; // required
    public List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions; // required
    public com.nercis.isscp.idl.StaticCheckResultData stcRD; // required
    public com.nercis.isscp.idl.DynamicCheckResultData dycRD; // required
    public com.nercis.isscp.idl.virus.VirusDetectionResultData virRD; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APP_ID((short)2, "userAppId"),
      PLOTS_STATUS((short)3, "plotsStatus"),
      USED_PERMISSIONS((short)4, "usedPermissions"),
      STC_RD((short)5, "stcRD"),
      DYC_RD((short)6, "dycRD"),
      VIR_RD((short)7, "virRD");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APP_ID
            return USER_APP_ID;
          case 3: // PLOTS_STATUS
            return PLOTS_STATUS;
          case 4: // USED_PERMISSIONS
            return USED_PERMISSIONS;
          case 5: // STC_RD
            return STC_RD;
          case 6: // DYC_RD
            return DYC_RD;
          case 7: // VIR_RD
            return VIR_RD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("userAppId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLOTS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("plotsStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.PlotsType.class), 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.CheckResultStatus.class))));
      tmpMap.put(_Fields.USED_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("usedPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP              , "permissionResults"))));
      tmpMap.put(_Fields.STC_RD, new org.apache.thrift.meta_data.FieldMetaData("stcRD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.StaticCheckResultData.class)));
      tmpMap.put(_Fields.DYC_RD, new org.apache.thrift.meta_data.FieldMetaData("dycRD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.DynamicCheckResultData.class)));
      tmpMap.put(_Fields.VIR_RD, new org.apache.thrift.meta_data.FieldMetaData("virRD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.nercis.isscp.idl.virus.VirusDetectionResultData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserAppInfo_args.class, metaDataMap);
    }

    public updateUserAppInfo_args() {
    }

    public updateUserAppInfo_args(
      String missionId,
      String userAppId,
      Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus,
      List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions,
      com.nercis.isscp.idl.StaticCheckResultData stcRD,
      com.nercis.isscp.idl.DynamicCheckResultData dycRD,
      com.nercis.isscp.idl.virus.VirusDetectionResultData virRD)
    {
      this();
      this.missionId = missionId;
      this.userAppId = userAppId;
      this.plotsStatus = plotsStatus;
      this.usedPermissions = usedPermissions;
      this.stcRD = stcRD;
      this.dycRD = dycRD;
      this.virRD = virRD;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserAppInfo_args(updateUserAppInfo_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserAppId()) {
        this.userAppId = other.userAppId;
      }
      if (other.isSetPlotsStatus()) {
        Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> __this__plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>(other.plotsStatus.size());
        for (Map.Entry<com.nercis.isscp.idl.PlotsType, com.nercis.isscp.idl.CheckResultStatus> other_element : other.plotsStatus.entrySet()) {

          com.nercis.isscp.idl.PlotsType other_element_key = other_element.getKey();
          com.nercis.isscp.idl.CheckResultStatus other_element_value = other_element.getValue();

          com.nercis.isscp.idl.PlotsType __this__plotsStatus_copy_key = other_element_key;

          com.nercis.isscp.idl.CheckResultStatus __this__plotsStatus_copy_value = other_element_value;

          __this__plotsStatus.put(__this__plotsStatus_copy_key, __this__plotsStatus_copy_value);
        }
        this.plotsStatus = __this__plotsStatus;
      }
      if (other.isSetUsedPermissions()) {
        List<Map<String,com.nercis.isscp.idl.APICheck>> __this__usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>(other.usedPermissions.size());
        for (Map<String,com.nercis.isscp.idl.APICheck> other_element : other.usedPermissions) {
          __this__usedPermissions.add(other_element);
        }
        this.usedPermissions = __this__usedPermissions;
      }
      if (other.isSetStcRD()) {
        this.stcRD = new com.nercis.isscp.idl.StaticCheckResultData(other.stcRD);
      }
      if (other.isSetDycRD()) {
        this.dycRD = new com.nercis.isscp.idl.DynamicCheckResultData(other.dycRD);
      }
      if (other.isSetVirRD()) {
        this.virRD = new com.nercis.isscp.idl.virus.VirusDetectionResultData(other.virRD);
      }
    }

    public updateUserAppInfo_args deepCopy() {
      return new updateUserAppInfo_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userAppId = null;
      this.plotsStatus = null;
      this.usedPermissions = null;
      this.stcRD = null;
      this.dycRD = null;
      this.virRD = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public updateUserAppInfo_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public String getUserAppId() {
      return this.userAppId;
    }

    public updateUserAppInfo_args setUserAppId(String userAppId) {
      this.userAppId = userAppId;
      return this;
    }

    public void unsetUserAppId() {
      this.userAppId = null;
    }

    /** Returns true if field userAppId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAppId() {
      return this.userAppId != null;
    }

    public void setUserAppIdIsSet(boolean value) {
      if (!value) {
        this.userAppId = null;
      }
    }

    public int getPlotsStatusSize() {
      return (this.plotsStatus == null) ? 0 : this.plotsStatus.size();
    }

    public void putToPlotsStatus(com.nercis.isscp.idl.PlotsType key, com.nercis.isscp.idl.CheckResultStatus val) {
      if (this.plotsStatus == null) {
        this.plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>();
      }
      this.plotsStatus.put(key, val);
    }

    public Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> getPlotsStatus() {
      return this.plotsStatus;
    }

    public updateUserAppInfo_args setPlotsStatus(Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus) {
      this.plotsStatus = plotsStatus;
      return this;
    }

    public void unsetPlotsStatus() {
      this.plotsStatus = null;
    }

    /** Returns true if field plotsStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetPlotsStatus() {
      return this.plotsStatus != null;
    }

    public void setPlotsStatusIsSet(boolean value) {
      if (!value) {
        this.plotsStatus = null;
      }
    }

    public int getUsedPermissionsSize() {
      return (this.usedPermissions == null) ? 0 : this.usedPermissions.size();
    }

    public java.util.Iterator<Map<String,com.nercis.isscp.idl.APICheck>> getUsedPermissionsIterator() {
      return (this.usedPermissions == null) ? null : this.usedPermissions.iterator();
    }

    public void addToUsedPermissions(Map<String,com.nercis.isscp.idl.APICheck> elem) {
      if (this.usedPermissions == null) {
        this.usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>();
      }
      this.usedPermissions.add(elem);
    }

    public List<Map<String,com.nercis.isscp.idl.APICheck>> getUsedPermissions() {
      return this.usedPermissions;
    }

    public updateUserAppInfo_args setUsedPermissions(List<Map<String,com.nercis.isscp.idl.APICheck>> usedPermissions) {
      this.usedPermissions = usedPermissions;
      return this;
    }

    public void unsetUsedPermissions() {
      this.usedPermissions = null;
    }

    /** Returns true if field usedPermissions is set (has been assigned a value) and false otherwise */
    public boolean isSetUsedPermissions() {
      return this.usedPermissions != null;
    }

    public void setUsedPermissionsIsSet(boolean value) {
      if (!value) {
        this.usedPermissions = null;
      }
    }

    public com.nercis.isscp.idl.StaticCheckResultData getStcRD() {
      return this.stcRD;
    }

    public updateUserAppInfo_args setStcRD(com.nercis.isscp.idl.StaticCheckResultData stcRD) {
      this.stcRD = stcRD;
      return this;
    }

    public void unsetStcRD() {
      this.stcRD = null;
    }

    /** Returns true if field stcRD is set (has been assigned a value) and false otherwise */
    public boolean isSetStcRD() {
      return this.stcRD != null;
    }

    public void setStcRDIsSet(boolean value) {
      if (!value) {
        this.stcRD = null;
      }
    }

    public com.nercis.isscp.idl.DynamicCheckResultData getDycRD() {
      return this.dycRD;
    }

    public updateUserAppInfo_args setDycRD(com.nercis.isscp.idl.DynamicCheckResultData dycRD) {
      this.dycRD = dycRD;
      return this;
    }

    public void unsetDycRD() {
      this.dycRD = null;
    }

    /** Returns true if field dycRD is set (has been assigned a value) and false otherwise */
    public boolean isSetDycRD() {
      return this.dycRD != null;
    }

    public void setDycRDIsSet(boolean value) {
      if (!value) {
        this.dycRD = null;
      }
    }

    public com.nercis.isscp.idl.virus.VirusDetectionResultData getVirRD() {
      return this.virRD;
    }

    public updateUserAppInfo_args setVirRD(com.nercis.isscp.idl.virus.VirusDetectionResultData virRD) {
      this.virRD = virRD;
      return this;
    }

    public void unsetVirRD() {
      this.virRD = null;
    }

    /** Returns true if field virRD is set (has been assigned a value) and false otherwise */
    public boolean isSetVirRD() {
      return this.virRD != null;
    }

    public void setVirRDIsSet(boolean value) {
      if (!value) {
        this.virRD = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APP_ID:
        if (value == null) {
          unsetUserAppId();
        } else {
          setUserAppId((String)value);
        }
        break;

      case PLOTS_STATUS:
        if (value == null) {
          unsetPlotsStatus();
        } else {
          setPlotsStatus((Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>)value);
        }
        break;

      case USED_PERMISSIONS:
        if (value == null) {
          unsetUsedPermissions();
        } else {
          setUsedPermissions((List<Map<String,com.nercis.isscp.idl.APICheck>>)value);
        }
        break;

      case STC_RD:
        if (value == null) {
          unsetStcRD();
        } else {
          setStcRD((com.nercis.isscp.idl.StaticCheckResultData)value);
        }
        break;

      case DYC_RD:
        if (value == null) {
          unsetDycRD();
        } else {
          setDycRD((com.nercis.isscp.idl.DynamicCheckResultData)value);
        }
        break;

      case VIR_RD:
        if (value == null) {
          unsetVirRD();
        } else {
          setVirRD((com.nercis.isscp.idl.virus.VirusDetectionResultData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APP_ID:
        return getUserAppId();

      case PLOTS_STATUS:
        return getPlotsStatus();

      case USED_PERMISSIONS:
        return getUsedPermissions();

      case STC_RD:
        return getStcRD();

      case DYC_RD:
        return getDycRD();

      case VIR_RD:
        return getVirRD();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APP_ID:
        return isSetUserAppId();
      case PLOTS_STATUS:
        return isSetPlotsStatus();
      case USED_PERMISSIONS:
        return isSetUsedPermissions();
      case STC_RD:
        return isSetStcRD();
      case DYC_RD:
        return isSetDycRD();
      case VIR_RD:
        return isSetVirRD();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserAppInfo_args)
        return this.equals((updateUserAppInfo_args)that);
      return false;
    }

    public boolean equals(updateUserAppInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userAppId = true && this.isSetUserAppId();
      boolean that_present_userAppId = true && that.isSetUserAppId();
      if (this_present_userAppId || that_present_userAppId) {
        if (!(this_present_userAppId && that_present_userAppId))
          return false;
        if (!this.userAppId.equals(that.userAppId))
          return false;
      }

      boolean this_present_plotsStatus = true && this.isSetPlotsStatus();
      boolean that_present_plotsStatus = true && that.isSetPlotsStatus();
      if (this_present_plotsStatus || that_present_plotsStatus) {
        if (!(this_present_plotsStatus && that_present_plotsStatus))
          return false;
        if (!this.plotsStatus.equals(that.plotsStatus))
          return false;
      }

      boolean this_present_usedPermissions = true && this.isSetUsedPermissions();
      boolean that_present_usedPermissions = true && that.isSetUsedPermissions();
      if (this_present_usedPermissions || that_present_usedPermissions) {
        if (!(this_present_usedPermissions && that_present_usedPermissions))
          return false;
        if (!this.usedPermissions.equals(that.usedPermissions))
          return false;
      }

      boolean this_present_stcRD = true && this.isSetStcRD();
      boolean that_present_stcRD = true && that.isSetStcRD();
      if (this_present_stcRD || that_present_stcRD) {
        if (!(this_present_stcRD && that_present_stcRD))
          return false;
        if (!this.stcRD.equals(that.stcRD))
          return false;
      }

      boolean this_present_dycRD = true && this.isSetDycRD();
      boolean that_present_dycRD = true && that.isSetDycRD();
      if (this_present_dycRD || that_present_dycRD) {
        if (!(this_present_dycRD && that_present_dycRD))
          return false;
        if (!this.dycRD.equals(that.dycRD))
          return false;
      }

      boolean this_present_virRD = true && this.isSetVirRD();
      boolean that_present_virRD = true && that.isSetVirRD();
      if (this_present_virRD || that_present_virRD) {
        if (!(this_present_virRD && that_present_virRD))
          return false;
        if (!this.virRD.equals(that.virRD))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserAppInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAppId()).compareTo(other.isSetUserAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAppId, other.userAppId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlotsStatus()).compareTo(other.isSetPlotsStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlotsStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plotsStatus, other.plotsStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUsedPermissions()).compareTo(other.isSetUsedPermissions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsedPermissions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedPermissions, other.usedPermissions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStcRD()).compareTo(other.isSetStcRD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStcRD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stcRD, other.stcRD);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDycRD()).compareTo(other.isSetDycRD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDycRD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dycRD, other.dycRD);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVirRD()).compareTo(other.isSetVirRD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirRD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virRD, other.virRD);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserAppInfo_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAppId:");
      if (this.userAppId == null) {
        sb.append("null");
      } else {
        sb.append(this.userAppId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("plotsStatus:");
      if (this.plotsStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.plotsStatus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("usedPermissions:");
      if (this.usedPermissions == null) {
        sb.append("null");
      } else {
        sb.append(this.usedPermissions);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stcRD:");
      if (this.stcRD == null) {
        sb.append("null");
      } else {
        sb.append(this.stcRD);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dycRD:");
      if (this.dycRD == null) {
        sb.append("null");
      } else {
        sb.append(this.dycRD);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("virRD:");
      if (this.virRD == null) {
        sb.append("null");
      } else {
        sb.append(this.virRD);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      if (userAppId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userAppId' was not present! Struct: " + toString());
      }
      if (plotsStatus == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'plotsStatus' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (stcRD != null) {
        stcRD.validate();
      }
      if (dycRD != null) {
        dycRD.validate();
      }
      if (virRD != null) {
        virRD.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserAppInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserAppInfo_argsStandardScheme getScheme() {
        return new updateUserAppInfo_argsStandardScheme();
      }
    }

    private static class updateUserAppInfo_argsStandardScheme extends StandardScheme<updateUserAppInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserAppInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAppId = iprot.readString();
                struct.setUserAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLOTS_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                  struct.plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>(2*_map42.size);
                  for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                  {
                    com.nercis.isscp.idl.PlotsType _key44;
                    com.nercis.isscp.idl.CheckResultStatus _val45;
                    _key44 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
                    _val45 = com.nercis.isscp.idl.CheckResultStatus.findByValue(iprot.readI32());
                    struct.plotsStatus.put(_key44, _val45);
                  }
                  iprot.readMapEnd();
                }
                struct.setPlotsStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USED_PERMISSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                  struct.usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>(_list46.size);
                  for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                  {
                    Map<String,com.nercis.isscp.idl.APICheck> _elem48;
                    {
                      org.apache.thrift.protocol.TMap _map49 = iprot.readMapBegin();
                      _elem48 = new HashMap<String,com.nercis.isscp.idl.APICheck>(2*_map49.size);
                      for (int _i50 = 0; _i50 < _map49.size; ++_i50)
                      {
                        String _key51;
                        com.nercis.isscp.idl.APICheck _val52;
                        _key51 = iprot.readString();
                        _val52 = new com.nercis.isscp.idl.APICheck();
                        _val52.read(iprot);
                        _elem48.put(_key51, _val52);
                      }
                      iprot.readMapEnd();
                    }
                    struct.usedPermissions.add(_elem48);
                  }
                  iprot.readListEnd();
                }
                struct.setUsedPermissionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STC_RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stcRD = new com.nercis.isscp.idl.StaticCheckResultData();
                struct.stcRD.read(iprot);
                struct.setStcRDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DYC_RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dycRD = new com.nercis.isscp.idl.DynamicCheckResultData();
                struct.dycRD.read(iprot);
                struct.setDycRDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // VIR_RD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.virRD = new com.nercis.isscp.idl.virus.VirusDetectionResultData();
                struct.virRD.read(iprot);
                struct.setVirRDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserAppInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userAppId != null) {
          oprot.writeFieldBegin(USER_APP_ID_FIELD_DESC);
          oprot.writeString(struct.userAppId);
          oprot.writeFieldEnd();
        }
        if (struct.plotsStatus != null) {
          oprot.writeFieldBegin(PLOTS_STATUS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.plotsStatus.size()));
            for (Map.Entry<com.nercis.isscp.idl.PlotsType, com.nercis.isscp.idl.CheckResultStatus> _iter53 : struct.plotsStatus.entrySet())
            {
              oprot.writeI32(_iter53.getKey().getValue());
              oprot.writeI32(_iter53.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.usedPermissions != null) {
          oprot.writeFieldBegin(USED_PERMISSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.usedPermissions.size()));
            for (Map<String,com.nercis.isscp.idl.APICheck> _iter54 : struct.usedPermissions)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter54.size()));
                for (Map.Entry<String, com.nercis.isscp.idl.APICheck> _iter55 : _iter54.entrySet())
                {
                  oprot.writeString(_iter55.getKey());
                  _iter55.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.stcRD != null) {
          oprot.writeFieldBegin(STC_RD_FIELD_DESC);
          struct.stcRD.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dycRD != null) {
          oprot.writeFieldBegin(DYC_RD_FIELD_DESC);
          struct.dycRD.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.virRD != null) {
          oprot.writeFieldBegin(VIR_RD_FIELD_DESC);
          struct.virRD.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserAppInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserAppInfo_argsTupleScheme getScheme() {
        return new updateUserAppInfo_argsTupleScheme();
      }
    }

    private static class updateUserAppInfo_argsTupleScheme extends TupleScheme<updateUserAppInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserAppInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        oprot.writeString(struct.userAppId);
        {
          oprot.writeI32(struct.plotsStatus.size());
          for (Map.Entry<com.nercis.isscp.idl.PlotsType, com.nercis.isscp.idl.CheckResultStatus> _iter56 : struct.plotsStatus.entrySet())
          {
            oprot.writeI32(_iter56.getKey().getValue());
            oprot.writeI32(_iter56.getValue().getValue());
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetUsedPermissions()) {
          optionals.set(0);
        }
        if (struct.isSetStcRD()) {
          optionals.set(1);
        }
        if (struct.isSetDycRD()) {
          optionals.set(2);
        }
        if (struct.isSetVirRD()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUsedPermissions()) {
          {
            oprot.writeI32(struct.usedPermissions.size());
            for (Map<String,com.nercis.isscp.idl.APICheck> _iter57 : struct.usedPermissions)
            {
              {
                oprot.writeI32(_iter57.size());
                for (Map.Entry<String, com.nercis.isscp.idl.APICheck> _iter58 : _iter57.entrySet())
                {
                  oprot.writeString(_iter58.getKey());
                  _iter58.getValue().write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetStcRD()) {
          struct.stcRD.write(oprot);
        }
        if (struct.isSetDycRD()) {
          struct.dycRD.write(oprot);
        }
        if (struct.isSetVirRD()) {
          struct.virRD.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserAppInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        struct.userAppId = iprot.readString();
        struct.setUserAppIdIsSet(true);
        {
          org.apache.thrift.protocol.TMap _map59 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>(2*_map59.size);
          for (int _i60 = 0; _i60 < _map59.size; ++_i60)
          {
            com.nercis.isscp.idl.PlotsType _key61;
            com.nercis.isscp.idl.CheckResultStatus _val62;
            _key61 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
            _val62 = com.nercis.isscp.idl.CheckResultStatus.findByValue(iprot.readI32());
            struct.plotsStatus.put(_key61, _val62);
          }
        }
        struct.setPlotsStatusIsSet(true);
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.usedPermissions = new ArrayList<Map<String,com.nercis.isscp.idl.APICheck>>(_list63.size);
            for (int _i64 = 0; _i64 < _list63.size; ++_i64)
            {
              Map<String,com.nercis.isscp.idl.APICheck> _elem65;
              {
                org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem65 = new HashMap<String,com.nercis.isscp.idl.APICheck>(2*_map66.size);
                for (int _i67 = 0; _i67 < _map66.size; ++_i67)
                {
                  String _key68;
                  com.nercis.isscp.idl.APICheck _val69;
                  _key68 = iprot.readString();
                  _val69 = new com.nercis.isscp.idl.APICheck();
                  _val69.read(iprot);
                  _elem65.put(_key68, _val69);
                }
              }
              struct.usedPermissions.add(_elem65);
            }
          }
          struct.setUsedPermissionsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stcRD = new com.nercis.isscp.idl.StaticCheckResultData();
          struct.stcRD.read(iprot);
          struct.setStcRDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dycRD = new com.nercis.isscp.idl.DynamicCheckResultData();
          struct.dycRD.read(iprot);
          struct.setDycRDIsSet(true);
        }
        if (incoming.get(3)) {
          struct.virRD = new com.nercis.isscp.idl.virus.VirusDetectionResultData();
          struct.virRD.read(iprot);
          struct.setVirRDIsSet(true);
        }
      }
    }

  }

  public static class updateUserAppInfo_result implements org.apache.thrift.TBase<updateUserAppInfo_result, updateUserAppInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserAppInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserAppInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserAppInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserAppInfo_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserAppInfo_result.class, metaDataMap);
    }

    public updateUserAppInfo_result() {
    }

    public updateUserAppInfo_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserAppInfo_result(updateUserAppInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public updateUserAppInfo_result deepCopy() {
      return new updateUserAppInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public updateUserAppInfo_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateUserAppInfo_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public updateUserAppInfo_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserAppInfo_result)
        return this.equals((updateUserAppInfo_result)that);
      return false;
    }

    public boolean equals(updateUserAppInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserAppInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserAppInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserAppInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserAppInfo_resultStandardScheme getScheme() {
        return new updateUserAppInfo_resultStandardScheme();
      }
    }

    private static class updateUserAppInfo_resultStandardScheme extends StandardScheme<updateUserAppInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserAppInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserAppInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserAppInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserAppInfo_resultTupleScheme getScheme() {
        return new updateUserAppInfo_resultTupleScheme();
      }
    }

    private static class updateUserAppInfo_resultTupleScheme extends TupleScheme<updateUserAppInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserAppInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserAppInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class updateUserAppStatus_args implements org.apache.thrift.TBase<updateUserAppStatus_args, updateUserAppStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserAppStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserAppStatus_args");

    private static final org.apache.thrift.protocol.TField MISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("missionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userAppId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PLOTS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("plotsStatus", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField FUNCTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("functionStatus", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserAppStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserAppStatus_argsTupleSchemeFactory());
    }

    public String missionId; // required
    public String userAppId; // required
    public Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus; // required
    public Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MISSION_ID((short)1, "missionId"),
      USER_APP_ID((short)2, "userAppId"),
      PLOTS_STATUS((short)3, "plotsStatus"),
      FUNCTION_STATUS((short)4, "functionStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MISSION_ID
            return MISSION_ID;
          case 2: // USER_APP_ID
            return USER_APP_ID;
          case 3: // PLOTS_STATUS
            return PLOTS_STATUS;
          case 4: // FUNCTION_STATUS
            return FUNCTION_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("missionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("userAppId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PLOTS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("plotsStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.PlotsType.class), 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.CheckResultStatus.class))));
      tmpMap.put(_Fields.FUNCTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("functionStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.CheckResultStatus.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserAppStatus_args.class, metaDataMap);
    }

    public updateUserAppStatus_args() {
    }

    public updateUserAppStatus_args(
      String missionId,
      String userAppId,
      Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus,
      Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus)
    {
      this();
      this.missionId = missionId;
      this.userAppId = userAppId;
      this.plotsStatus = plotsStatus;
      this.functionStatus = functionStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserAppStatus_args(updateUserAppStatus_args other) {
      if (other.isSetMissionId()) {
        this.missionId = other.missionId;
      }
      if (other.isSetUserAppId()) {
        this.userAppId = other.userAppId;
      }
      if (other.isSetPlotsStatus()) {
        Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> __this__plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>(other.plotsStatus.size());
        for (Map.Entry<com.nercis.isscp.idl.PlotsType, com.nercis.isscp.idl.CheckResultStatus> other_element : other.plotsStatus.entrySet()) {

          com.nercis.isscp.idl.PlotsType other_element_key = other_element.getKey();
          com.nercis.isscp.idl.CheckResultStatus other_element_value = other_element.getValue();

          com.nercis.isscp.idl.PlotsType __this__plotsStatus_copy_key = other_element_key;

          com.nercis.isscp.idl.CheckResultStatus __this__plotsStatus_copy_value = other_element_value;

          __this__plotsStatus.put(__this__plotsStatus_copy_key, __this__plotsStatus_copy_value);
        }
        this.plotsStatus = __this__plotsStatus;
      }
      if (other.isSetFunctionStatus()) {
        Map<String,com.nercis.isscp.idl.CheckResultStatus> __this__functionStatus = new HashMap<String,com.nercis.isscp.idl.CheckResultStatus>(other.functionStatus.size());
        for (Map.Entry<String, com.nercis.isscp.idl.CheckResultStatus> other_element : other.functionStatus.entrySet()) {

          String other_element_key = other_element.getKey();
          com.nercis.isscp.idl.CheckResultStatus other_element_value = other_element.getValue();

          String __this__functionStatus_copy_key = other_element_key;

          com.nercis.isscp.idl.CheckResultStatus __this__functionStatus_copy_value = other_element_value;

          __this__functionStatus.put(__this__functionStatus_copy_key, __this__functionStatus_copy_value);
        }
        this.functionStatus = __this__functionStatus;
      }
    }

    public updateUserAppStatus_args deepCopy() {
      return new updateUserAppStatus_args(this);
    }

    @Override
    public void clear() {
      this.missionId = null;
      this.userAppId = null;
      this.plotsStatus = null;
      this.functionStatus = null;
    }

    public String getMissionId() {
      return this.missionId;
    }

    public updateUserAppStatus_args setMissionId(String missionId) {
      this.missionId = missionId;
      return this;
    }

    public void unsetMissionId() {
      this.missionId = null;
    }

    /** Returns true if field missionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMissionId() {
      return this.missionId != null;
    }

    public void setMissionIdIsSet(boolean value) {
      if (!value) {
        this.missionId = null;
      }
    }

    public String getUserAppId() {
      return this.userAppId;
    }

    public updateUserAppStatus_args setUserAppId(String userAppId) {
      this.userAppId = userAppId;
      return this;
    }

    public void unsetUserAppId() {
      this.userAppId = null;
    }

    /** Returns true if field userAppId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAppId() {
      return this.userAppId != null;
    }

    public void setUserAppIdIsSet(boolean value) {
      if (!value) {
        this.userAppId = null;
      }
    }

    public int getPlotsStatusSize() {
      return (this.plotsStatus == null) ? 0 : this.plotsStatus.size();
    }

    public void putToPlotsStatus(com.nercis.isscp.idl.PlotsType key, com.nercis.isscp.idl.CheckResultStatus val) {
      if (this.plotsStatus == null) {
        this.plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>();
      }
      this.plotsStatus.put(key, val);
    }

    public Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> getPlotsStatus() {
      return this.plotsStatus;
    }

    public updateUserAppStatus_args setPlotsStatus(Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus> plotsStatus) {
      this.plotsStatus = plotsStatus;
      return this;
    }

    public void unsetPlotsStatus() {
      this.plotsStatus = null;
    }

    /** Returns true if field plotsStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetPlotsStatus() {
      return this.plotsStatus != null;
    }

    public void setPlotsStatusIsSet(boolean value) {
      if (!value) {
        this.plotsStatus = null;
      }
    }

    public int getFunctionStatusSize() {
      return (this.functionStatus == null) ? 0 : this.functionStatus.size();
    }

    public void putToFunctionStatus(String key, com.nercis.isscp.idl.CheckResultStatus val) {
      if (this.functionStatus == null) {
        this.functionStatus = new HashMap<String,com.nercis.isscp.idl.CheckResultStatus>();
      }
      this.functionStatus.put(key, val);
    }

    public Map<String,com.nercis.isscp.idl.CheckResultStatus> getFunctionStatus() {
      return this.functionStatus;
    }

    public updateUserAppStatus_args setFunctionStatus(Map<String,com.nercis.isscp.idl.CheckResultStatus> functionStatus) {
      this.functionStatus = functionStatus;
      return this;
    }

    public void unsetFunctionStatus() {
      this.functionStatus = null;
    }

    /** Returns true if field functionStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetFunctionStatus() {
      return this.functionStatus != null;
    }

    public void setFunctionStatusIsSet(boolean value) {
      if (!value) {
        this.functionStatus = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MISSION_ID:
        if (value == null) {
          unsetMissionId();
        } else {
          setMissionId((String)value);
        }
        break;

      case USER_APP_ID:
        if (value == null) {
          unsetUserAppId();
        } else {
          setUserAppId((String)value);
        }
        break;

      case PLOTS_STATUS:
        if (value == null) {
          unsetPlotsStatus();
        } else {
          setPlotsStatus((Map<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>)value);
        }
        break;

      case FUNCTION_STATUS:
        if (value == null) {
          unsetFunctionStatus();
        } else {
          setFunctionStatus((Map<String,com.nercis.isscp.idl.CheckResultStatus>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MISSION_ID:
        return getMissionId();

      case USER_APP_ID:
        return getUserAppId();

      case PLOTS_STATUS:
        return getPlotsStatus();

      case FUNCTION_STATUS:
        return getFunctionStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MISSION_ID:
        return isSetMissionId();
      case USER_APP_ID:
        return isSetUserAppId();
      case PLOTS_STATUS:
        return isSetPlotsStatus();
      case FUNCTION_STATUS:
        return isSetFunctionStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserAppStatus_args)
        return this.equals((updateUserAppStatus_args)that);
      return false;
    }

    public boolean equals(updateUserAppStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_missionId = true && this.isSetMissionId();
      boolean that_present_missionId = true && that.isSetMissionId();
      if (this_present_missionId || that_present_missionId) {
        if (!(this_present_missionId && that_present_missionId))
          return false;
        if (!this.missionId.equals(that.missionId))
          return false;
      }

      boolean this_present_userAppId = true && this.isSetUserAppId();
      boolean that_present_userAppId = true && that.isSetUserAppId();
      if (this_present_userAppId || that_present_userAppId) {
        if (!(this_present_userAppId && that_present_userAppId))
          return false;
        if (!this.userAppId.equals(that.userAppId))
          return false;
      }

      boolean this_present_plotsStatus = true && this.isSetPlotsStatus();
      boolean that_present_plotsStatus = true && that.isSetPlotsStatus();
      if (this_present_plotsStatus || that_present_plotsStatus) {
        if (!(this_present_plotsStatus && that_present_plotsStatus))
          return false;
        if (!this.plotsStatus.equals(that.plotsStatus))
          return false;
      }

      boolean this_present_functionStatus = true && this.isSetFunctionStatus();
      boolean that_present_functionStatus = true && that.isSetFunctionStatus();
      if (this_present_functionStatus || that_present_functionStatus) {
        if (!(this_present_functionStatus && that_present_functionStatus))
          return false;
        if (!this.functionStatus.equals(that.functionStatus))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserAppStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMissionId()).compareTo(other.isSetMissionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMissionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missionId, other.missionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserAppId()).compareTo(other.isSetUserAppId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAppId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAppId, other.userAppId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlotsStatus()).compareTo(other.isSetPlotsStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlotsStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plotsStatus, other.plotsStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFunctionStatus()).compareTo(other.isSetFunctionStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunctionStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionStatus, other.functionStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserAppStatus_args(");
      boolean first = true;

      sb.append("missionId:");
      if (this.missionId == null) {
        sb.append("null");
      } else {
        sb.append(this.missionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAppId:");
      if (this.userAppId == null) {
        sb.append("null");
      } else {
        sb.append(this.userAppId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("plotsStatus:");
      if (this.plotsStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.plotsStatus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("functionStatus:");
      if (this.functionStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.functionStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (missionId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'missionId' was not present! Struct: " + toString());
      }
      if (userAppId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userAppId' was not present! Struct: " + toString());
      }
      if (plotsStatus == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'plotsStatus' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserAppStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserAppStatus_argsStandardScheme getScheme() {
        return new updateUserAppStatus_argsStandardScheme();
      }
    }

    private static class updateUserAppStatus_argsStandardScheme extends StandardScheme<updateUserAppStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserAppStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MISSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.missionId = iprot.readString();
                struct.setMissionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_APP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAppId = iprot.readString();
                struct.setUserAppIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PLOTS_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                  struct.plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>(2*_map70.size);
                  for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                  {
                    com.nercis.isscp.idl.PlotsType _key72;
                    com.nercis.isscp.idl.CheckResultStatus _val73;
                    _key72 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
                    _val73 = com.nercis.isscp.idl.CheckResultStatus.findByValue(iprot.readI32());
                    struct.plotsStatus.put(_key72, _val73);
                  }
                  iprot.readMapEnd();
                }
                struct.setPlotsStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FUNCTION_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                  struct.functionStatus = new HashMap<String,com.nercis.isscp.idl.CheckResultStatus>(2*_map74.size);
                  for (int _i75 = 0; _i75 < _map74.size; ++_i75)
                  {
                    String _key76;
                    com.nercis.isscp.idl.CheckResultStatus _val77;
                    _key76 = iprot.readString();
                    _val77 = com.nercis.isscp.idl.CheckResultStatus.findByValue(iprot.readI32());
                    struct.functionStatus.put(_key76, _val77);
                  }
                  iprot.readMapEnd();
                }
                struct.setFunctionStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserAppStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.missionId != null) {
          oprot.writeFieldBegin(MISSION_ID_FIELD_DESC);
          oprot.writeString(struct.missionId);
          oprot.writeFieldEnd();
        }
        if (struct.userAppId != null) {
          oprot.writeFieldBegin(USER_APP_ID_FIELD_DESC);
          oprot.writeString(struct.userAppId);
          oprot.writeFieldEnd();
        }
        if (struct.plotsStatus != null) {
          oprot.writeFieldBegin(PLOTS_STATUS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.plotsStatus.size()));
            for (Map.Entry<com.nercis.isscp.idl.PlotsType, com.nercis.isscp.idl.CheckResultStatus> _iter78 : struct.plotsStatus.entrySet())
            {
              oprot.writeI32(_iter78.getKey().getValue());
              oprot.writeI32(_iter78.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.functionStatus != null) {
          oprot.writeFieldBegin(FUNCTION_STATUS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.functionStatus.size()));
            for (Map.Entry<String, com.nercis.isscp.idl.CheckResultStatus> _iter79 : struct.functionStatus.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              oprot.writeI32(_iter79.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserAppStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserAppStatus_argsTupleScheme getScheme() {
        return new updateUserAppStatus_argsTupleScheme();
      }
    }

    private static class updateUserAppStatus_argsTupleScheme extends TupleScheme<updateUserAppStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserAppStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.missionId);
        oprot.writeString(struct.userAppId);
        {
          oprot.writeI32(struct.plotsStatus.size());
          for (Map.Entry<com.nercis.isscp.idl.PlotsType, com.nercis.isscp.idl.CheckResultStatus> _iter80 : struct.plotsStatus.entrySet())
          {
            oprot.writeI32(_iter80.getKey().getValue());
            oprot.writeI32(_iter80.getValue().getValue());
          }
        }
        BitSet optionals = new BitSet();
        if (struct.isSetFunctionStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFunctionStatus()) {
          {
            oprot.writeI32(struct.functionStatus.size());
            for (Map.Entry<String, com.nercis.isscp.idl.CheckResultStatus> _iter81 : struct.functionStatus.entrySet())
            {
              oprot.writeString(_iter81.getKey());
              oprot.writeI32(_iter81.getValue().getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserAppStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.missionId = iprot.readString();
        struct.setMissionIdIsSet(true);
        struct.userAppId = iprot.readString();
        struct.setUserAppIdIsSet(true);
        {
          org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.plotsStatus = new HashMap<com.nercis.isscp.idl.PlotsType,com.nercis.isscp.idl.CheckResultStatus>(2*_map82.size);
          for (int _i83 = 0; _i83 < _map82.size; ++_i83)
          {
            com.nercis.isscp.idl.PlotsType _key84;
            com.nercis.isscp.idl.CheckResultStatus _val85;
            _key84 = com.nercis.isscp.idl.PlotsType.findByValue(iprot.readI32());
            _val85 = com.nercis.isscp.idl.CheckResultStatus.findByValue(iprot.readI32());
            struct.plotsStatus.put(_key84, _val85);
          }
        }
        struct.setPlotsStatusIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.functionStatus = new HashMap<String,com.nercis.isscp.idl.CheckResultStatus>(2*_map86.size);
            for (int _i87 = 0; _i87 < _map86.size; ++_i87)
            {
              String _key88;
              com.nercis.isscp.idl.CheckResultStatus _val89;
              _key88 = iprot.readString();
              _val89 = com.nercis.isscp.idl.CheckResultStatus.findByValue(iprot.readI32());
              struct.functionStatus.put(_key88, _val89);
            }
          }
          struct.setFunctionStatusIsSet(true);
        }
      }
    }

  }

  public static class updateUserAppStatus_result implements org.apache.thrift.TBase<updateUserAppStatus_result, updateUserAppStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserAppStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserAppStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserAppStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserAppStatus_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserAppStatus_result.class, metaDataMap);
    }

    public updateUserAppStatus_result() {
    }

    public updateUserAppStatus_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserAppStatus_result(updateUserAppStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public updateUserAppStatus_result deepCopy() {
      return new updateUserAppStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public updateUserAppStatus_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateUserAppStatus_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public updateUserAppStatus_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserAppStatus_result)
        return this.equals((updateUserAppStatus_result)that);
      return false;
    }

    public boolean equals(updateUserAppStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateUserAppStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserAppStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserAppStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserAppStatus_resultStandardScheme getScheme() {
        return new updateUserAppStatus_resultStandardScheme();
      }
    }

    private static class updateUserAppStatus_resultStandardScheme extends StandardScheme<updateUserAppStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserAppStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserAppStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserAppStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserAppStatus_resultTupleScheme getScheme() {
        return new updateUserAppStatus_resultTupleScheme();
      }
    }

    private static class updateUserAppStatus_resultTupleScheme extends TupleScheme<updateUserAppStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserAppStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserAppStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

  public static class heart_args implements org.apache.thrift.TBase<heart_args, heart_args._Fields>, java.io.Serializable, Cloneable, Comparable<heart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heart_args");

    private static final org.apache.thrift.protocol.TField NODE_HEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeHeat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new heart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new heart_argsTupleSchemeFactory());
    }

    public NodeHeat nodeHeat; // required
    public long timestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_HEAT((short)1, "nodeHeat"),
      TIMESTAMP((short)2, "timestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_HEAT
            return NODE_HEAT;
          case 2: // TIMESTAMP
            return TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_HEAT, new org.apache.thrift.meta_data.FieldMetaData("nodeHeat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeHeat.class)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heart_args.class, metaDataMap);
    }

    public heart_args() {
    }

    public heart_args(
      NodeHeat nodeHeat,
      long timestamp)
    {
      this();
      this.nodeHeat = nodeHeat;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heart_args(heart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeHeat()) {
        this.nodeHeat = new NodeHeat(other.nodeHeat);
      }
      this.timestamp = other.timestamp;
    }

    public heart_args deepCopy() {
      return new heart_args(this);
    }

    @Override
    public void clear() {
      this.nodeHeat = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
    }

    public NodeHeat getNodeHeat() {
      return this.nodeHeat;
    }

    public heart_args setNodeHeat(NodeHeat nodeHeat) {
      this.nodeHeat = nodeHeat;
      return this;
    }

    public void unsetNodeHeat() {
      this.nodeHeat = null;
    }

    /** Returns true if field nodeHeat is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeHeat() {
      return this.nodeHeat != null;
    }

    public void setNodeHeatIsSet(boolean value) {
      if (!value) {
        this.nodeHeat = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public heart_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_HEAT:
        if (value == null) {
          unsetNodeHeat();
        } else {
          setNodeHeat((NodeHeat)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_HEAT:
        return getNodeHeat();

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_HEAT:
        return isSetNodeHeat();
      case TIMESTAMP:
        return isSetTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof heart_args)
        return this.equals((heart_args)that);
      return false;
    }

    public boolean equals(heart_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeHeat = true && this.isSetNodeHeat();
      boolean that_present_nodeHeat = true && that.isSetNodeHeat();
      if (this_present_nodeHeat || that_present_nodeHeat) {
        if (!(this_present_nodeHeat && that_present_nodeHeat))
          return false;
        if (!this.nodeHeat.equals(that.nodeHeat))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(heart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNodeHeat()).compareTo(other.isSetNodeHeat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeHeat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeHeat, other.nodeHeat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("heart_args(");
      boolean first = true;

      sb.append("nodeHeat:");
      if (this.nodeHeat == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeHeat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (nodeHeat == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeHeat' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (nodeHeat != null) {
        nodeHeat.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heart_argsStandardSchemeFactory implements SchemeFactory {
      public heart_argsStandardScheme getScheme() {
        return new heart_argsStandardScheme();
      }
    }

    private static class heart_argsStandardScheme extends StandardScheme<heart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_HEAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeHeat = new NodeHeat();
                struct.nodeHeat.read(iprot);
                struct.setNodeHeatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetTimestamp()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeHeat != null) {
          oprot.writeFieldBegin(NODE_HEAT_FIELD_DESC);
          struct.nodeHeat.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heart_argsTupleSchemeFactory implements SchemeFactory {
      public heart_argsTupleScheme getScheme() {
        return new heart_argsTupleScheme();
      }
    }

    private static class heart_argsTupleScheme extends TupleScheme<heart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.nodeHeat.write(oprot);
        oprot.writeI64(struct.timestamp);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.nodeHeat = new NodeHeat();
        struct.nodeHeat.read(iprot);
        struct.setNodeHeatIsSet(true);
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }

  }

  public static class heart_result implements org.apache.thrift.TBase<heart_result, heart_result._Fields>, java.io.Serializable, Cloneable, Comparable<heart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heart_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new heart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new heart_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result success; // required
    public com.nercis.isscp.idl.InvalidRequestException ire; // required
    public com.nercis.isscp.idl.UnavailableException ue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.nercis.isscp.idl.Result
       */
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.nercis.isscp.idl.Result.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heart_result.class, metaDataMap);
    }

    public heart_result() {
    }

    public heart_result(
      com.nercis.isscp.idl.Result success,
      com.nercis.isscp.idl.InvalidRequestException ire,
      com.nercis.isscp.idl.UnavailableException ue)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heart_result(heart_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new com.nercis.isscp.idl.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.nercis.isscp.idl.UnavailableException(other.ue);
      }
    }

    public heart_result deepCopy() {
      return new heart_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public com.nercis.isscp.idl.Result getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.nercis.isscp.idl.Result
     */
    public heart_result setSuccess(com.nercis.isscp.idl.Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.nercis.isscp.idl.InvalidRequestException getIre() {
      return this.ire;
    }

    public heart_result setIre(com.nercis.isscp.idl.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.nercis.isscp.idl.UnavailableException getUe() {
      return this.ue;
    }

    public heart_result setUe(com.nercis.isscp.idl.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.nercis.isscp.idl.Result)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.nercis.isscp.idl.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.nercis.isscp.idl.UnavailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof heart_result)
        return this.equals((heart_result)that);
      return false;
    }

    public boolean equals(heart_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(heart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("heart_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heart_resultStandardSchemeFactory implements SchemeFactory {
      public heart_resultStandardScheme getScheme() {
        return new heart_resultStandardScheme();
      }
    }

    private static class heart_resultStandardScheme extends StandardScheme<heart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.nercis.isscp.idl.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heart_resultTupleSchemeFactory implements SchemeFactory {
      public heart_resultTupleScheme getScheme() {
        return new heart_resultTupleScheme();
      }
    }

    private static class heart_resultTupleScheme extends TupleScheme<heart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = com.nercis.isscp.idl.Result.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.nercis.isscp.idl.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.nercis.isscp.idl.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
      }
    }

  }

}
