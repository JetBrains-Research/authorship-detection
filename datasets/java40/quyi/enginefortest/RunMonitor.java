/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义动态检测 运行监视结果
 * 1:string monitorTime 监控时间
 * 2:string screenShotPath 截图所在FTP路径
 * 3:string imageContent 图片内容
 * 4:string checkResult 检测结果
 */
public class RunMonitor implements org.apache.thrift.TBase<RunMonitor, RunMonitor._Fields>, java.io.Serializable, Cloneable, Comparable<RunMonitor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunMonitor");

  private static final org.apache.thrift.protocol.TField MONITOR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("monitorTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCREEN_SHOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("screenShotPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("imageContent", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHECK_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkResult", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RunMonitorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RunMonitorTupleSchemeFactory());
  }

  public String monitorTime; // required
  public String screenShotPath; // required
  public String imageContent; // required
  public String checkResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MONITOR_TIME((short)1, "monitorTime"),
    SCREEN_SHOT_PATH((short)2, "screenShotPath"),
    IMAGE_CONTENT((short)3, "imageContent"),
    CHECK_RESULT((short)4, "checkResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MONITOR_TIME
          return MONITOR_TIME;
        case 2: // SCREEN_SHOT_PATH
          return SCREEN_SHOT_PATH;
        case 3: // IMAGE_CONTENT
          return IMAGE_CONTENT;
        case 4: // CHECK_RESULT
          return CHECK_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MONITOR_TIME, new org.apache.thrift.meta_data.FieldMetaData("monitorTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCREEN_SHOT_PATH, new org.apache.thrift.meta_data.FieldMetaData("screenShotPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("imageContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_RESULT, new org.apache.thrift.meta_data.FieldMetaData("checkResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunMonitor.class, metaDataMap);
  }

  public RunMonitor() {
  }

  public RunMonitor(
    String monitorTime,
    String screenShotPath,
    String imageContent,
    String checkResult)
  {
    this();
    this.monitorTime = monitorTime;
    this.screenShotPath = screenShotPath;
    this.imageContent = imageContent;
    this.checkResult = checkResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RunMonitor(RunMonitor other) {
    if (other.isSetMonitorTime()) {
      this.monitorTime = other.monitorTime;
    }
    if (other.isSetScreenShotPath()) {
      this.screenShotPath = other.screenShotPath;
    }
    if (other.isSetImageContent()) {
      this.imageContent = other.imageContent;
    }
    if (other.isSetCheckResult()) {
      this.checkResult = other.checkResult;
    }
  }

  public RunMonitor deepCopy() {
    return new RunMonitor(this);
  }

  @Override
  public void clear() {
    this.monitorTime = null;
    this.screenShotPath = null;
    this.imageContent = null;
    this.checkResult = null;
  }

  public String getMonitorTime() {
    return this.monitorTime;
  }

  public RunMonitor setMonitorTime(String monitorTime) {
    this.monitorTime = monitorTime;
    return this;
  }

  public void unsetMonitorTime() {
    this.monitorTime = null;
  }

  /** Returns true if field monitorTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorTime() {
    return this.monitorTime != null;
  }

  public void setMonitorTimeIsSet(boolean value) {
    if (!value) {
      this.monitorTime = null;
    }
  }

  public String getScreenShotPath() {
    return this.screenShotPath;
  }

  public RunMonitor setScreenShotPath(String screenShotPath) {
    this.screenShotPath = screenShotPath;
    return this;
  }

  public void unsetScreenShotPath() {
    this.screenShotPath = null;
  }

  /** Returns true if field screenShotPath is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenShotPath() {
    return this.screenShotPath != null;
  }

  public void setScreenShotPathIsSet(boolean value) {
    if (!value) {
      this.screenShotPath = null;
    }
  }

  public String getImageContent() {
    return this.imageContent;
  }

  public RunMonitor setImageContent(String imageContent) {
    this.imageContent = imageContent;
    return this;
  }

  public void unsetImageContent() {
    this.imageContent = null;
  }

  /** Returns true if field imageContent is set (has been assigned a value) and false otherwise */
  public boolean isSetImageContent() {
    return this.imageContent != null;
  }

  public void setImageContentIsSet(boolean value) {
    if (!value) {
      this.imageContent = null;
    }
  }

  public String getCheckResult() {
    return this.checkResult;
  }

  public RunMonitor setCheckResult(String checkResult) {
    this.checkResult = checkResult;
    return this;
  }

  public void unsetCheckResult() {
    this.checkResult = null;
  }

  /** Returns true if field checkResult is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckResult() {
    return this.checkResult != null;
  }

  public void setCheckResultIsSet(boolean value) {
    if (!value) {
      this.checkResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MONITOR_TIME:
      if (value == null) {
        unsetMonitorTime();
      } else {
        setMonitorTime((String)value);
      }
      break;

    case SCREEN_SHOT_PATH:
      if (value == null) {
        unsetScreenShotPath();
      } else {
        setScreenShotPath((String)value);
      }
      break;

    case IMAGE_CONTENT:
      if (value == null) {
        unsetImageContent();
      } else {
        setImageContent((String)value);
      }
      break;

    case CHECK_RESULT:
      if (value == null) {
        unsetCheckResult();
      } else {
        setCheckResult((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MONITOR_TIME:
      return getMonitorTime();

    case SCREEN_SHOT_PATH:
      return getScreenShotPath();

    case IMAGE_CONTENT:
      return getImageContent();

    case CHECK_RESULT:
      return getCheckResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MONITOR_TIME:
      return isSetMonitorTime();
    case SCREEN_SHOT_PATH:
      return isSetScreenShotPath();
    case IMAGE_CONTENT:
      return isSetImageContent();
    case CHECK_RESULT:
      return isSetCheckResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RunMonitor)
      return this.equals((RunMonitor)that);
    return false;
  }

  public boolean equals(RunMonitor that) {
    if (that == null)
      return false;

    boolean this_present_monitorTime = true && this.isSetMonitorTime();
    boolean that_present_monitorTime = true && that.isSetMonitorTime();
    if (this_present_monitorTime || that_present_monitorTime) {
      if (!(this_present_monitorTime && that_present_monitorTime))
        return false;
      if (!this.monitorTime.equals(that.monitorTime))
        return false;
    }

    boolean this_present_screenShotPath = true && this.isSetScreenShotPath();
    boolean that_present_screenShotPath = true && that.isSetScreenShotPath();
    if (this_present_screenShotPath || that_present_screenShotPath) {
      if (!(this_present_screenShotPath && that_present_screenShotPath))
        return false;
      if (!this.screenShotPath.equals(that.screenShotPath))
        return false;
    }

    boolean this_present_imageContent = true && this.isSetImageContent();
    boolean that_present_imageContent = true && that.isSetImageContent();
    if (this_present_imageContent || that_present_imageContent) {
      if (!(this_present_imageContent && that_present_imageContent))
        return false;
      if (!this.imageContent.equals(that.imageContent))
        return false;
    }

    boolean this_present_checkResult = true && this.isSetCheckResult();
    boolean that_present_checkResult = true && that.isSetCheckResult();
    if (this_present_checkResult || that_present_checkResult) {
      if (!(this_present_checkResult && that_present_checkResult))
        return false;
      if (!this.checkResult.equals(that.checkResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RunMonitor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMonitorTime()).compareTo(other.isSetMonitorTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monitorTime, other.monitorTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreenShotPath()).compareTo(other.isSetScreenShotPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenShotPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenShotPath, other.screenShotPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageContent()).compareTo(other.isSetImageContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageContent, other.imageContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckResult()).compareTo(other.isSetCheckResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkResult, other.checkResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RunMonitor(");
    boolean first = true;

    sb.append("monitorTime:");
    if (this.monitorTime == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("screenShotPath:");
    if (this.screenShotPath == null) {
      sb.append("null");
    } else {
      sb.append(this.screenShotPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageContent:");
    if (this.imageContent == null) {
      sb.append("null");
    } else {
      sb.append(this.imageContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkResult:");
    if (this.checkResult == null) {
      sb.append("null");
    } else {
      sb.append(this.checkResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RunMonitorStandardSchemeFactory implements SchemeFactory {
    public RunMonitorStandardScheme getScheme() {
      return new RunMonitorStandardScheme();
    }
  }

  private static class RunMonitorStandardScheme extends StandardScheme<RunMonitor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RunMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MONITOR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.monitorTime = iprot.readString();
              struct.setMonitorTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCREEN_SHOT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.screenShotPath = iprot.readString();
              struct.setScreenShotPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageContent = iprot.readString();
              struct.setImageContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECK_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkResult = iprot.readString();
              struct.setCheckResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RunMonitor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.monitorTime != null) {
        oprot.writeFieldBegin(MONITOR_TIME_FIELD_DESC);
        oprot.writeString(struct.monitorTime);
        oprot.writeFieldEnd();
      }
      if (struct.screenShotPath != null) {
        oprot.writeFieldBegin(SCREEN_SHOT_PATH_FIELD_DESC);
        oprot.writeString(struct.screenShotPath);
        oprot.writeFieldEnd();
      }
      if (struct.imageContent != null) {
        oprot.writeFieldBegin(IMAGE_CONTENT_FIELD_DESC);
        oprot.writeString(struct.imageContent);
        oprot.writeFieldEnd();
      }
      if (struct.checkResult != null) {
        oprot.writeFieldBegin(CHECK_RESULT_FIELD_DESC);
        oprot.writeString(struct.checkResult);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RunMonitorTupleSchemeFactory implements SchemeFactory {
    public RunMonitorTupleScheme getScheme() {
      return new RunMonitorTupleScheme();
    }
  }

  private static class RunMonitorTupleScheme extends TupleScheme<RunMonitor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RunMonitor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMonitorTime()) {
        optionals.set(0);
      }
      if (struct.isSetScreenShotPath()) {
        optionals.set(1);
      }
      if (struct.isSetImageContent()) {
        optionals.set(2);
      }
      if (struct.isSetCheckResult()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMonitorTime()) {
        oprot.writeString(struct.monitorTime);
      }
      if (struct.isSetScreenShotPath()) {
        oprot.writeString(struct.screenShotPath);
      }
      if (struct.isSetImageContent()) {
        oprot.writeString(struct.imageContent);
      }
      if (struct.isSetCheckResult()) {
        oprot.writeString(struct.checkResult);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RunMonitor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.monitorTime = iprot.readString();
        struct.setMonitorTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.screenShotPath = iprot.readString();
        struct.setScreenShotPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageContent = iprot.readString();
        struct.setImageContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.checkResult = iprot.readString();
        struct.setCheckResultIsSet(true);
      }
    }
  }

}

