/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.nercis.isscp.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 定义静态检测结果
 * 1:string apkMD5 应用MD5值
 * 2:string checkDate 检测结束时间
 * 3:list<string> sensitives 敏感词组
 * 4:list<string> featuresCharacters 特征字符串
 * 5:list<APICheck> apiCheck Api检测结果
 * 6:string reportPath 静态检测报告路径
 * 7:string centerResultPath 中间结果存储路径
 */
public class StaticCheckResultData implements org.apache.thrift.TBase<StaticCheckResultData, StaticCheckResultData._Fields>, java.io.Serializable, Cloneable, Comparable<StaticCheckResultData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StaticCheckResultData");

  private static final org.apache.thrift.protocol.TField APK_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("apkMD5", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHECK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SENSITIVES_FIELD_DESC = new org.apache.thrift.protocol.TField("sensitives", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURES_CHARACTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("featuresCharacters", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField API_CHECK_FIELD_DESC = new org.apache.thrift.protocol.TField("apiCheck", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField REPORT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("reportPath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CENTER_RESULT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("centerResultPath", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StaticCheckResultDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StaticCheckResultDataTupleSchemeFactory());
  }

  public String apkMD5; // required
  public String checkDate; // required
  public List<String> sensitives; // required
  public List<String> featuresCharacters; // required
  public List<APICheck> apiCheck; // required
  public String reportPath; // required
  public String centerResultPath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APK_MD5((short)1, "apkMD5"),
    CHECK_DATE((short)2, "checkDate"),
    SENSITIVES((short)3, "sensitives"),
    FEATURES_CHARACTERS((short)4, "featuresCharacters"),
    API_CHECK((short)5, "apiCheck"),
    REPORT_PATH((short)6, "reportPath"),
    CENTER_RESULT_PATH((short)7, "centerResultPath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APK_MD5
          return APK_MD5;
        case 2: // CHECK_DATE
          return CHECK_DATE;
        case 3: // SENSITIVES
          return SENSITIVES;
        case 4: // FEATURES_CHARACTERS
          return FEATURES_CHARACTERS;
        case 5: // API_CHECK
          return API_CHECK;
        case 6: // REPORT_PATH
          return REPORT_PATH;
        case 7: // CENTER_RESULT_PATH
          return CENTER_RESULT_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APK_MD5, new org.apache.thrift.meta_data.FieldMetaData("apkMD5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_DATE, new org.apache.thrift.meta_data.FieldMetaData("checkDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENSITIVES, new org.apache.thrift.meta_data.FieldMetaData("sensitives", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURES_CHARACTERS, new org.apache.thrift.meta_data.FieldMetaData("featuresCharacters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.API_CHECK, new org.apache.thrift.meta_data.FieldMetaData("apiCheck", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APICheck.class))));
    tmpMap.put(_Fields.REPORT_PATH, new org.apache.thrift.meta_data.FieldMetaData("reportPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CENTER_RESULT_PATH, new org.apache.thrift.meta_data.FieldMetaData("centerResultPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StaticCheckResultData.class, metaDataMap);
  }

  public StaticCheckResultData() {
  }

  public StaticCheckResultData(
    String apkMD5,
    String checkDate,
    List<String> sensitives,
    List<String> featuresCharacters,
    List<APICheck> apiCheck,
    String reportPath,
    String centerResultPath)
  {
    this();
    this.apkMD5 = apkMD5;
    this.checkDate = checkDate;
    this.sensitives = sensitives;
    this.featuresCharacters = featuresCharacters;
    this.apiCheck = apiCheck;
    this.reportPath = reportPath;
    this.centerResultPath = centerResultPath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StaticCheckResultData(StaticCheckResultData other) {
    if (other.isSetApkMD5()) {
      this.apkMD5 = other.apkMD5;
    }
    if (other.isSetCheckDate()) {
      this.checkDate = other.checkDate;
    }
    if (other.isSetSensitives()) {
      List<String> __this__sensitives = new ArrayList<String>(other.sensitives);
      this.sensitives = __this__sensitives;
    }
    if (other.isSetFeaturesCharacters()) {
      List<String> __this__featuresCharacters = new ArrayList<String>(other.featuresCharacters);
      this.featuresCharacters = __this__featuresCharacters;
    }
    if (other.isSetApiCheck()) {
      List<APICheck> __this__apiCheck = new ArrayList<APICheck>(other.apiCheck.size());
      for (APICheck other_element : other.apiCheck) {
        __this__apiCheck.add(new APICheck(other_element));
      }
      this.apiCheck = __this__apiCheck;
    }
    if (other.isSetReportPath()) {
      this.reportPath = other.reportPath;
    }
    if (other.isSetCenterResultPath()) {
      this.centerResultPath = other.centerResultPath;
    }
  }

  public StaticCheckResultData deepCopy() {
    return new StaticCheckResultData(this);
  }

  @Override
  public void clear() {
    this.apkMD5 = null;
    this.checkDate = null;
    this.sensitives = null;
    this.featuresCharacters = null;
    this.apiCheck = null;
    this.reportPath = null;
    this.centerResultPath = null;
  }

  public String getApkMD5() {
    return this.apkMD5;
  }

  public StaticCheckResultData setApkMD5(String apkMD5) {
    this.apkMD5 = apkMD5;
    return this;
  }

  public void unsetApkMD5() {
    this.apkMD5 = null;
  }

  /** Returns true if field apkMD5 is set (has been assigned a value) and false otherwise */
  public boolean isSetApkMD5() {
    return this.apkMD5 != null;
  }

  public void setApkMD5IsSet(boolean value) {
    if (!value) {
      this.apkMD5 = null;
    }
  }

  public String getCheckDate() {
    return this.checkDate;
  }

  public StaticCheckResultData setCheckDate(String checkDate) {
    this.checkDate = checkDate;
    return this;
  }

  public void unsetCheckDate() {
    this.checkDate = null;
  }

  /** Returns true if field checkDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDate() {
    return this.checkDate != null;
  }

  public void setCheckDateIsSet(boolean value) {
    if (!value) {
      this.checkDate = null;
    }
  }

  public int getSensitivesSize() {
    return (this.sensitives == null) ? 0 : this.sensitives.size();
  }

  public java.util.Iterator<String> getSensitivesIterator() {
    return (this.sensitives == null) ? null : this.sensitives.iterator();
  }

  public void addToSensitives(String elem) {
    if (this.sensitives == null) {
      this.sensitives = new ArrayList<String>();
    }
    this.sensitives.add(elem);
  }

  public List<String> getSensitives() {
    return this.sensitives;
  }

  public StaticCheckResultData setSensitives(List<String> sensitives) {
    this.sensitives = sensitives;
    return this;
  }

  public void unsetSensitives() {
    this.sensitives = null;
  }

  /** Returns true if field sensitives is set (has been assigned a value) and false otherwise */
  public boolean isSetSensitives() {
    return this.sensitives != null;
  }

  public void setSensitivesIsSet(boolean value) {
    if (!value) {
      this.sensitives = null;
    }
  }

  public int getFeaturesCharactersSize() {
    return (this.featuresCharacters == null) ? 0 : this.featuresCharacters.size();
  }

  public java.util.Iterator<String> getFeaturesCharactersIterator() {
    return (this.featuresCharacters == null) ? null : this.featuresCharacters.iterator();
  }

  public void addToFeaturesCharacters(String elem) {
    if (this.featuresCharacters == null) {
      this.featuresCharacters = new ArrayList<String>();
    }
    this.featuresCharacters.add(elem);
  }

  public List<String> getFeaturesCharacters() {
    return this.featuresCharacters;
  }

  public StaticCheckResultData setFeaturesCharacters(List<String> featuresCharacters) {
    this.featuresCharacters = featuresCharacters;
    return this;
  }

  public void unsetFeaturesCharacters() {
    this.featuresCharacters = null;
  }

  /** Returns true if field featuresCharacters is set (has been assigned a value) and false otherwise */
  public boolean isSetFeaturesCharacters() {
    return this.featuresCharacters != null;
  }

  public void setFeaturesCharactersIsSet(boolean value) {
    if (!value) {
      this.featuresCharacters = null;
    }
  }

  public int getApiCheckSize() {
    return (this.apiCheck == null) ? 0 : this.apiCheck.size();
  }

  public java.util.Iterator<APICheck> getApiCheckIterator() {
    return (this.apiCheck == null) ? null : this.apiCheck.iterator();
  }

  public void addToApiCheck(APICheck elem) {
    if (this.apiCheck == null) {
      this.apiCheck = new ArrayList<APICheck>();
    }
    this.apiCheck.add(elem);
  }

  public List<APICheck> getApiCheck() {
    return this.apiCheck;
  }

  public StaticCheckResultData setApiCheck(List<APICheck> apiCheck) {
    this.apiCheck = apiCheck;
    return this;
  }

  public void unsetApiCheck() {
    this.apiCheck = null;
  }

  /** Returns true if field apiCheck is set (has been assigned a value) and false otherwise */
  public boolean isSetApiCheck() {
    return this.apiCheck != null;
  }

  public void setApiCheckIsSet(boolean value) {
    if (!value) {
      this.apiCheck = null;
    }
  }

  public String getReportPath() {
    return this.reportPath;
  }

  public StaticCheckResultData setReportPath(String reportPath) {
    this.reportPath = reportPath;
    return this;
  }

  public void unsetReportPath() {
    this.reportPath = null;
  }

  /** Returns true if field reportPath is set (has been assigned a value) and false otherwise */
  public boolean isSetReportPath() {
    return this.reportPath != null;
  }

  public void setReportPathIsSet(boolean value) {
    if (!value) {
      this.reportPath = null;
    }
  }

  public String getCenterResultPath() {
    return this.centerResultPath;
  }

  public StaticCheckResultData setCenterResultPath(String centerResultPath) {
    this.centerResultPath = centerResultPath;
    return this;
  }

  public void unsetCenterResultPath() {
    this.centerResultPath = null;
  }

  /** Returns true if field centerResultPath is set (has been assigned a value) and false otherwise */
  public boolean isSetCenterResultPath() {
    return this.centerResultPath != null;
  }

  public void setCenterResultPathIsSet(boolean value) {
    if (!value) {
      this.centerResultPath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APK_MD5:
      if (value == null) {
        unsetApkMD5();
      } else {
        setApkMD5((String)value);
      }
      break;

    case CHECK_DATE:
      if (value == null) {
        unsetCheckDate();
      } else {
        setCheckDate((String)value);
      }
      break;

    case SENSITIVES:
      if (value == null) {
        unsetSensitives();
      } else {
        setSensitives((List<String>)value);
      }
      break;

    case FEATURES_CHARACTERS:
      if (value == null) {
        unsetFeaturesCharacters();
      } else {
        setFeaturesCharacters((List<String>)value);
      }
      break;

    case API_CHECK:
      if (value == null) {
        unsetApiCheck();
      } else {
        setApiCheck((List<APICheck>)value);
      }
      break;

    case REPORT_PATH:
      if (value == null) {
        unsetReportPath();
      } else {
        setReportPath((String)value);
      }
      break;

    case CENTER_RESULT_PATH:
      if (value == null) {
        unsetCenterResultPath();
      } else {
        setCenterResultPath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APK_MD5:
      return getApkMD5();

    case CHECK_DATE:
      return getCheckDate();

    case SENSITIVES:
      return getSensitives();

    case FEATURES_CHARACTERS:
      return getFeaturesCharacters();

    case API_CHECK:
      return getApiCheck();

    case REPORT_PATH:
      return getReportPath();

    case CENTER_RESULT_PATH:
      return getCenterResultPath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APK_MD5:
      return isSetApkMD5();
    case CHECK_DATE:
      return isSetCheckDate();
    case SENSITIVES:
      return isSetSensitives();
    case FEATURES_CHARACTERS:
      return isSetFeaturesCharacters();
    case API_CHECK:
      return isSetApiCheck();
    case REPORT_PATH:
      return isSetReportPath();
    case CENTER_RESULT_PATH:
      return isSetCenterResultPath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StaticCheckResultData)
      return this.equals((StaticCheckResultData)that);
    return false;
  }

  public boolean equals(StaticCheckResultData that) {
    if (that == null)
      return false;

    boolean this_present_apkMD5 = true && this.isSetApkMD5();
    boolean that_present_apkMD5 = true && that.isSetApkMD5();
    if (this_present_apkMD5 || that_present_apkMD5) {
      if (!(this_present_apkMD5 && that_present_apkMD5))
        return false;
      if (!this.apkMD5.equals(that.apkMD5))
        return false;
    }

    boolean this_present_checkDate = true && this.isSetCheckDate();
    boolean that_present_checkDate = true && that.isSetCheckDate();
    if (this_present_checkDate || that_present_checkDate) {
      if (!(this_present_checkDate && that_present_checkDate))
        return false;
      if (!this.checkDate.equals(that.checkDate))
        return false;
    }

    boolean this_present_sensitives = true && this.isSetSensitives();
    boolean that_present_sensitives = true && that.isSetSensitives();
    if (this_present_sensitives || that_present_sensitives) {
      if (!(this_present_sensitives && that_present_sensitives))
        return false;
      if (!this.sensitives.equals(that.sensitives))
        return false;
    }

    boolean this_present_featuresCharacters = true && this.isSetFeaturesCharacters();
    boolean that_present_featuresCharacters = true && that.isSetFeaturesCharacters();
    if (this_present_featuresCharacters || that_present_featuresCharacters) {
      if (!(this_present_featuresCharacters && that_present_featuresCharacters))
        return false;
      if (!this.featuresCharacters.equals(that.featuresCharacters))
        return false;
    }

    boolean this_present_apiCheck = true && this.isSetApiCheck();
    boolean that_present_apiCheck = true && that.isSetApiCheck();
    if (this_present_apiCheck || that_present_apiCheck) {
      if (!(this_present_apiCheck && that_present_apiCheck))
        return false;
      if (!this.apiCheck.equals(that.apiCheck))
        return false;
    }

    boolean this_present_reportPath = true && this.isSetReportPath();
    boolean that_present_reportPath = true && that.isSetReportPath();
    if (this_present_reportPath || that_present_reportPath) {
      if (!(this_present_reportPath && that_present_reportPath))
        return false;
      if (!this.reportPath.equals(that.reportPath))
        return false;
    }

    boolean this_present_centerResultPath = true && this.isSetCenterResultPath();
    boolean that_present_centerResultPath = true && that.isSetCenterResultPath();
    if (this_present_centerResultPath || that_present_centerResultPath) {
      if (!(this_present_centerResultPath && that_present_centerResultPath))
        return false;
      if (!this.centerResultPath.equals(that.centerResultPath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StaticCheckResultData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApkMD5()).compareTo(other.isSetApkMD5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApkMD5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apkMD5, other.apkMD5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDate()).compareTo(other.isSetCheckDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDate, other.checkDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSensitives()).compareTo(other.isSetSensitives());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensitives()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensitives, other.sensitives);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeaturesCharacters()).compareTo(other.isSetFeaturesCharacters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeaturesCharacters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featuresCharacters, other.featuresCharacters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiCheck()).compareTo(other.isSetApiCheck());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiCheck()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiCheck, other.apiCheck);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportPath()).compareTo(other.isSetReportPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportPath, other.reportPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCenterResultPath()).compareTo(other.isSetCenterResultPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCenterResultPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centerResultPath, other.centerResultPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StaticCheckResultData(");
    boolean first = true;

    sb.append("apkMD5:");
    if (this.apkMD5 == null) {
      sb.append("null");
    } else {
      sb.append(this.apkMD5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDate:");
    if (this.checkDate == null) {
      sb.append("null");
    } else {
      sb.append(this.checkDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sensitives:");
    if (this.sensitives == null) {
      sb.append("null");
    } else {
      sb.append(this.sensitives);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featuresCharacters:");
    if (this.featuresCharacters == null) {
      sb.append("null");
    } else {
      sb.append(this.featuresCharacters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apiCheck:");
    if (this.apiCheck == null) {
      sb.append("null");
    } else {
      sb.append(this.apiCheck);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportPath:");
    if (this.reportPath == null) {
      sb.append("null");
    } else {
      sb.append(this.reportPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("centerResultPath:");
    if (this.centerResultPath == null) {
      sb.append("null");
    } else {
      sb.append(this.centerResultPath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StaticCheckResultDataStandardSchemeFactory implements SchemeFactory {
    public StaticCheckResultDataStandardScheme getScheme() {
      return new StaticCheckResultDataStandardScheme();
    }
  }

  private static class StaticCheckResultDataStandardScheme extends StandardScheme<StaticCheckResultData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StaticCheckResultData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APK_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apkMD5 = iprot.readString();
              struct.setApkMD5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHECK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkDate = iprot.readString();
              struct.setCheckDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SENSITIVES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.sensitives = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.sensitives.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setSensitivesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEATURES_CHARACTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.featuresCharacters = new ArrayList<String>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  String _elem13;
                  _elem13 = iprot.readString();
                  struct.featuresCharacters.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setFeaturesCharactersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // API_CHECK
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.apiCheck = new ArrayList<APICheck>(_list14.size);
                for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                {
                  APICheck _elem16;
                  _elem16 = new APICheck();
                  _elem16.read(iprot);
                  struct.apiCheck.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setApiCheckIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPORT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportPath = iprot.readString();
              struct.setReportPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CENTER_RESULT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.centerResultPath = iprot.readString();
              struct.setCenterResultPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StaticCheckResultData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.apkMD5 != null) {
        oprot.writeFieldBegin(APK_MD5_FIELD_DESC);
        oprot.writeString(struct.apkMD5);
        oprot.writeFieldEnd();
      }
      if (struct.checkDate != null) {
        oprot.writeFieldBegin(CHECK_DATE_FIELD_DESC);
        oprot.writeString(struct.checkDate);
        oprot.writeFieldEnd();
      }
      if (struct.sensitives != null) {
        oprot.writeFieldBegin(SENSITIVES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sensitives.size()));
          for (String _iter17 : struct.sensitives)
          {
            oprot.writeString(_iter17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.featuresCharacters != null) {
        oprot.writeFieldBegin(FEATURES_CHARACTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.featuresCharacters.size()));
          for (String _iter18 : struct.featuresCharacters)
          {
            oprot.writeString(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.apiCheck != null) {
        oprot.writeFieldBegin(API_CHECK_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.apiCheck.size()));
          for (APICheck _iter19 : struct.apiCheck)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.reportPath != null) {
        oprot.writeFieldBegin(REPORT_PATH_FIELD_DESC);
        oprot.writeString(struct.reportPath);
        oprot.writeFieldEnd();
      }
      if (struct.centerResultPath != null) {
        oprot.writeFieldBegin(CENTER_RESULT_PATH_FIELD_DESC);
        oprot.writeString(struct.centerResultPath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StaticCheckResultDataTupleSchemeFactory implements SchemeFactory {
    public StaticCheckResultDataTupleScheme getScheme() {
      return new StaticCheckResultDataTupleScheme();
    }
  }

  private static class StaticCheckResultDataTupleScheme extends TupleScheme<StaticCheckResultData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StaticCheckResultData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApkMD5()) {
        optionals.set(0);
      }
      if (struct.isSetCheckDate()) {
        optionals.set(1);
      }
      if (struct.isSetSensitives()) {
        optionals.set(2);
      }
      if (struct.isSetFeaturesCharacters()) {
        optionals.set(3);
      }
      if (struct.isSetApiCheck()) {
        optionals.set(4);
      }
      if (struct.isSetReportPath()) {
        optionals.set(5);
      }
      if (struct.isSetCenterResultPath()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetApkMD5()) {
        oprot.writeString(struct.apkMD5);
      }
      if (struct.isSetCheckDate()) {
        oprot.writeString(struct.checkDate);
      }
      if (struct.isSetSensitives()) {
        {
          oprot.writeI32(struct.sensitives.size());
          for (String _iter20 : struct.sensitives)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetFeaturesCharacters()) {
        {
          oprot.writeI32(struct.featuresCharacters.size());
          for (String _iter21 : struct.featuresCharacters)
          {
            oprot.writeString(_iter21);
          }
        }
      }
      if (struct.isSetApiCheck()) {
        {
          oprot.writeI32(struct.apiCheck.size());
          for (APICheck _iter22 : struct.apiCheck)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetReportPath()) {
        oprot.writeString(struct.reportPath);
      }
      if (struct.isSetCenterResultPath()) {
        oprot.writeString(struct.centerResultPath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StaticCheckResultData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.apkMD5 = iprot.readString();
        struct.setApkMD5IsSet(true);
      }
      if (incoming.get(1)) {
        struct.checkDate = iprot.readString();
        struct.setCheckDateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sensitives = new ArrayList<String>(_list23.size);
          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
          {
            String _elem25;
            _elem25 = iprot.readString();
            struct.sensitives.add(_elem25);
          }
        }
        struct.setSensitivesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.featuresCharacters = new ArrayList<String>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            String _elem28;
            _elem28 = iprot.readString();
            struct.featuresCharacters.add(_elem28);
          }
        }
        struct.setFeaturesCharactersIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.apiCheck = new ArrayList<APICheck>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            APICheck _elem31;
            _elem31 = new APICheck();
            _elem31.read(iprot);
            struct.apiCheck.add(_elem31);
          }
        }
        struct.setApiCheckIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reportPath = iprot.readString();
        struct.setReportPathIsSet(true);
      }
      if (incoming.get(6)) {
        struct.centerResultPath = iprot.readString();
        struct.setCenterResultPathIsSet(true);
      }
    }
  }

}

